
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model SoftwareCategory
 * 
 */
export type SoftwareCategory = $Result.DefaultSelection<Prisma.$SoftwareCategoryPayload>
/**
 * Model Vendor
 * 
 */
export type Vendor = $Result.DefaultSelection<Prisma.$VendorPayload>
/**
 * Model Software
 * 
 */
export type Software = $Result.DefaultSelection<Prisma.$SoftwarePayload>
/**
 * Model Version
 * 
 */
export type Version = $Result.DefaultSelection<Prisma.$VersionPayload>
/**
 * Model Build
 * 
 */
export type Build = $Result.DefaultSelection<Prisma.$BuildPayload>
/**
 * Model Mirror
 * 
 */
export type Mirror = $Result.DefaultSelection<Prisma.$MirrorPayload>
/**
 * Model SoftwareMedia
 * 
 */
export type SoftwareMedia = $Result.DefaultSelection<Prisma.$SoftwareMediaPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model SystemRequirement
 * 
 */
export type SystemRequirement = $Result.DefaultSelection<Prisma.$SystemRequirementPayload>
/**
 * Model FAQ
 * 
 */
export type FAQ = $Result.DefaultSelection<Prisma.$FAQPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Page
 * 
 */
export type Page = $Result.DefaultSelection<Prisma.$PagePayload>
/**
 * Model Setting
 * 
 */
export type Setting = $Result.DefaultSelection<Prisma.$SettingPayload>
/**
 * Model DownloadLog
 * 
 */
export type DownloadLog = $Result.DefaultSelection<Prisma.$DownloadLogPayload>
/**
 * Model DownloadCounter
 * 
 */
export type DownloadCounter = $Result.DefaultSelection<Prisma.$DownloadCounterPayload>
/**
 * Model DownloadCounter30d
 * 
 */
export type DownloadCounter30d = $Result.DefaultSelection<Prisma.$DownloadCounter30dPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const BuildType: {
  X86: 'X86',
  X64: 'X64',
  ARM64: 'ARM64',
  Installer: 'Installer',
  Portable: 'Portable',
  Other: 'Other'
};

export type BuildType = (typeof BuildType)[keyof typeof BuildType]


export const MediaType: {
  ICON: 'ICON',
  HERO: 'HERO',
  GALLERY: 'GALLERY',
  SCREENSHOT: 'SCREENSHOT',
  VIDEO: 'VIDEO'
};

export type MediaType = (typeof MediaType)[keyof typeof MediaType]


export const CommentStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  SPAM: 'SPAM',
  DELETED: 'DELETED'
};

export type CommentStatus = (typeof CommentStatus)[keyof typeof CommentStatus]


export const Role: {
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  UPLOADER: 'UPLOADER',
  USER: 'USER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const PageStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

export type PageStatus = (typeof PageStatus)[keyof typeof PageStatus]

}

export type BuildType = $Enums.BuildType

export const BuildType: typeof $Enums.BuildType

export type MediaType = $Enums.MediaType

export const MediaType: typeof $Enums.MediaType

export type CommentStatus = $Enums.CommentStatus

export const CommentStatus: typeof $Enums.CommentStatus

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type PageStatus = $Enums.PageStatus

export const PageStatus: typeof $Enums.PageStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.category.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.softwareCategory`: Exposes CRUD operations for the **SoftwareCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SoftwareCategories
    * const softwareCategories = await prisma.softwareCategory.findMany()
    * ```
    */
  get softwareCategory(): Prisma.SoftwareCategoryDelegate<ExtArgs>;

  /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<ExtArgs>;

  /**
   * `prisma.software`: Exposes CRUD operations for the **Software** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Software
    * const software = await prisma.software.findMany()
    * ```
    */
  get software(): Prisma.SoftwareDelegate<ExtArgs>;

  /**
   * `prisma.version`: Exposes CRUD operations for the **Version** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Versions
    * const versions = await prisma.version.findMany()
    * ```
    */
  get version(): Prisma.VersionDelegate<ExtArgs>;

  /**
   * `prisma.build`: Exposes CRUD operations for the **Build** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Builds
    * const builds = await prisma.build.findMany()
    * ```
    */
  get build(): Prisma.BuildDelegate<ExtArgs>;

  /**
   * `prisma.mirror`: Exposes CRUD operations for the **Mirror** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mirrors
    * const mirrors = await prisma.mirror.findMany()
    * ```
    */
  get mirror(): Prisma.MirrorDelegate<ExtArgs>;

  /**
   * `prisma.softwareMedia`: Exposes CRUD operations for the **SoftwareMedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SoftwareMedias
    * const softwareMedias = await prisma.softwareMedia.findMany()
    * ```
    */
  get softwareMedia(): Prisma.SoftwareMediaDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;

  /**
   * `prisma.systemRequirement`: Exposes CRUD operations for the **SystemRequirement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemRequirements
    * const systemRequirements = await prisma.systemRequirement.findMany()
    * ```
    */
  get systemRequirement(): Prisma.SystemRequirementDelegate<ExtArgs>;

  /**
   * `prisma.fAQ`: Exposes CRUD operations for the **FAQ** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FAQS
    * const fAQS = await prisma.fAQ.findMany()
    * ```
    */
  get fAQ(): Prisma.FAQDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.page`: Exposes CRUD operations for the **Page** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pages
    * const pages = await prisma.page.findMany()
    * ```
    */
  get page(): Prisma.PageDelegate<ExtArgs>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<ExtArgs>;

  /**
   * `prisma.downloadLog`: Exposes CRUD operations for the **DownloadLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DownloadLogs
    * const downloadLogs = await prisma.downloadLog.findMany()
    * ```
    */
  get downloadLog(): Prisma.DownloadLogDelegate<ExtArgs>;

  /**
   * `prisma.downloadCounter`: Exposes CRUD operations for the **DownloadCounter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DownloadCounters
    * const downloadCounters = await prisma.downloadCounter.findMany()
    * ```
    */
  get downloadCounter(): Prisma.DownloadCounterDelegate<ExtArgs>;

  /**
   * `prisma.downloadCounter30d`: Exposes CRUD operations for the **DownloadCounter30d** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DownloadCounter30ds
    * const downloadCounter30ds = await prisma.downloadCounter30d.findMany()
    * ```
    */
  get downloadCounter30d(): Prisma.DownloadCounter30dDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Category: 'Category',
    Tag: 'Tag',
    SoftwareCategory: 'SoftwareCategory',
    Vendor: 'Vendor',
    Software: 'Software',
    Version: 'Version',
    Build: 'Build',
    Mirror: 'Mirror',
    SoftwareMedia: 'SoftwareMedia',
    Comment: 'Comment',
    Review: 'Review',
    SystemRequirement: 'SystemRequirement',
    FAQ: 'FAQ',
    User: 'User',
    Page: 'Page',
    Setting: 'Setting',
    DownloadLog: 'DownloadLog',
    DownloadCounter: 'DownloadCounter',
    DownloadCounter30d: 'DownloadCounter30d'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "category" | "tag" | "softwareCategory" | "vendor" | "software" | "version" | "build" | "mirror" | "softwareMedia" | "comment" | "review" | "systemRequirement" | "fAQ" | "user" | "page" | "setting" | "downloadLog" | "downloadCounter" | "downloadCounter30d"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      SoftwareCategory: {
        payload: Prisma.$SoftwareCategoryPayload<ExtArgs>
        fields: Prisma.SoftwareCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoftwareCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoftwareCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareCategoryPayload>
          }
          findFirst: {
            args: Prisma.SoftwareCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoftwareCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareCategoryPayload>
          }
          findMany: {
            args: Prisma.SoftwareCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareCategoryPayload>[]
          }
          create: {
            args: Prisma.SoftwareCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareCategoryPayload>
          }
          createMany: {
            args: Prisma.SoftwareCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SoftwareCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareCategoryPayload>
          }
          update: {
            args: Prisma.SoftwareCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareCategoryPayload>
          }
          deleteMany: {
            args: Prisma.SoftwareCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoftwareCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SoftwareCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareCategoryPayload>
          }
          aggregate: {
            args: Prisma.SoftwareCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoftwareCategory>
          }
          groupBy: {
            args: Prisma.SoftwareCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoftwareCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SoftwareCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<SoftwareCategoryCountAggregateOutputType> | number
          }
        }
      }
      Vendor: {
        payload: Prisma.$VendorPayload<ExtArgs>
        fields: Prisma.VendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findFirst: {
            args: Prisma.VendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          findMany: {
            args: Prisma.VendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>[]
          }
          create: {
            args: Prisma.VendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          createMany: {
            args: Prisma.VendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          update: {
            args: Prisma.VendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          deleteMany: {
            args: Prisma.VendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendorPayload>
          }
          aggregate: {
            args: Prisma.VendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendor>
          }
          groupBy: {
            args: Prisma.VendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorCountArgs<ExtArgs>
            result: $Utils.Optional<VendorCountAggregateOutputType> | number
          }
        }
      }
      Software: {
        payload: Prisma.$SoftwarePayload<ExtArgs>
        fields: Prisma.SoftwareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoftwareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoftwareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          findFirst: {
            args: Prisma.SoftwareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoftwareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          findMany: {
            args: Prisma.SoftwareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>[]
          }
          create: {
            args: Prisma.SoftwareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          createMany: {
            args: Prisma.SoftwareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SoftwareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          update: {
            args: Prisma.SoftwareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          deleteMany: {
            args: Prisma.SoftwareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoftwareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SoftwareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwarePayload>
          }
          aggregate: {
            args: Prisma.SoftwareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoftware>
          }
          groupBy: {
            args: Prisma.SoftwareGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoftwareGroupByOutputType>[]
          }
          count: {
            args: Prisma.SoftwareCountArgs<ExtArgs>
            result: $Utils.Optional<SoftwareCountAggregateOutputType> | number
          }
        }
      }
      Version: {
        payload: Prisma.$VersionPayload<ExtArgs>
        fields: Prisma.VersionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VersionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VersionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          findFirst: {
            args: Prisma.VersionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VersionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          findMany: {
            args: Prisma.VersionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>[]
          }
          create: {
            args: Prisma.VersionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          createMany: {
            args: Prisma.VersionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VersionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          update: {
            args: Prisma.VersionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          deleteMany: {
            args: Prisma.VersionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VersionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VersionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VersionPayload>
          }
          aggregate: {
            args: Prisma.VersionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVersion>
          }
          groupBy: {
            args: Prisma.VersionGroupByArgs<ExtArgs>
            result: $Utils.Optional<VersionGroupByOutputType>[]
          }
          count: {
            args: Prisma.VersionCountArgs<ExtArgs>
            result: $Utils.Optional<VersionCountAggregateOutputType> | number
          }
        }
      }
      Build: {
        payload: Prisma.$BuildPayload<ExtArgs>
        fields: Prisma.BuildFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuildFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuildFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          findFirst: {
            args: Prisma.BuildFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuildFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          findMany: {
            args: Prisma.BuildFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>[]
          }
          create: {
            args: Prisma.BuildCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          createMany: {
            args: Prisma.BuildCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BuildDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          update: {
            args: Prisma.BuildUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          deleteMany: {
            args: Prisma.BuildDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuildUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BuildUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuildPayload>
          }
          aggregate: {
            args: Prisma.BuildAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuild>
          }
          groupBy: {
            args: Prisma.BuildGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuildGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuildCountArgs<ExtArgs>
            result: $Utils.Optional<BuildCountAggregateOutputType> | number
          }
        }
      }
      Mirror: {
        payload: Prisma.$MirrorPayload<ExtArgs>
        fields: Prisma.MirrorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MirrorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MirrorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MirrorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MirrorPayload>
          }
          findFirst: {
            args: Prisma.MirrorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MirrorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MirrorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MirrorPayload>
          }
          findMany: {
            args: Prisma.MirrorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MirrorPayload>[]
          }
          create: {
            args: Prisma.MirrorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MirrorPayload>
          }
          createMany: {
            args: Prisma.MirrorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MirrorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MirrorPayload>
          }
          update: {
            args: Prisma.MirrorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MirrorPayload>
          }
          deleteMany: {
            args: Prisma.MirrorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MirrorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MirrorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MirrorPayload>
          }
          aggregate: {
            args: Prisma.MirrorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMirror>
          }
          groupBy: {
            args: Prisma.MirrorGroupByArgs<ExtArgs>
            result: $Utils.Optional<MirrorGroupByOutputType>[]
          }
          count: {
            args: Prisma.MirrorCountArgs<ExtArgs>
            result: $Utils.Optional<MirrorCountAggregateOutputType> | number
          }
        }
      }
      SoftwareMedia: {
        payload: Prisma.$SoftwareMediaPayload<ExtArgs>
        fields: Prisma.SoftwareMediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoftwareMediaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareMediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoftwareMediaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareMediaPayload>
          }
          findFirst: {
            args: Prisma.SoftwareMediaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareMediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoftwareMediaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareMediaPayload>
          }
          findMany: {
            args: Prisma.SoftwareMediaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareMediaPayload>[]
          }
          create: {
            args: Prisma.SoftwareMediaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareMediaPayload>
          }
          createMany: {
            args: Prisma.SoftwareMediaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SoftwareMediaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareMediaPayload>
          }
          update: {
            args: Prisma.SoftwareMediaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareMediaPayload>
          }
          deleteMany: {
            args: Prisma.SoftwareMediaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoftwareMediaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SoftwareMediaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoftwareMediaPayload>
          }
          aggregate: {
            args: Prisma.SoftwareMediaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoftwareMedia>
          }
          groupBy: {
            args: Prisma.SoftwareMediaGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoftwareMediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.SoftwareMediaCountArgs<ExtArgs>
            result: $Utils.Optional<SoftwareMediaCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      SystemRequirement: {
        payload: Prisma.$SystemRequirementPayload<ExtArgs>
        fields: Prisma.SystemRequirementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemRequirementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemRequirementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemRequirementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemRequirementPayload>
          }
          findFirst: {
            args: Prisma.SystemRequirementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemRequirementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemRequirementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemRequirementPayload>
          }
          findMany: {
            args: Prisma.SystemRequirementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemRequirementPayload>[]
          }
          create: {
            args: Prisma.SystemRequirementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemRequirementPayload>
          }
          createMany: {
            args: Prisma.SystemRequirementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SystemRequirementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemRequirementPayload>
          }
          update: {
            args: Prisma.SystemRequirementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemRequirementPayload>
          }
          deleteMany: {
            args: Prisma.SystemRequirementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemRequirementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemRequirementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemRequirementPayload>
          }
          aggregate: {
            args: Prisma.SystemRequirementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemRequirement>
          }
          groupBy: {
            args: Prisma.SystemRequirementGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemRequirementGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemRequirementCountArgs<ExtArgs>
            result: $Utils.Optional<SystemRequirementCountAggregateOutputType> | number
          }
        }
      }
      FAQ: {
        payload: Prisma.$FAQPayload<ExtArgs>
        fields: Prisma.FAQFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FAQFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FAQFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findFirst: {
            args: Prisma.FAQFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FAQFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          findMany: {
            args: Prisma.FAQFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>[]
          }
          create: {
            args: Prisma.FAQCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          createMany: {
            args: Prisma.FAQCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FAQDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          update: {
            args: Prisma.FAQUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          deleteMany: {
            args: Prisma.FAQDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FAQUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FAQUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FAQPayload>
          }
          aggregate: {
            args: Prisma.FAQAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFAQ>
          }
          groupBy: {
            args: Prisma.FAQGroupByArgs<ExtArgs>
            result: $Utils.Optional<FAQGroupByOutputType>[]
          }
          count: {
            args: Prisma.FAQCountArgs<ExtArgs>
            result: $Utils.Optional<FAQCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Page: {
        payload: Prisma.$PagePayload<ExtArgs>
        fields: Prisma.PageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          findFirst: {
            args: Prisma.PageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          findMany: {
            args: Prisma.PageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>[]
          }
          create: {
            args: Prisma.PageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          createMany: {
            args: Prisma.PageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          update: {
            args: Prisma.PageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          deleteMany: {
            args: Prisma.PageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PagePayload>
          }
          aggregate: {
            args: Prisma.PageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePage>
          }
          groupBy: {
            args: Prisma.PageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PageCountArgs<ExtArgs>
            result: $Utils.Optional<PageCountAggregateOutputType> | number
          }
        }
      }
      Setting: {
        payload: Prisma.$SettingPayload<ExtArgs>
        fields: Prisma.SettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findFirst: {
            args: Prisma.SettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findMany: {
            args: Prisma.SettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          create: {
            args: Prisma.SettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          createMany: {
            args: Prisma.SettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          update: {
            args: Prisma.SettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          deleteMany: {
            args: Prisma.SettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          aggregate: {
            args: Prisma.SettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetting>
          }
          groupBy: {
            args: Prisma.SettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingCountArgs<ExtArgs>
            result: $Utils.Optional<SettingCountAggregateOutputType> | number
          }
        }
      }
      DownloadLog: {
        payload: Prisma.$DownloadLogPayload<ExtArgs>
        fields: Prisma.DownloadLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DownloadLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DownloadLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadLogPayload>
          }
          findFirst: {
            args: Prisma.DownloadLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DownloadLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadLogPayload>
          }
          findMany: {
            args: Prisma.DownloadLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadLogPayload>[]
          }
          create: {
            args: Prisma.DownloadLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadLogPayload>
          }
          createMany: {
            args: Prisma.DownloadLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DownloadLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadLogPayload>
          }
          update: {
            args: Prisma.DownloadLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadLogPayload>
          }
          deleteMany: {
            args: Prisma.DownloadLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DownloadLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DownloadLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadLogPayload>
          }
          aggregate: {
            args: Prisma.DownloadLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDownloadLog>
          }
          groupBy: {
            args: Prisma.DownloadLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<DownloadLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.DownloadLogCountArgs<ExtArgs>
            result: $Utils.Optional<DownloadLogCountAggregateOutputType> | number
          }
        }
      }
      DownloadCounter: {
        payload: Prisma.$DownloadCounterPayload<ExtArgs>
        fields: Prisma.DownloadCounterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DownloadCounterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DownloadCounterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounterPayload>
          }
          findFirst: {
            args: Prisma.DownloadCounterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DownloadCounterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounterPayload>
          }
          findMany: {
            args: Prisma.DownloadCounterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounterPayload>[]
          }
          create: {
            args: Prisma.DownloadCounterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounterPayload>
          }
          createMany: {
            args: Prisma.DownloadCounterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DownloadCounterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounterPayload>
          }
          update: {
            args: Prisma.DownloadCounterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounterPayload>
          }
          deleteMany: {
            args: Prisma.DownloadCounterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DownloadCounterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DownloadCounterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounterPayload>
          }
          aggregate: {
            args: Prisma.DownloadCounterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDownloadCounter>
          }
          groupBy: {
            args: Prisma.DownloadCounterGroupByArgs<ExtArgs>
            result: $Utils.Optional<DownloadCounterGroupByOutputType>[]
          }
          count: {
            args: Prisma.DownloadCounterCountArgs<ExtArgs>
            result: $Utils.Optional<DownloadCounterCountAggregateOutputType> | number
          }
        }
      }
      DownloadCounter30d: {
        payload: Prisma.$DownloadCounter30dPayload<ExtArgs>
        fields: Prisma.DownloadCounter30dFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DownloadCounter30dFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounter30dPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DownloadCounter30dFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounter30dPayload>
          }
          findFirst: {
            args: Prisma.DownloadCounter30dFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounter30dPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DownloadCounter30dFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounter30dPayload>
          }
          findMany: {
            args: Prisma.DownloadCounter30dFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounter30dPayload>[]
          }
          create: {
            args: Prisma.DownloadCounter30dCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounter30dPayload>
          }
          createMany: {
            args: Prisma.DownloadCounter30dCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DownloadCounter30dDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounter30dPayload>
          }
          update: {
            args: Prisma.DownloadCounter30dUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounter30dPayload>
          }
          deleteMany: {
            args: Prisma.DownloadCounter30dDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DownloadCounter30dUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DownloadCounter30dUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DownloadCounter30dPayload>
          }
          aggregate: {
            args: Prisma.DownloadCounter30dAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDownloadCounter30d>
          }
          groupBy: {
            args: Prisma.DownloadCounter30dGroupByArgs<ExtArgs>
            result: $Utils.Optional<DownloadCounter30dGroupByOutputType>[]
          }
          count: {
            args: Prisma.DownloadCounter30dCountArgs<ExtArgs>
            result: $Utils.Optional<DownloadCounter30dCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    children: number
    software: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | CategoryCountOutputTypeCountChildrenArgs
    software?: boolean | CategoryCountOutputTypeCountSoftwareArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountSoftwareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareCategoryWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    softwares: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    softwares?: boolean | TagCountOutputTypeCountSoftwaresArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountSoftwaresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareWhereInput
  }


  /**
   * Count Type VendorCountOutputType
   */

  export type VendorCountOutputType = {
    softwares: number
  }

  export type VendorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    softwares?: boolean | VendorCountOutputTypeCountSoftwaresArgs
  }

  // Custom InputTypes
  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     */
    select?: VendorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeCountSoftwaresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareWhereInput
  }


  /**
   * Count Type SoftwareCountOutputType
   */

  export type SoftwareCountOutputType = {
    categories: number
    versions: number
    media: number
    faqs: number
    requirements: number
    comments: number
    tags: number
    reviews: number
    logs: number
  }

  export type SoftwareCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | SoftwareCountOutputTypeCountCategoriesArgs
    versions?: boolean | SoftwareCountOutputTypeCountVersionsArgs
    media?: boolean | SoftwareCountOutputTypeCountMediaArgs
    faqs?: boolean | SoftwareCountOutputTypeCountFaqsArgs
    requirements?: boolean | SoftwareCountOutputTypeCountRequirementsArgs
    comments?: boolean | SoftwareCountOutputTypeCountCommentsArgs
    tags?: boolean | SoftwareCountOutputTypeCountTagsArgs
    reviews?: boolean | SoftwareCountOutputTypeCountReviewsArgs
    logs?: boolean | SoftwareCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCountOutputType
     */
    select?: SoftwareCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareCategoryWhereInput
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VersionWhereInput
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareMediaWhereInput
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountFaqsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FAQWhereInput
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountRequirementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemRequirementWhereInput
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * SoftwareCountOutputType without action
   */
  export type SoftwareCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DownloadLogWhereInput
  }


  /**
   * Count Type VersionCountOutputType
   */

  export type VersionCountOutputType = {
    builds: number
    logs: number
  }

  export type VersionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    builds?: boolean | VersionCountOutputTypeCountBuildsArgs
    logs?: boolean | VersionCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * VersionCountOutputType without action
   */
  export type VersionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VersionCountOutputType
     */
    select?: VersionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VersionCountOutputType without action
   */
  export type VersionCountOutputTypeCountBuildsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildWhereInput
  }

  /**
   * VersionCountOutputType without action
   */
  export type VersionCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DownloadLogWhereInput
  }


  /**
   * Count Type BuildCountOutputType
   */

  export type BuildCountOutputType = {
    mirrors: number
    logs: number
  }

  export type BuildCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mirrors?: boolean | BuildCountOutputTypeCountMirrorsArgs
    logs?: boolean | BuildCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * BuildCountOutputType without action
   */
  export type BuildCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuildCountOutputType
     */
    select?: BuildCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuildCountOutputType without action
   */
  export type BuildCountOutputTypeCountMirrorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MirrorWhereInput
  }

  /**
   * BuildCountOutputType without action
   */
  export type BuildCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DownloadLogWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    comments: number
    reviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    parentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    slug: string
    parentId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    software?: boolean | Category$softwareArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>


  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Category$parentArgs<ExtArgs>
    children?: boolean | Category$childrenArgs<ExtArgs>
    software?: boolean | Category$softwareArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      parent: Prisma.$CategoryPayload<ExtArgs> | null
      children: Prisma.$CategoryPayload<ExtArgs>[]
      software: Prisma.$SoftwareCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      parentId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Category$parentArgs<ExtArgs> = {}>(args?: Subset<T, Category$parentArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends Category$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Category$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    software<T extends Category$softwareArgs<ExtArgs> = {}>(args?: Subset<T, Category$softwareArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly slug: FieldRef<"Category", 'String'>
    readonly parentId: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.parent
   */
  export type Category$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Category.children
   */
  export type Category$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category.software
   */
  export type Category$softwareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    where?: SoftwareCategoryWhereInput
    orderBy?: SoftwareCategoryOrderByWithRelationInput | SoftwareCategoryOrderByWithRelationInput[]
    cursor?: SoftwareCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareCategoryScalarFieldEnum | SoftwareCategoryScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    createdAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    createdAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    createdAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    createdAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    createdAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    createdAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    slug: string
    createdAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    createdAt?: boolean
    softwares?: boolean | Tag$softwaresArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>


  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    createdAt?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    softwares?: boolean | Tag$softwaresArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      softwares: Prisma.$SoftwarePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      createdAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    softwares<T extends Tag$softwaresArgs<ExtArgs> = {}>(args?: Subset<T, Tag$softwaresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly slug: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.softwares
   */
  export type Tag$softwaresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    where?: SoftwareWhereInput
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    cursor?: SoftwareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model SoftwareCategory
   */

  export type AggregateSoftwareCategory = {
    _count: SoftwareCategoryCountAggregateOutputType | null
    _min: SoftwareCategoryMinAggregateOutputType | null
    _max: SoftwareCategoryMaxAggregateOutputType | null
  }

  export type SoftwareCategoryMinAggregateOutputType = {
    softwareId: string | null
    categoryId: string | null
  }

  export type SoftwareCategoryMaxAggregateOutputType = {
    softwareId: string | null
    categoryId: string | null
  }

  export type SoftwareCategoryCountAggregateOutputType = {
    softwareId: number
    categoryId: number
    _all: number
  }


  export type SoftwareCategoryMinAggregateInputType = {
    softwareId?: true
    categoryId?: true
  }

  export type SoftwareCategoryMaxAggregateInputType = {
    softwareId?: true
    categoryId?: true
  }

  export type SoftwareCategoryCountAggregateInputType = {
    softwareId?: true
    categoryId?: true
    _all?: true
  }

  export type SoftwareCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoftwareCategory to aggregate.
     */
    where?: SoftwareCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareCategories to fetch.
     */
    orderBy?: SoftwareCategoryOrderByWithRelationInput | SoftwareCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoftwareCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SoftwareCategories
    **/
    _count?: true | SoftwareCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoftwareCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoftwareCategoryMaxAggregateInputType
  }

  export type GetSoftwareCategoryAggregateType<T extends SoftwareCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSoftwareCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoftwareCategory[P]>
      : GetScalarType<T[P], AggregateSoftwareCategory[P]>
  }




  export type SoftwareCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareCategoryWhereInput
    orderBy?: SoftwareCategoryOrderByWithAggregationInput | SoftwareCategoryOrderByWithAggregationInput[]
    by: SoftwareCategoryScalarFieldEnum[] | SoftwareCategoryScalarFieldEnum
    having?: SoftwareCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoftwareCategoryCountAggregateInputType | true
    _min?: SoftwareCategoryMinAggregateInputType
    _max?: SoftwareCategoryMaxAggregateInputType
  }

  export type SoftwareCategoryGroupByOutputType = {
    softwareId: string
    categoryId: string
    _count: SoftwareCategoryCountAggregateOutputType | null
    _min: SoftwareCategoryMinAggregateOutputType | null
    _max: SoftwareCategoryMaxAggregateOutputType | null
  }

  type GetSoftwareCategoryGroupByPayload<T extends SoftwareCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoftwareCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoftwareCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoftwareCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], SoftwareCategoryGroupByOutputType[P]>
        }
      >
    >


  export type SoftwareCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    softwareId?: boolean
    categoryId?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["softwareCategory"]>


  export type SoftwareCategorySelectScalar = {
    softwareId?: boolean
    categoryId?: boolean
  }

  export type SoftwareCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $SoftwareCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SoftwareCategory"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      softwareId: string
      categoryId: string
    }, ExtArgs["result"]["softwareCategory"]>
    composites: {}
  }

  type SoftwareCategoryGetPayload<S extends boolean | null | undefined | SoftwareCategoryDefaultArgs> = $Result.GetResult<Prisma.$SoftwareCategoryPayload, S>

  type SoftwareCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SoftwareCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SoftwareCategoryCountAggregateInputType | true
    }

  export interface SoftwareCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SoftwareCategory'], meta: { name: 'SoftwareCategory' } }
    /**
     * Find zero or one SoftwareCategory that matches the filter.
     * @param {SoftwareCategoryFindUniqueArgs} args - Arguments to find a SoftwareCategory
     * @example
     * // Get one SoftwareCategory
     * const softwareCategory = await prisma.softwareCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoftwareCategoryFindUniqueArgs>(args: SelectSubset<T, SoftwareCategoryFindUniqueArgs<ExtArgs>>): Prisma__SoftwareCategoryClient<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SoftwareCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SoftwareCategoryFindUniqueOrThrowArgs} args - Arguments to find a SoftwareCategory
     * @example
     * // Get one SoftwareCategory
     * const softwareCategory = await prisma.softwareCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoftwareCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, SoftwareCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoftwareCategoryClient<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SoftwareCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareCategoryFindFirstArgs} args - Arguments to find a SoftwareCategory
     * @example
     * // Get one SoftwareCategory
     * const softwareCategory = await prisma.softwareCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoftwareCategoryFindFirstArgs>(args?: SelectSubset<T, SoftwareCategoryFindFirstArgs<ExtArgs>>): Prisma__SoftwareCategoryClient<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SoftwareCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareCategoryFindFirstOrThrowArgs} args - Arguments to find a SoftwareCategory
     * @example
     * // Get one SoftwareCategory
     * const softwareCategory = await prisma.softwareCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoftwareCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, SoftwareCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoftwareCategoryClient<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SoftwareCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SoftwareCategories
     * const softwareCategories = await prisma.softwareCategory.findMany()
     * 
     * // Get first 10 SoftwareCategories
     * const softwareCategories = await prisma.softwareCategory.findMany({ take: 10 })
     * 
     * // Only select the `softwareId`
     * const softwareCategoryWithSoftwareIdOnly = await prisma.softwareCategory.findMany({ select: { softwareId: true } })
     * 
     */
    findMany<T extends SoftwareCategoryFindManyArgs>(args?: SelectSubset<T, SoftwareCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SoftwareCategory.
     * @param {SoftwareCategoryCreateArgs} args - Arguments to create a SoftwareCategory.
     * @example
     * // Create one SoftwareCategory
     * const SoftwareCategory = await prisma.softwareCategory.create({
     *   data: {
     *     // ... data to create a SoftwareCategory
     *   }
     * })
     * 
     */
    create<T extends SoftwareCategoryCreateArgs>(args: SelectSubset<T, SoftwareCategoryCreateArgs<ExtArgs>>): Prisma__SoftwareCategoryClient<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SoftwareCategories.
     * @param {SoftwareCategoryCreateManyArgs} args - Arguments to create many SoftwareCategories.
     * @example
     * // Create many SoftwareCategories
     * const softwareCategory = await prisma.softwareCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoftwareCategoryCreateManyArgs>(args?: SelectSubset<T, SoftwareCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SoftwareCategory.
     * @param {SoftwareCategoryDeleteArgs} args - Arguments to delete one SoftwareCategory.
     * @example
     * // Delete one SoftwareCategory
     * const SoftwareCategory = await prisma.softwareCategory.delete({
     *   where: {
     *     // ... filter to delete one SoftwareCategory
     *   }
     * })
     * 
     */
    delete<T extends SoftwareCategoryDeleteArgs>(args: SelectSubset<T, SoftwareCategoryDeleteArgs<ExtArgs>>): Prisma__SoftwareCategoryClient<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SoftwareCategory.
     * @param {SoftwareCategoryUpdateArgs} args - Arguments to update one SoftwareCategory.
     * @example
     * // Update one SoftwareCategory
     * const softwareCategory = await prisma.softwareCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoftwareCategoryUpdateArgs>(args: SelectSubset<T, SoftwareCategoryUpdateArgs<ExtArgs>>): Prisma__SoftwareCategoryClient<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SoftwareCategories.
     * @param {SoftwareCategoryDeleteManyArgs} args - Arguments to filter SoftwareCategories to delete.
     * @example
     * // Delete a few SoftwareCategories
     * const { count } = await prisma.softwareCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoftwareCategoryDeleteManyArgs>(args?: SelectSubset<T, SoftwareCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SoftwareCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SoftwareCategories
     * const softwareCategory = await prisma.softwareCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoftwareCategoryUpdateManyArgs>(args: SelectSubset<T, SoftwareCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SoftwareCategory.
     * @param {SoftwareCategoryUpsertArgs} args - Arguments to update or create a SoftwareCategory.
     * @example
     * // Update or create a SoftwareCategory
     * const softwareCategory = await prisma.softwareCategory.upsert({
     *   create: {
     *     // ... data to create a SoftwareCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SoftwareCategory we want to update
     *   }
     * })
     */
    upsert<T extends SoftwareCategoryUpsertArgs>(args: SelectSubset<T, SoftwareCategoryUpsertArgs<ExtArgs>>): Prisma__SoftwareCategoryClient<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SoftwareCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareCategoryCountArgs} args - Arguments to filter SoftwareCategories to count.
     * @example
     * // Count the number of SoftwareCategories
     * const count = await prisma.softwareCategory.count({
     *   where: {
     *     // ... the filter for the SoftwareCategories we want to count
     *   }
     * })
    **/
    count<T extends SoftwareCategoryCountArgs>(
      args?: Subset<T, SoftwareCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoftwareCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SoftwareCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoftwareCategoryAggregateArgs>(args: Subset<T, SoftwareCategoryAggregateArgs>): Prisma.PrismaPromise<GetSoftwareCategoryAggregateType<T>>

    /**
     * Group by SoftwareCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoftwareCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoftwareCategoryGroupByArgs['orderBy'] }
        : { orderBy?: SoftwareCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoftwareCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoftwareCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SoftwareCategory model
   */
  readonly fields: SoftwareCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SoftwareCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoftwareCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SoftwareCategory model
   */ 
  interface SoftwareCategoryFieldRefs {
    readonly softwareId: FieldRef<"SoftwareCategory", 'String'>
    readonly categoryId: FieldRef<"SoftwareCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SoftwareCategory findUnique
   */
  export type SoftwareCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareCategory to fetch.
     */
    where: SoftwareCategoryWhereUniqueInput
  }

  /**
   * SoftwareCategory findUniqueOrThrow
   */
  export type SoftwareCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareCategory to fetch.
     */
    where: SoftwareCategoryWhereUniqueInput
  }

  /**
   * SoftwareCategory findFirst
   */
  export type SoftwareCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareCategory to fetch.
     */
    where?: SoftwareCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareCategories to fetch.
     */
    orderBy?: SoftwareCategoryOrderByWithRelationInput | SoftwareCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoftwareCategories.
     */
    cursor?: SoftwareCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoftwareCategories.
     */
    distinct?: SoftwareCategoryScalarFieldEnum | SoftwareCategoryScalarFieldEnum[]
  }

  /**
   * SoftwareCategory findFirstOrThrow
   */
  export type SoftwareCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareCategory to fetch.
     */
    where?: SoftwareCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareCategories to fetch.
     */
    orderBy?: SoftwareCategoryOrderByWithRelationInput | SoftwareCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoftwareCategories.
     */
    cursor?: SoftwareCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoftwareCategories.
     */
    distinct?: SoftwareCategoryScalarFieldEnum | SoftwareCategoryScalarFieldEnum[]
  }

  /**
   * SoftwareCategory findMany
   */
  export type SoftwareCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareCategories to fetch.
     */
    where?: SoftwareCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareCategories to fetch.
     */
    orderBy?: SoftwareCategoryOrderByWithRelationInput | SoftwareCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SoftwareCategories.
     */
    cursor?: SoftwareCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareCategories.
     */
    skip?: number
    distinct?: SoftwareCategoryScalarFieldEnum | SoftwareCategoryScalarFieldEnum[]
  }

  /**
   * SoftwareCategory create
   */
  export type SoftwareCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a SoftwareCategory.
     */
    data: XOR<SoftwareCategoryCreateInput, SoftwareCategoryUncheckedCreateInput>
  }

  /**
   * SoftwareCategory createMany
   */
  export type SoftwareCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SoftwareCategories.
     */
    data: SoftwareCategoryCreateManyInput | SoftwareCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SoftwareCategory update
   */
  export type SoftwareCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a SoftwareCategory.
     */
    data: XOR<SoftwareCategoryUpdateInput, SoftwareCategoryUncheckedUpdateInput>
    /**
     * Choose, which SoftwareCategory to update.
     */
    where: SoftwareCategoryWhereUniqueInput
  }

  /**
   * SoftwareCategory updateMany
   */
  export type SoftwareCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SoftwareCategories.
     */
    data: XOR<SoftwareCategoryUpdateManyMutationInput, SoftwareCategoryUncheckedUpdateManyInput>
    /**
     * Filter which SoftwareCategories to update
     */
    where?: SoftwareCategoryWhereInput
  }

  /**
   * SoftwareCategory upsert
   */
  export type SoftwareCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the SoftwareCategory to update in case it exists.
     */
    where: SoftwareCategoryWhereUniqueInput
    /**
     * In case the SoftwareCategory found by the `where` argument doesn't exist, create a new SoftwareCategory with this data.
     */
    create: XOR<SoftwareCategoryCreateInput, SoftwareCategoryUncheckedCreateInput>
    /**
     * In case the SoftwareCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoftwareCategoryUpdateInput, SoftwareCategoryUncheckedUpdateInput>
  }

  /**
   * SoftwareCategory delete
   */
  export type SoftwareCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    /**
     * Filter which SoftwareCategory to delete.
     */
    where: SoftwareCategoryWhereUniqueInput
  }

  /**
   * SoftwareCategory deleteMany
   */
  export type SoftwareCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoftwareCategories to delete
     */
    where?: SoftwareCategoryWhereInput
  }

  /**
   * SoftwareCategory without action
   */
  export type SoftwareCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Vendor
   */

  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    website: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VendorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    website: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    website: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VendorMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    website?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    website?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    website?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendor to aggregate.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
    orderBy?: VendorOrderByWithAggregationInput | VendorOrderByWithAggregationInput[]
    by: VendorScalarFieldEnum[] | VendorScalarFieldEnum
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }

  export type VendorGroupByOutputType = {
    id: string
    name: string
    slug: string
    website: string | null
    createdAt: Date
    updatedAt: Date
    _count: VendorCountAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    softwares?: boolean | Vendor$softwaresArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>


  export type VendorSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    softwares?: boolean | Vendor$softwaresArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendor"
    objects: {
      softwares: Prisma.$SoftwarePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      website: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["vendor"]>
    composites: {}
  }

  type VendorGetPayload<S extends boolean | null | undefined | VendorDefaultArgs> = $Result.GetResult<Prisma.$VendorPayload, S>

  type VendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VendorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VendorCountAggregateInputType | true
    }

  export interface VendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendor'], meta: { name: 'Vendor' } }
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendorFindUniqueArgs>(args: SelectSubset<T, VendorFindUniqueArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vendor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(args: SelectSubset<T, VendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendorFindFirstArgs>(args?: SelectSubset<T, VendorFindFirstArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(args?: SelectSubset<T, VendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendorFindManyArgs>(args?: SelectSubset<T, VendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
     */
    create<T extends VendorCreateArgs>(args: SelectSubset<T, VendorCreateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vendors.
     * @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     * @example
     * // Create many Vendors
     * const vendor = await prisma.vendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendorCreateManyArgs>(args?: SelectSubset<T, VendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
     */
    delete<T extends VendorDeleteArgs>(args: SelectSubset<T, VendorDeleteArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendorUpdateArgs>(args: SelectSubset<T, VendorUpdateArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendorDeleteManyArgs>(args?: SelectSubset<T, VendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendorUpdateManyArgs>(args: SelectSubset<T, VendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
     */
    upsert<T extends VendorUpsertArgs>(args: SelectSubset<T, VendorUpsertArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): Prisma.PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendor model
   */
  readonly fields: VendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    softwares<T extends Vendor$softwaresArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$softwaresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendor model
   */ 
  interface VendorFieldRefs {
    readonly id: FieldRef<"Vendor", 'String'>
    readonly name: FieldRef<"Vendor", 'String'>
    readonly slug: FieldRef<"Vendor", 'String'>
    readonly website: FieldRef<"Vendor", 'String'>
    readonly createdAt: FieldRef<"Vendor", 'DateTime'>
    readonly updatedAt: FieldRef<"Vendor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vendor findUnique
   */
  export type VendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findFirst
   */
  export type VendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendors to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: VendorOrderByWithRelationInput | VendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    distinct?: VendorScalarFieldEnum | VendorScalarFieldEnum[]
  }

  /**
   * Vendor create
   */
  export type VendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendor.
     */
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }

  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendors.
     */
    data: VendorCreateManyInput | VendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendor update
   */
  export type VendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendor.
     */
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
  }

  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     */
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     */
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }

  /**
   * Vendor delete
   */
  export type VendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter which Vendor to delete.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendors to delete
     */
    where?: VendorWhereInput
  }

  /**
   * Vendor.softwares
   */
  export type Vendor$softwaresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    where?: SoftwareWhereInput
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    cursor?: SoftwareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Vendor without action
   */
  export type VendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
  }


  /**
   * Model Software
   */

  export type AggregateSoftware = {
    _count: SoftwareCountAggregateOutputType | null
    _avg: SoftwareAvgAggregateOutputType | null
    _sum: SoftwareSumAggregateOutputType | null
    _min: SoftwareMinAggregateOutputType | null
    _max: SoftwareMaxAggregateOutputType | null
  }

  export type SoftwareAvgAggregateOutputType = {
    ratingsAvg: number | null
    ratingsCount: number | null
  }

  export type SoftwareSumAggregateOutputType = {
    ratingsAvg: number | null
    ratingsCount: number | null
  }

  export type SoftwareMinAggregateOutputType = {
    id: string | null
    slug: string | null
    name: string | null
    license: string | null
    homepage: string | null
    shortDesc: string | null
    longDesc: string | null
    iconUrl: string | null
    heroUrl: string | null
    ratingsAvg: number | null
    ratingsCount: number | null
    isLatest: boolean | null
    isUpdated: boolean | null
    isRecommended: boolean | null
    isNew: boolean | null
    lastUpdatedAt: Date | null
    publishedAt: Date | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    vendorId: string | null
  }

  export type SoftwareMaxAggregateOutputType = {
    id: string | null
    slug: string | null
    name: string | null
    license: string | null
    homepage: string | null
    shortDesc: string | null
    longDesc: string | null
    iconUrl: string | null
    heroUrl: string | null
    ratingsAvg: number | null
    ratingsCount: number | null
    isLatest: boolean | null
    isUpdated: boolean | null
    isRecommended: boolean | null
    isNew: boolean | null
    lastUpdatedAt: Date | null
    publishedAt: Date | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    vendorId: string | null
  }

  export type SoftwareCountAggregateOutputType = {
    id: number
    slug: number
    name: number
    license: number
    homepage: number
    shortDesc: number
    longDesc: number
    os: number
    iconUrl: number
    heroUrl: number
    ratingsAvg: number
    ratingsCount: number
    isLatest: number
    isUpdated: number
    isRecommended: number
    isNew: number
    lastUpdatedAt: number
    publishedAt: number
    status: number
    createdAt: number
    updatedAt: number
    vendorId: number
    _all: number
  }


  export type SoftwareAvgAggregateInputType = {
    ratingsAvg?: true
    ratingsCount?: true
  }

  export type SoftwareSumAggregateInputType = {
    ratingsAvg?: true
    ratingsCount?: true
  }

  export type SoftwareMinAggregateInputType = {
    id?: true
    slug?: true
    name?: true
    license?: true
    homepage?: true
    shortDesc?: true
    longDesc?: true
    iconUrl?: true
    heroUrl?: true
    ratingsAvg?: true
    ratingsCount?: true
    isLatest?: true
    isUpdated?: true
    isRecommended?: true
    isNew?: true
    lastUpdatedAt?: true
    publishedAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    vendorId?: true
  }

  export type SoftwareMaxAggregateInputType = {
    id?: true
    slug?: true
    name?: true
    license?: true
    homepage?: true
    shortDesc?: true
    longDesc?: true
    iconUrl?: true
    heroUrl?: true
    ratingsAvg?: true
    ratingsCount?: true
    isLatest?: true
    isUpdated?: true
    isRecommended?: true
    isNew?: true
    lastUpdatedAt?: true
    publishedAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    vendorId?: true
  }

  export type SoftwareCountAggregateInputType = {
    id?: true
    slug?: true
    name?: true
    license?: true
    homepage?: true
    shortDesc?: true
    longDesc?: true
    os?: true
    iconUrl?: true
    heroUrl?: true
    ratingsAvg?: true
    ratingsCount?: true
    isLatest?: true
    isUpdated?: true
    isRecommended?: true
    isNew?: true
    lastUpdatedAt?: true
    publishedAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    vendorId?: true
    _all?: true
  }

  export type SoftwareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Software to aggregate.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Software
    **/
    _count?: true | SoftwareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SoftwareAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SoftwareSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoftwareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoftwareMaxAggregateInputType
  }

  export type GetSoftwareAggregateType<T extends SoftwareAggregateArgs> = {
        [P in keyof T & keyof AggregateSoftware]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoftware[P]>
      : GetScalarType<T[P], AggregateSoftware[P]>
  }




  export type SoftwareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareWhereInput
    orderBy?: SoftwareOrderByWithAggregationInput | SoftwareOrderByWithAggregationInput[]
    by: SoftwareScalarFieldEnum[] | SoftwareScalarFieldEnum
    having?: SoftwareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoftwareCountAggregateInputType | true
    _avg?: SoftwareAvgAggregateInputType
    _sum?: SoftwareSumAggregateInputType
    _min?: SoftwareMinAggregateInputType
    _max?: SoftwareMaxAggregateInputType
  }

  export type SoftwareGroupByOutputType = {
    id: string
    slug: string
    name: string
    license: string | null
    homepage: string | null
    shortDesc: string | null
    longDesc: string | null
    os: JsonValue | null
    iconUrl: string | null
    heroUrl: string | null
    ratingsAvg: number
    ratingsCount: number
    isLatest: boolean
    isUpdated: boolean
    isRecommended: boolean
    isNew: boolean
    lastUpdatedAt: Date
    publishedAt: Date | null
    status: string
    createdAt: Date
    updatedAt: Date
    vendorId: string | null
    _count: SoftwareCountAggregateOutputType | null
    _avg: SoftwareAvgAggregateOutputType | null
    _sum: SoftwareSumAggregateOutputType | null
    _min: SoftwareMinAggregateOutputType | null
    _max: SoftwareMaxAggregateOutputType | null
  }

  type GetSoftwareGroupByPayload<T extends SoftwareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoftwareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoftwareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoftwareGroupByOutputType[P]>
            : GetScalarType<T[P], SoftwareGroupByOutputType[P]>
        }
      >
    >


  export type SoftwareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    name?: boolean
    license?: boolean
    homepage?: boolean
    shortDesc?: boolean
    longDesc?: boolean
    os?: boolean
    iconUrl?: boolean
    heroUrl?: boolean
    ratingsAvg?: boolean
    ratingsCount?: boolean
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: boolean
    publishedAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendorId?: boolean
    vendor?: boolean | Software$vendorArgs<ExtArgs>
    categories?: boolean | Software$categoriesArgs<ExtArgs>
    versions?: boolean | Software$versionsArgs<ExtArgs>
    media?: boolean | Software$mediaArgs<ExtArgs>
    faqs?: boolean | Software$faqsArgs<ExtArgs>
    requirements?: boolean | Software$requirementsArgs<ExtArgs>
    comments?: boolean | Software$commentsArgs<ExtArgs>
    tags?: boolean | Software$tagsArgs<ExtArgs>
    reviews?: boolean | Software$reviewsArgs<ExtArgs>
    logs?: boolean | Software$logsArgs<ExtArgs>
    counter?: boolean | Software$counterArgs<ExtArgs>
    counter30d?: boolean | Software$counter30dArgs<ExtArgs>
    _count?: boolean | SoftwareCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["software"]>


  export type SoftwareSelectScalar = {
    id?: boolean
    slug?: boolean
    name?: boolean
    license?: boolean
    homepage?: boolean
    shortDesc?: boolean
    longDesc?: boolean
    os?: boolean
    iconUrl?: boolean
    heroUrl?: boolean
    ratingsAvg?: boolean
    ratingsCount?: boolean
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: boolean
    publishedAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendorId?: boolean
  }

  export type SoftwareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | Software$vendorArgs<ExtArgs>
    categories?: boolean | Software$categoriesArgs<ExtArgs>
    versions?: boolean | Software$versionsArgs<ExtArgs>
    media?: boolean | Software$mediaArgs<ExtArgs>
    faqs?: boolean | Software$faqsArgs<ExtArgs>
    requirements?: boolean | Software$requirementsArgs<ExtArgs>
    comments?: boolean | Software$commentsArgs<ExtArgs>
    tags?: boolean | Software$tagsArgs<ExtArgs>
    reviews?: boolean | Software$reviewsArgs<ExtArgs>
    logs?: boolean | Software$logsArgs<ExtArgs>
    counter?: boolean | Software$counterArgs<ExtArgs>
    counter30d?: boolean | Software$counter30dArgs<ExtArgs>
    _count?: boolean | SoftwareCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SoftwarePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Software"
    objects: {
      vendor: Prisma.$VendorPayload<ExtArgs> | null
      categories: Prisma.$SoftwareCategoryPayload<ExtArgs>[]
      versions: Prisma.$VersionPayload<ExtArgs>[]
      media: Prisma.$SoftwareMediaPayload<ExtArgs>[]
      faqs: Prisma.$FAQPayload<ExtArgs>[]
      requirements: Prisma.$SystemRequirementPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      tags: Prisma.$TagPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      logs: Prisma.$DownloadLogPayload<ExtArgs>[]
      counter: Prisma.$DownloadCounterPayload<ExtArgs> | null
      counter30d: Prisma.$DownloadCounter30dPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      slug: string
      name: string
      license: string | null
      homepage: string | null
      shortDesc: string | null
      longDesc: string | null
      os: Prisma.JsonValue | null
      iconUrl: string | null
      heroUrl: string | null
      ratingsAvg: number
      ratingsCount: number
      isLatest: boolean
      isUpdated: boolean
      isRecommended: boolean
      isNew: boolean
      lastUpdatedAt: Date
      publishedAt: Date | null
      status: string
      createdAt: Date
      updatedAt: Date
      vendorId: string | null
    }, ExtArgs["result"]["software"]>
    composites: {}
  }

  type SoftwareGetPayload<S extends boolean | null | undefined | SoftwareDefaultArgs> = $Result.GetResult<Prisma.$SoftwarePayload, S>

  type SoftwareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SoftwareFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SoftwareCountAggregateInputType | true
    }

  export interface SoftwareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Software'], meta: { name: 'Software' } }
    /**
     * Find zero or one Software that matches the filter.
     * @param {SoftwareFindUniqueArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoftwareFindUniqueArgs>(args: SelectSubset<T, SoftwareFindUniqueArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Software that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SoftwareFindUniqueOrThrowArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoftwareFindUniqueOrThrowArgs>(args: SelectSubset<T, SoftwareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Software that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareFindFirstArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoftwareFindFirstArgs>(args?: SelectSubset<T, SoftwareFindFirstArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Software that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareFindFirstOrThrowArgs} args - Arguments to find a Software
     * @example
     * // Get one Software
     * const software = await prisma.software.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoftwareFindFirstOrThrowArgs>(args?: SelectSubset<T, SoftwareFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Software that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Software
     * const software = await prisma.software.findMany()
     * 
     * // Get first 10 Software
     * const software = await prisma.software.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const softwareWithIdOnly = await prisma.software.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SoftwareFindManyArgs>(args?: SelectSubset<T, SoftwareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Software.
     * @param {SoftwareCreateArgs} args - Arguments to create a Software.
     * @example
     * // Create one Software
     * const Software = await prisma.software.create({
     *   data: {
     *     // ... data to create a Software
     *   }
     * })
     * 
     */
    create<T extends SoftwareCreateArgs>(args: SelectSubset<T, SoftwareCreateArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Software.
     * @param {SoftwareCreateManyArgs} args - Arguments to create many Software.
     * @example
     * // Create many Software
     * const software = await prisma.software.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoftwareCreateManyArgs>(args?: SelectSubset<T, SoftwareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Software.
     * @param {SoftwareDeleteArgs} args - Arguments to delete one Software.
     * @example
     * // Delete one Software
     * const Software = await prisma.software.delete({
     *   where: {
     *     // ... filter to delete one Software
     *   }
     * })
     * 
     */
    delete<T extends SoftwareDeleteArgs>(args: SelectSubset<T, SoftwareDeleteArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Software.
     * @param {SoftwareUpdateArgs} args - Arguments to update one Software.
     * @example
     * // Update one Software
     * const software = await prisma.software.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoftwareUpdateArgs>(args: SelectSubset<T, SoftwareUpdateArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Software.
     * @param {SoftwareDeleteManyArgs} args - Arguments to filter Software to delete.
     * @example
     * // Delete a few Software
     * const { count } = await prisma.software.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoftwareDeleteManyArgs>(args?: SelectSubset<T, SoftwareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Software
     * const software = await prisma.software.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoftwareUpdateManyArgs>(args: SelectSubset<T, SoftwareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Software.
     * @param {SoftwareUpsertArgs} args - Arguments to update or create a Software.
     * @example
     * // Update or create a Software
     * const software = await prisma.software.upsert({
     *   create: {
     *     // ... data to create a Software
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Software we want to update
     *   }
     * })
     */
    upsert<T extends SoftwareUpsertArgs>(args: SelectSubset<T, SoftwareUpsertArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareCountArgs} args - Arguments to filter Software to count.
     * @example
     * // Count the number of Software
     * const count = await prisma.software.count({
     *   where: {
     *     // ... the filter for the Software we want to count
     *   }
     * })
    **/
    count<T extends SoftwareCountArgs>(
      args?: Subset<T, SoftwareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoftwareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoftwareAggregateArgs>(args: Subset<T, SoftwareAggregateArgs>): Prisma.PrismaPromise<GetSoftwareAggregateType<T>>

    /**
     * Group by Software.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoftwareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoftwareGroupByArgs['orderBy'] }
        : { orderBy?: SoftwareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoftwareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoftwareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Software model
   */
  readonly fields: SoftwareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Software.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoftwareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendor<T extends Software$vendorArgs<ExtArgs> = {}>(args?: Subset<T, Software$vendorArgs<ExtArgs>>): Prisma__VendorClient<$Result.GetResult<Prisma.$VendorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    categories<T extends Software$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Software$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwareCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    versions<T extends Software$versionsArgs<ExtArgs> = {}>(args?: Subset<T, Software$versionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findMany"> | Null>
    media<T extends Software$mediaArgs<ExtArgs> = {}>(args?: Subset<T, Software$mediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwareMediaPayload<ExtArgs>, T, "findMany"> | Null>
    faqs<T extends Software$faqsArgs<ExtArgs> = {}>(args?: Subset<T, Software$faqsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findMany"> | Null>
    requirements<T extends Software$requirementsArgs<ExtArgs> = {}>(args?: Subset<T, Software$requirementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemRequirementPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends Software$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Software$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    tags<T extends Software$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Software$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends Software$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Software$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    logs<T extends Software$logsArgs<ExtArgs> = {}>(args?: Subset<T, Software$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "findMany"> | Null>
    counter<T extends Software$counterArgs<ExtArgs> = {}>(args?: Subset<T, Software$counterArgs<ExtArgs>>): Prisma__DownloadCounterClient<$Result.GetResult<Prisma.$DownloadCounterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    counter30d<T extends Software$counter30dArgs<ExtArgs> = {}>(args?: Subset<T, Software$counter30dArgs<ExtArgs>>): Prisma__DownloadCounter30dClient<$Result.GetResult<Prisma.$DownloadCounter30dPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Software model
   */ 
  interface SoftwareFieldRefs {
    readonly id: FieldRef<"Software", 'String'>
    readonly slug: FieldRef<"Software", 'String'>
    readonly name: FieldRef<"Software", 'String'>
    readonly license: FieldRef<"Software", 'String'>
    readonly homepage: FieldRef<"Software", 'String'>
    readonly shortDesc: FieldRef<"Software", 'String'>
    readonly longDesc: FieldRef<"Software", 'String'>
    readonly os: FieldRef<"Software", 'Json'>
    readonly iconUrl: FieldRef<"Software", 'String'>
    readonly heroUrl: FieldRef<"Software", 'String'>
    readonly ratingsAvg: FieldRef<"Software", 'Float'>
    readonly ratingsCount: FieldRef<"Software", 'Int'>
    readonly isLatest: FieldRef<"Software", 'Boolean'>
    readonly isUpdated: FieldRef<"Software", 'Boolean'>
    readonly isRecommended: FieldRef<"Software", 'Boolean'>
    readonly isNew: FieldRef<"Software", 'Boolean'>
    readonly lastUpdatedAt: FieldRef<"Software", 'DateTime'>
    readonly publishedAt: FieldRef<"Software", 'DateTime'>
    readonly status: FieldRef<"Software", 'String'>
    readonly createdAt: FieldRef<"Software", 'DateTime'>
    readonly updatedAt: FieldRef<"Software", 'DateTime'>
    readonly vendorId: FieldRef<"Software", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Software findUnique
   */
  export type SoftwareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software findUniqueOrThrow
   */
  export type SoftwareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software findFirst
   */
  export type SoftwareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Software.
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Software.
     */
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Software findFirstOrThrow
   */
  export type SoftwareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Software.
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Software.
     */
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Software findMany
   */
  export type SoftwareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter, which Software to fetch.
     */
    where?: SoftwareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Software to fetch.
     */
    orderBy?: SoftwareOrderByWithRelationInput | SoftwareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Software.
     */
    cursor?: SoftwareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Software from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Software.
     */
    skip?: number
    distinct?: SoftwareScalarFieldEnum | SoftwareScalarFieldEnum[]
  }

  /**
   * Software create
   */
  export type SoftwareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * The data needed to create a Software.
     */
    data: XOR<SoftwareCreateInput, SoftwareUncheckedCreateInput>
  }

  /**
   * Software createMany
   */
  export type SoftwareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Software.
     */
    data: SoftwareCreateManyInput | SoftwareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Software update
   */
  export type SoftwareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * The data needed to update a Software.
     */
    data: XOR<SoftwareUpdateInput, SoftwareUncheckedUpdateInput>
    /**
     * Choose, which Software to update.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software updateMany
   */
  export type SoftwareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Software.
     */
    data: XOR<SoftwareUpdateManyMutationInput, SoftwareUncheckedUpdateManyInput>
    /**
     * Filter which Software to update
     */
    where?: SoftwareWhereInput
  }

  /**
   * Software upsert
   */
  export type SoftwareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * The filter to search for the Software to update in case it exists.
     */
    where: SoftwareWhereUniqueInput
    /**
     * In case the Software found by the `where` argument doesn't exist, create a new Software with this data.
     */
    create: XOR<SoftwareCreateInput, SoftwareUncheckedCreateInput>
    /**
     * In case the Software was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoftwareUpdateInput, SoftwareUncheckedUpdateInput>
  }

  /**
   * Software delete
   */
  export type SoftwareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
    /**
     * Filter which Software to delete.
     */
    where: SoftwareWhereUniqueInput
  }

  /**
   * Software deleteMany
   */
  export type SoftwareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Software to delete
     */
    where?: SoftwareWhereInput
  }

  /**
   * Software.vendor
   */
  export type Software$vendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendorInclude<ExtArgs> | null
    where?: VendorWhereInput
  }

  /**
   * Software.categories
   */
  export type Software$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareCategory
     */
    select?: SoftwareCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareCategoryInclude<ExtArgs> | null
    where?: SoftwareCategoryWhereInput
    orderBy?: SoftwareCategoryOrderByWithRelationInput | SoftwareCategoryOrderByWithRelationInput[]
    cursor?: SoftwareCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareCategoryScalarFieldEnum | SoftwareCategoryScalarFieldEnum[]
  }

  /**
   * Software.versions
   */
  export type Software$versionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    where?: VersionWhereInput
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    cursor?: VersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VersionScalarFieldEnum | VersionScalarFieldEnum[]
  }

  /**
   * Software.media
   */
  export type Software$mediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
    where?: SoftwareMediaWhereInput
    orderBy?: SoftwareMediaOrderByWithRelationInput | SoftwareMediaOrderByWithRelationInput[]
    cursor?: SoftwareMediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoftwareMediaScalarFieldEnum | SoftwareMediaScalarFieldEnum[]
  }

  /**
   * Software.faqs
   */
  export type Software$faqsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
    where?: FAQWhereInput
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    cursor?: FAQWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * Software.requirements
   */
  export type Software$requirementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
    where?: SystemRequirementWhereInput
    orderBy?: SystemRequirementOrderByWithRelationInput | SystemRequirementOrderByWithRelationInput[]
    cursor?: SystemRequirementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SystemRequirementScalarFieldEnum | SystemRequirementScalarFieldEnum[]
  }

  /**
   * Software.comments
   */
  export type Software$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Software.tags
   */
  export type Software$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Software.reviews
   */
  export type Software$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Software.logs
   */
  export type Software$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    where?: DownloadLogWhereInput
    orderBy?: DownloadLogOrderByWithRelationInput | DownloadLogOrderByWithRelationInput[]
    cursor?: DownloadLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DownloadLogScalarFieldEnum | DownloadLogScalarFieldEnum[]
  }

  /**
   * Software.counter
   */
  export type Software$counterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
    where?: DownloadCounterWhereInput
  }

  /**
   * Software.counter30d
   */
  export type Software$counter30dArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
    where?: DownloadCounter30dWhereInput
  }

  /**
   * Software without action
   */
  export type SoftwareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Software
     */
    select?: SoftwareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareInclude<ExtArgs> | null
  }


  /**
   * Model Version
   */

  export type AggregateVersion = {
    _count: VersionCountAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  export type VersionMinAggregateOutputType = {
    id: string | null
    softwareId: string | null
    version: string | null
    osLabel: string | null
    license: string | null
    changelog: string | null
    releasedAt: Date | null
    createdAt: Date | null
  }

  export type VersionMaxAggregateOutputType = {
    id: string | null
    softwareId: string | null
    version: string | null
    osLabel: string | null
    license: string | null
    changelog: string | null
    releasedAt: Date | null
    createdAt: Date | null
  }

  export type VersionCountAggregateOutputType = {
    id: number
    softwareId: number
    version: number
    osLabel: number
    license: number
    changelog: number
    releasedAt: number
    createdAt: number
    _all: number
  }


  export type VersionMinAggregateInputType = {
    id?: true
    softwareId?: true
    version?: true
    osLabel?: true
    license?: true
    changelog?: true
    releasedAt?: true
    createdAt?: true
  }

  export type VersionMaxAggregateInputType = {
    id?: true
    softwareId?: true
    version?: true
    osLabel?: true
    license?: true
    changelog?: true
    releasedAt?: true
    createdAt?: true
  }

  export type VersionCountAggregateInputType = {
    id?: true
    softwareId?: true
    version?: true
    osLabel?: true
    license?: true
    changelog?: true
    releasedAt?: true
    createdAt?: true
    _all?: true
  }

  export type VersionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Version to aggregate.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Versions
    **/
    _count?: true | VersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VersionMaxAggregateInputType
  }

  export type GetVersionAggregateType<T extends VersionAggregateArgs> = {
        [P in keyof T & keyof AggregateVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVersion[P]>
      : GetScalarType<T[P], AggregateVersion[P]>
  }




  export type VersionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VersionWhereInput
    orderBy?: VersionOrderByWithAggregationInput | VersionOrderByWithAggregationInput[]
    by: VersionScalarFieldEnum[] | VersionScalarFieldEnum
    having?: VersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VersionCountAggregateInputType | true
    _min?: VersionMinAggregateInputType
    _max?: VersionMaxAggregateInputType
  }

  export type VersionGroupByOutputType = {
    id: string
    softwareId: string
    version: string
    osLabel: string | null
    license: string | null
    changelog: string | null
    releasedAt: Date | null
    createdAt: Date
    _count: VersionCountAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  type GetVersionGroupByPayload<T extends VersionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VersionGroupByOutputType[P]>
            : GetScalarType<T[P], VersionGroupByOutputType[P]>
        }
      >
    >


  export type VersionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    softwareId?: boolean
    version?: boolean
    osLabel?: boolean
    license?: boolean
    changelog?: boolean
    releasedAt?: boolean
    createdAt?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    builds?: boolean | Version$buildsArgs<ExtArgs>
    logs?: boolean | Version$logsArgs<ExtArgs>
    _count?: boolean | VersionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["version"]>


  export type VersionSelectScalar = {
    id?: boolean
    softwareId?: boolean
    version?: boolean
    osLabel?: boolean
    license?: boolean
    changelog?: boolean
    releasedAt?: boolean
    createdAt?: boolean
  }

  export type VersionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    builds?: boolean | Version$buildsArgs<ExtArgs>
    logs?: boolean | Version$logsArgs<ExtArgs>
    _count?: boolean | VersionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VersionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Version"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
      builds: Prisma.$BuildPayload<ExtArgs>[]
      logs: Prisma.$DownloadLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      softwareId: string
      version: string
      osLabel: string | null
      license: string | null
      changelog: string | null
      releasedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["version"]>
    composites: {}
  }

  type VersionGetPayload<S extends boolean | null | undefined | VersionDefaultArgs> = $Result.GetResult<Prisma.$VersionPayload, S>

  type VersionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VersionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VersionCountAggregateInputType | true
    }

  export interface VersionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Version'], meta: { name: 'Version' } }
    /**
     * Find zero or one Version that matches the filter.
     * @param {VersionFindUniqueArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VersionFindUniqueArgs>(args: SelectSubset<T, VersionFindUniqueArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Version that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VersionFindUniqueOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VersionFindUniqueOrThrowArgs>(args: SelectSubset<T, VersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Version that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VersionFindFirstArgs>(args?: SelectSubset<T, VersionFindFirstArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Version that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VersionFindFirstOrThrowArgs>(args?: SelectSubset<T, VersionFindFirstOrThrowArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Versions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Versions
     * const versions = await prisma.version.findMany()
     * 
     * // Get first 10 Versions
     * const versions = await prisma.version.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const versionWithIdOnly = await prisma.version.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VersionFindManyArgs>(args?: SelectSubset<T, VersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Version.
     * @param {VersionCreateArgs} args - Arguments to create a Version.
     * @example
     * // Create one Version
     * const Version = await prisma.version.create({
     *   data: {
     *     // ... data to create a Version
     *   }
     * })
     * 
     */
    create<T extends VersionCreateArgs>(args: SelectSubset<T, VersionCreateArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Versions.
     * @param {VersionCreateManyArgs} args - Arguments to create many Versions.
     * @example
     * // Create many Versions
     * const version = await prisma.version.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VersionCreateManyArgs>(args?: SelectSubset<T, VersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Version.
     * @param {VersionDeleteArgs} args - Arguments to delete one Version.
     * @example
     * // Delete one Version
     * const Version = await prisma.version.delete({
     *   where: {
     *     // ... filter to delete one Version
     *   }
     * })
     * 
     */
    delete<T extends VersionDeleteArgs>(args: SelectSubset<T, VersionDeleteArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Version.
     * @param {VersionUpdateArgs} args - Arguments to update one Version.
     * @example
     * // Update one Version
     * const version = await prisma.version.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VersionUpdateArgs>(args: SelectSubset<T, VersionUpdateArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Versions.
     * @param {VersionDeleteManyArgs} args - Arguments to filter Versions to delete.
     * @example
     * // Delete a few Versions
     * const { count } = await prisma.version.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VersionDeleteManyArgs>(args?: SelectSubset<T, VersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Versions
     * const version = await prisma.version.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VersionUpdateManyArgs>(args: SelectSubset<T, VersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Version.
     * @param {VersionUpsertArgs} args - Arguments to update or create a Version.
     * @example
     * // Update or create a Version
     * const version = await prisma.version.upsert({
     *   create: {
     *     // ... data to create a Version
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Version we want to update
     *   }
     * })
     */
    upsert<T extends VersionUpsertArgs>(args: SelectSubset<T, VersionUpsertArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionCountArgs} args - Arguments to filter Versions to count.
     * @example
     * // Count the number of Versions
     * const count = await prisma.version.count({
     *   where: {
     *     // ... the filter for the Versions we want to count
     *   }
     * })
    **/
    count<T extends VersionCountArgs>(
      args?: Subset<T, VersionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VersionAggregateArgs>(args: Subset<T, VersionAggregateArgs>): Prisma.PrismaPromise<GetVersionAggregateType<T>>

    /**
     * Group by Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VersionGroupByArgs['orderBy'] }
        : { orderBy?: VersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Version model
   */
  readonly fields: VersionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Version.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VersionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    builds<T extends Version$buildsArgs<ExtArgs> = {}>(args?: Subset<T, Version$buildsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findMany"> | Null>
    logs<T extends Version$logsArgs<ExtArgs> = {}>(args?: Subset<T, Version$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Version model
   */ 
  interface VersionFieldRefs {
    readonly id: FieldRef<"Version", 'String'>
    readonly softwareId: FieldRef<"Version", 'String'>
    readonly version: FieldRef<"Version", 'String'>
    readonly osLabel: FieldRef<"Version", 'String'>
    readonly license: FieldRef<"Version", 'String'>
    readonly changelog: FieldRef<"Version", 'String'>
    readonly releasedAt: FieldRef<"Version", 'DateTime'>
    readonly createdAt: FieldRef<"Version", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Version findUnique
   */
  export type VersionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where: VersionWhereUniqueInput
  }

  /**
   * Version findUniqueOrThrow
   */
  export type VersionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where: VersionWhereUniqueInput
  }

  /**
   * Version findFirst
   */
  export type VersionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Versions.
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Versions.
     */
    distinct?: VersionScalarFieldEnum | VersionScalarFieldEnum[]
  }

  /**
   * Version findFirstOrThrow
   */
  export type VersionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Version to fetch.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Versions.
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Versions.
     */
    distinct?: VersionScalarFieldEnum | VersionScalarFieldEnum[]
  }

  /**
   * Version findMany
   */
  export type VersionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter, which Versions to fetch.
     */
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     */
    orderBy?: VersionOrderByWithRelationInput | VersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Versions.
     */
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     */
    skip?: number
    distinct?: VersionScalarFieldEnum | VersionScalarFieldEnum[]
  }

  /**
   * Version create
   */
  export type VersionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * The data needed to create a Version.
     */
    data: XOR<VersionCreateInput, VersionUncheckedCreateInput>
  }

  /**
   * Version createMany
   */
  export type VersionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Versions.
     */
    data: VersionCreateManyInput | VersionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Version update
   */
  export type VersionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * The data needed to update a Version.
     */
    data: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
    /**
     * Choose, which Version to update.
     */
    where: VersionWhereUniqueInput
  }

  /**
   * Version updateMany
   */
  export type VersionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Versions.
     */
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyInput>
    /**
     * Filter which Versions to update
     */
    where?: VersionWhereInput
  }

  /**
   * Version upsert
   */
  export type VersionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * The filter to search for the Version to update in case it exists.
     */
    where: VersionWhereUniqueInput
    /**
     * In case the Version found by the `where` argument doesn't exist, create a new Version with this data.
     */
    create: XOR<VersionCreateInput, VersionUncheckedCreateInput>
    /**
     * In case the Version was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
  }

  /**
   * Version delete
   */
  export type VersionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    /**
     * Filter which Version to delete.
     */
    where: VersionWhereUniqueInput
  }

  /**
   * Version deleteMany
   */
  export type VersionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Versions to delete
     */
    where?: VersionWhereInput
  }

  /**
   * Version.builds
   */
  export type Version$buildsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    where?: BuildWhereInput
    orderBy?: BuildOrderByWithRelationInput | BuildOrderByWithRelationInput[]
    cursor?: BuildWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuildScalarFieldEnum | BuildScalarFieldEnum[]
  }

  /**
   * Version.logs
   */
  export type Version$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    where?: DownloadLogWhereInput
    orderBy?: DownloadLogOrderByWithRelationInput | DownloadLogOrderByWithRelationInput[]
    cursor?: DownloadLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DownloadLogScalarFieldEnum | DownloadLogScalarFieldEnum[]
  }

  /**
   * Version without action
   */
  export type VersionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
  }


  /**
   * Model Build
   */

  export type AggregateBuild = {
    _count: BuildCountAggregateOutputType | null
    _avg: BuildAvgAggregateOutputType | null
    _sum: BuildSumAggregateOutputType | null
    _min: BuildMinAggregateOutputType | null
    _max: BuildMaxAggregateOutputType | null
  }

  export type BuildAvgAggregateOutputType = {
    sizeMB: number | null
  }

  export type BuildSumAggregateOutputType = {
    sizeMB: number | null
  }

  export type BuildMinAggregateOutputType = {
    id: string | null
    versionId: string | null
    os: string | null
    arch: string | null
    buildType: $Enums.BuildType | null
    sizeMB: number | null
    fileSize: string | null
    sha256: string | null
    downloadUrl: string | null
    createdAt: Date | null
  }

  export type BuildMaxAggregateOutputType = {
    id: string | null
    versionId: string | null
    os: string | null
    arch: string | null
    buildType: $Enums.BuildType | null
    sizeMB: number | null
    fileSize: string | null
    sha256: string | null
    downloadUrl: string | null
    createdAt: Date | null
  }

  export type BuildCountAggregateOutputType = {
    id: number
    versionId: number
    os: number
    arch: number
    buildType: number
    sizeMB: number
    fileSize: number
    sha256: number
    downloadUrl: number
    createdAt: number
    _all: number
  }


  export type BuildAvgAggregateInputType = {
    sizeMB?: true
  }

  export type BuildSumAggregateInputType = {
    sizeMB?: true
  }

  export type BuildMinAggregateInputType = {
    id?: true
    versionId?: true
    os?: true
    arch?: true
    buildType?: true
    sizeMB?: true
    fileSize?: true
    sha256?: true
    downloadUrl?: true
    createdAt?: true
  }

  export type BuildMaxAggregateInputType = {
    id?: true
    versionId?: true
    os?: true
    arch?: true
    buildType?: true
    sizeMB?: true
    fileSize?: true
    sha256?: true
    downloadUrl?: true
    createdAt?: true
  }

  export type BuildCountAggregateInputType = {
    id?: true
    versionId?: true
    os?: true
    arch?: true
    buildType?: true
    sizeMB?: true
    fileSize?: true
    sha256?: true
    downloadUrl?: true
    createdAt?: true
    _all?: true
  }

  export type BuildAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Build to aggregate.
     */
    where?: BuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builds to fetch.
     */
    orderBy?: BuildOrderByWithRelationInput | BuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Builds
    **/
    _count?: true | BuildCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuildAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuildSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuildMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuildMaxAggregateInputType
  }

  export type GetBuildAggregateType<T extends BuildAggregateArgs> = {
        [P in keyof T & keyof AggregateBuild]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuild[P]>
      : GetScalarType<T[P], AggregateBuild[P]>
  }




  export type BuildGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuildWhereInput
    orderBy?: BuildOrderByWithAggregationInput | BuildOrderByWithAggregationInput[]
    by: BuildScalarFieldEnum[] | BuildScalarFieldEnum
    having?: BuildScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuildCountAggregateInputType | true
    _avg?: BuildAvgAggregateInputType
    _sum?: BuildSumAggregateInputType
    _min?: BuildMinAggregateInputType
    _max?: BuildMaxAggregateInputType
  }

  export type BuildGroupByOutputType = {
    id: string
    versionId: string
    os: string | null
    arch: string | null
    buildType: $Enums.BuildType | null
    sizeMB: number | null
    fileSize: string | null
    sha256: string | null
    downloadUrl: string | null
    createdAt: Date
    _count: BuildCountAggregateOutputType | null
    _avg: BuildAvgAggregateOutputType | null
    _sum: BuildSumAggregateOutputType | null
    _min: BuildMinAggregateOutputType | null
    _max: BuildMaxAggregateOutputType | null
  }

  type GetBuildGroupByPayload<T extends BuildGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuildGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuildGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuildGroupByOutputType[P]>
            : GetScalarType<T[P], BuildGroupByOutputType[P]>
        }
      >
    >


  export type BuildSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    versionId?: boolean
    os?: boolean
    arch?: boolean
    buildType?: boolean
    sizeMB?: boolean
    fileSize?: boolean
    sha256?: boolean
    downloadUrl?: boolean
    createdAt?: boolean
    version?: boolean | VersionDefaultArgs<ExtArgs>
    mirrors?: boolean | Build$mirrorsArgs<ExtArgs>
    logs?: boolean | Build$logsArgs<ExtArgs>
    _count?: boolean | BuildCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["build"]>


  export type BuildSelectScalar = {
    id?: boolean
    versionId?: boolean
    os?: boolean
    arch?: boolean
    buildType?: boolean
    sizeMB?: boolean
    fileSize?: boolean
    sha256?: boolean
    downloadUrl?: boolean
    createdAt?: boolean
  }

  export type BuildInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    version?: boolean | VersionDefaultArgs<ExtArgs>
    mirrors?: boolean | Build$mirrorsArgs<ExtArgs>
    logs?: boolean | Build$logsArgs<ExtArgs>
    _count?: boolean | BuildCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BuildPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Build"
    objects: {
      version: Prisma.$VersionPayload<ExtArgs>
      mirrors: Prisma.$MirrorPayload<ExtArgs>[]
      logs: Prisma.$DownloadLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      versionId: string
      os: string | null
      arch: string | null
      buildType: $Enums.BuildType | null
      sizeMB: number | null
      fileSize: string | null
      sha256: string | null
      downloadUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["build"]>
    composites: {}
  }

  type BuildGetPayload<S extends boolean | null | undefined | BuildDefaultArgs> = $Result.GetResult<Prisma.$BuildPayload, S>

  type BuildCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BuildFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BuildCountAggregateInputType | true
    }

  export interface BuildDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Build'], meta: { name: 'Build' } }
    /**
     * Find zero or one Build that matches the filter.
     * @param {BuildFindUniqueArgs} args - Arguments to find a Build
     * @example
     * // Get one Build
     * const build = await prisma.build.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuildFindUniqueArgs>(args: SelectSubset<T, BuildFindUniqueArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Build that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BuildFindUniqueOrThrowArgs} args - Arguments to find a Build
     * @example
     * // Get one Build
     * const build = await prisma.build.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuildFindUniqueOrThrowArgs>(args: SelectSubset<T, BuildFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Build that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildFindFirstArgs} args - Arguments to find a Build
     * @example
     * // Get one Build
     * const build = await prisma.build.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuildFindFirstArgs>(args?: SelectSubset<T, BuildFindFirstArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Build that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildFindFirstOrThrowArgs} args - Arguments to find a Build
     * @example
     * // Get one Build
     * const build = await prisma.build.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuildFindFirstOrThrowArgs>(args?: SelectSubset<T, BuildFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Builds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Builds
     * const builds = await prisma.build.findMany()
     * 
     * // Get first 10 Builds
     * const builds = await prisma.build.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buildWithIdOnly = await prisma.build.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuildFindManyArgs>(args?: SelectSubset<T, BuildFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Build.
     * @param {BuildCreateArgs} args - Arguments to create a Build.
     * @example
     * // Create one Build
     * const Build = await prisma.build.create({
     *   data: {
     *     // ... data to create a Build
     *   }
     * })
     * 
     */
    create<T extends BuildCreateArgs>(args: SelectSubset<T, BuildCreateArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Builds.
     * @param {BuildCreateManyArgs} args - Arguments to create many Builds.
     * @example
     * // Create many Builds
     * const build = await prisma.build.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuildCreateManyArgs>(args?: SelectSubset<T, BuildCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Build.
     * @param {BuildDeleteArgs} args - Arguments to delete one Build.
     * @example
     * // Delete one Build
     * const Build = await prisma.build.delete({
     *   where: {
     *     // ... filter to delete one Build
     *   }
     * })
     * 
     */
    delete<T extends BuildDeleteArgs>(args: SelectSubset<T, BuildDeleteArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Build.
     * @param {BuildUpdateArgs} args - Arguments to update one Build.
     * @example
     * // Update one Build
     * const build = await prisma.build.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuildUpdateArgs>(args: SelectSubset<T, BuildUpdateArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Builds.
     * @param {BuildDeleteManyArgs} args - Arguments to filter Builds to delete.
     * @example
     * // Delete a few Builds
     * const { count } = await prisma.build.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuildDeleteManyArgs>(args?: SelectSubset<T, BuildDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Builds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Builds
     * const build = await prisma.build.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuildUpdateManyArgs>(args: SelectSubset<T, BuildUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Build.
     * @param {BuildUpsertArgs} args - Arguments to update or create a Build.
     * @example
     * // Update or create a Build
     * const build = await prisma.build.upsert({
     *   create: {
     *     // ... data to create a Build
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Build we want to update
     *   }
     * })
     */
    upsert<T extends BuildUpsertArgs>(args: SelectSubset<T, BuildUpsertArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Builds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildCountArgs} args - Arguments to filter Builds to count.
     * @example
     * // Count the number of Builds
     * const count = await prisma.build.count({
     *   where: {
     *     // ... the filter for the Builds we want to count
     *   }
     * })
    **/
    count<T extends BuildCountArgs>(
      args?: Subset<T, BuildCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuildCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Build.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuildAggregateArgs>(args: Subset<T, BuildAggregateArgs>): Prisma.PrismaPromise<GetBuildAggregateType<T>>

    /**
     * Group by Build.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuildGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuildGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuildGroupByArgs['orderBy'] }
        : { orderBy?: BuildGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuildGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuildGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Build model
   */
  readonly fields: BuildFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Build.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuildClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    version<T extends VersionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VersionDefaultArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    mirrors<T extends Build$mirrorsArgs<ExtArgs> = {}>(args?: Subset<T, Build$mirrorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MirrorPayload<ExtArgs>, T, "findMany"> | Null>
    logs<T extends Build$logsArgs<ExtArgs> = {}>(args?: Subset<T, Build$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Build model
   */ 
  interface BuildFieldRefs {
    readonly id: FieldRef<"Build", 'String'>
    readonly versionId: FieldRef<"Build", 'String'>
    readonly os: FieldRef<"Build", 'String'>
    readonly arch: FieldRef<"Build", 'String'>
    readonly buildType: FieldRef<"Build", 'BuildType'>
    readonly sizeMB: FieldRef<"Build", 'Int'>
    readonly fileSize: FieldRef<"Build", 'String'>
    readonly sha256: FieldRef<"Build", 'String'>
    readonly downloadUrl: FieldRef<"Build", 'String'>
    readonly createdAt: FieldRef<"Build", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Build findUnique
   */
  export type BuildFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter, which Build to fetch.
     */
    where: BuildWhereUniqueInput
  }

  /**
   * Build findUniqueOrThrow
   */
  export type BuildFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter, which Build to fetch.
     */
    where: BuildWhereUniqueInput
  }

  /**
   * Build findFirst
   */
  export type BuildFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter, which Build to fetch.
     */
    where?: BuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builds to fetch.
     */
    orderBy?: BuildOrderByWithRelationInput | BuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Builds.
     */
    cursor?: BuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Builds.
     */
    distinct?: BuildScalarFieldEnum | BuildScalarFieldEnum[]
  }

  /**
   * Build findFirstOrThrow
   */
  export type BuildFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter, which Build to fetch.
     */
    where?: BuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builds to fetch.
     */
    orderBy?: BuildOrderByWithRelationInput | BuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Builds.
     */
    cursor?: BuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Builds.
     */
    distinct?: BuildScalarFieldEnum | BuildScalarFieldEnum[]
  }

  /**
   * Build findMany
   */
  export type BuildFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter, which Builds to fetch.
     */
    where?: BuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Builds to fetch.
     */
    orderBy?: BuildOrderByWithRelationInput | BuildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Builds.
     */
    cursor?: BuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Builds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Builds.
     */
    skip?: number
    distinct?: BuildScalarFieldEnum | BuildScalarFieldEnum[]
  }

  /**
   * Build create
   */
  export type BuildCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * The data needed to create a Build.
     */
    data: XOR<BuildCreateInput, BuildUncheckedCreateInput>
  }

  /**
   * Build createMany
   */
  export type BuildCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Builds.
     */
    data: BuildCreateManyInput | BuildCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Build update
   */
  export type BuildUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * The data needed to update a Build.
     */
    data: XOR<BuildUpdateInput, BuildUncheckedUpdateInput>
    /**
     * Choose, which Build to update.
     */
    where: BuildWhereUniqueInput
  }

  /**
   * Build updateMany
   */
  export type BuildUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Builds.
     */
    data: XOR<BuildUpdateManyMutationInput, BuildUncheckedUpdateManyInput>
    /**
     * Filter which Builds to update
     */
    where?: BuildWhereInput
  }

  /**
   * Build upsert
   */
  export type BuildUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * The filter to search for the Build to update in case it exists.
     */
    where: BuildWhereUniqueInput
    /**
     * In case the Build found by the `where` argument doesn't exist, create a new Build with this data.
     */
    create: XOR<BuildCreateInput, BuildUncheckedCreateInput>
    /**
     * In case the Build was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuildUpdateInput, BuildUncheckedUpdateInput>
  }

  /**
   * Build delete
   */
  export type BuildDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    /**
     * Filter which Build to delete.
     */
    where: BuildWhereUniqueInput
  }

  /**
   * Build deleteMany
   */
  export type BuildDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Builds to delete
     */
    where?: BuildWhereInput
  }

  /**
   * Build.mirrors
   */
  export type Build$mirrorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
    where?: MirrorWhereInput
    orderBy?: MirrorOrderByWithRelationInput | MirrorOrderByWithRelationInput[]
    cursor?: MirrorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MirrorScalarFieldEnum | MirrorScalarFieldEnum[]
  }

  /**
   * Build.logs
   */
  export type Build$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    where?: DownloadLogWhereInput
    orderBy?: DownloadLogOrderByWithRelationInput | DownloadLogOrderByWithRelationInput[]
    cursor?: DownloadLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DownloadLogScalarFieldEnum | DownloadLogScalarFieldEnum[]
  }

  /**
   * Build without action
   */
  export type BuildDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
  }


  /**
   * Model Mirror
   */

  export type AggregateMirror = {
    _count: MirrorCountAggregateOutputType | null
    _avg: MirrorAvgAggregateOutputType | null
    _sum: MirrorSumAggregateOutputType | null
    _min: MirrorMinAggregateOutputType | null
    _max: MirrorMaxAggregateOutputType | null
  }

  export type MirrorAvgAggregateOutputType = {
    priority: number | null
  }

  export type MirrorSumAggregateOutputType = {
    priority: number | null
  }

  export type MirrorMinAggregateOutputType = {
    id: string | null
    buildId: string | null
    title: string | null
    url: string | null
    priority: number | null
  }

  export type MirrorMaxAggregateOutputType = {
    id: string | null
    buildId: string | null
    title: string | null
    url: string | null
    priority: number | null
  }

  export type MirrorCountAggregateOutputType = {
    id: number
    buildId: number
    title: number
    url: number
    priority: number
    _all: number
  }


  export type MirrorAvgAggregateInputType = {
    priority?: true
  }

  export type MirrorSumAggregateInputType = {
    priority?: true
  }

  export type MirrorMinAggregateInputType = {
    id?: true
    buildId?: true
    title?: true
    url?: true
    priority?: true
  }

  export type MirrorMaxAggregateInputType = {
    id?: true
    buildId?: true
    title?: true
    url?: true
    priority?: true
  }

  export type MirrorCountAggregateInputType = {
    id?: true
    buildId?: true
    title?: true
    url?: true
    priority?: true
    _all?: true
  }

  export type MirrorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mirror to aggregate.
     */
    where?: MirrorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mirrors to fetch.
     */
    orderBy?: MirrorOrderByWithRelationInput | MirrorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MirrorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mirrors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mirrors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mirrors
    **/
    _count?: true | MirrorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MirrorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MirrorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MirrorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MirrorMaxAggregateInputType
  }

  export type GetMirrorAggregateType<T extends MirrorAggregateArgs> = {
        [P in keyof T & keyof AggregateMirror]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMirror[P]>
      : GetScalarType<T[P], AggregateMirror[P]>
  }




  export type MirrorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MirrorWhereInput
    orderBy?: MirrorOrderByWithAggregationInput | MirrorOrderByWithAggregationInput[]
    by: MirrorScalarFieldEnum[] | MirrorScalarFieldEnum
    having?: MirrorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MirrorCountAggregateInputType | true
    _avg?: MirrorAvgAggregateInputType
    _sum?: MirrorSumAggregateInputType
    _min?: MirrorMinAggregateInputType
    _max?: MirrorMaxAggregateInputType
  }

  export type MirrorGroupByOutputType = {
    id: string
    buildId: string
    title: string
    url: string
    priority: number
    _count: MirrorCountAggregateOutputType | null
    _avg: MirrorAvgAggregateOutputType | null
    _sum: MirrorSumAggregateOutputType | null
    _min: MirrorMinAggregateOutputType | null
    _max: MirrorMaxAggregateOutputType | null
  }

  type GetMirrorGroupByPayload<T extends MirrorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MirrorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MirrorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MirrorGroupByOutputType[P]>
            : GetScalarType<T[P], MirrorGroupByOutputType[P]>
        }
      >
    >


  export type MirrorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    buildId?: boolean
    title?: boolean
    url?: boolean
    priority?: boolean
    build?: boolean | BuildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mirror"]>


  export type MirrorSelectScalar = {
    id?: boolean
    buildId?: boolean
    title?: boolean
    url?: boolean
    priority?: boolean
  }

  export type MirrorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    build?: boolean | BuildDefaultArgs<ExtArgs>
  }

  export type $MirrorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mirror"
    objects: {
      build: Prisma.$BuildPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      buildId: string
      title: string
      url: string
      priority: number
    }, ExtArgs["result"]["mirror"]>
    composites: {}
  }

  type MirrorGetPayload<S extends boolean | null | undefined | MirrorDefaultArgs> = $Result.GetResult<Prisma.$MirrorPayload, S>

  type MirrorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MirrorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MirrorCountAggregateInputType | true
    }

  export interface MirrorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mirror'], meta: { name: 'Mirror' } }
    /**
     * Find zero or one Mirror that matches the filter.
     * @param {MirrorFindUniqueArgs} args - Arguments to find a Mirror
     * @example
     * // Get one Mirror
     * const mirror = await prisma.mirror.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MirrorFindUniqueArgs>(args: SelectSubset<T, MirrorFindUniqueArgs<ExtArgs>>): Prisma__MirrorClient<$Result.GetResult<Prisma.$MirrorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Mirror that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MirrorFindUniqueOrThrowArgs} args - Arguments to find a Mirror
     * @example
     * // Get one Mirror
     * const mirror = await prisma.mirror.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MirrorFindUniqueOrThrowArgs>(args: SelectSubset<T, MirrorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MirrorClient<$Result.GetResult<Prisma.$MirrorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Mirror that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MirrorFindFirstArgs} args - Arguments to find a Mirror
     * @example
     * // Get one Mirror
     * const mirror = await prisma.mirror.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MirrorFindFirstArgs>(args?: SelectSubset<T, MirrorFindFirstArgs<ExtArgs>>): Prisma__MirrorClient<$Result.GetResult<Prisma.$MirrorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Mirror that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MirrorFindFirstOrThrowArgs} args - Arguments to find a Mirror
     * @example
     * // Get one Mirror
     * const mirror = await prisma.mirror.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MirrorFindFirstOrThrowArgs>(args?: SelectSubset<T, MirrorFindFirstOrThrowArgs<ExtArgs>>): Prisma__MirrorClient<$Result.GetResult<Prisma.$MirrorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Mirrors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MirrorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mirrors
     * const mirrors = await prisma.mirror.findMany()
     * 
     * // Get first 10 Mirrors
     * const mirrors = await prisma.mirror.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mirrorWithIdOnly = await prisma.mirror.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MirrorFindManyArgs>(args?: SelectSubset<T, MirrorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MirrorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Mirror.
     * @param {MirrorCreateArgs} args - Arguments to create a Mirror.
     * @example
     * // Create one Mirror
     * const Mirror = await prisma.mirror.create({
     *   data: {
     *     // ... data to create a Mirror
     *   }
     * })
     * 
     */
    create<T extends MirrorCreateArgs>(args: SelectSubset<T, MirrorCreateArgs<ExtArgs>>): Prisma__MirrorClient<$Result.GetResult<Prisma.$MirrorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Mirrors.
     * @param {MirrorCreateManyArgs} args - Arguments to create many Mirrors.
     * @example
     * // Create many Mirrors
     * const mirror = await prisma.mirror.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MirrorCreateManyArgs>(args?: SelectSubset<T, MirrorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mirror.
     * @param {MirrorDeleteArgs} args - Arguments to delete one Mirror.
     * @example
     * // Delete one Mirror
     * const Mirror = await prisma.mirror.delete({
     *   where: {
     *     // ... filter to delete one Mirror
     *   }
     * })
     * 
     */
    delete<T extends MirrorDeleteArgs>(args: SelectSubset<T, MirrorDeleteArgs<ExtArgs>>): Prisma__MirrorClient<$Result.GetResult<Prisma.$MirrorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Mirror.
     * @param {MirrorUpdateArgs} args - Arguments to update one Mirror.
     * @example
     * // Update one Mirror
     * const mirror = await prisma.mirror.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MirrorUpdateArgs>(args: SelectSubset<T, MirrorUpdateArgs<ExtArgs>>): Prisma__MirrorClient<$Result.GetResult<Prisma.$MirrorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Mirrors.
     * @param {MirrorDeleteManyArgs} args - Arguments to filter Mirrors to delete.
     * @example
     * // Delete a few Mirrors
     * const { count } = await prisma.mirror.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MirrorDeleteManyArgs>(args?: SelectSubset<T, MirrorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mirrors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MirrorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mirrors
     * const mirror = await prisma.mirror.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MirrorUpdateManyArgs>(args: SelectSubset<T, MirrorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mirror.
     * @param {MirrorUpsertArgs} args - Arguments to update or create a Mirror.
     * @example
     * // Update or create a Mirror
     * const mirror = await prisma.mirror.upsert({
     *   create: {
     *     // ... data to create a Mirror
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mirror we want to update
     *   }
     * })
     */
    upsert<T extends MirrorUpsertArgs>(args: SelectSubset<T, MirrorUpsertArgs<ExtArgs>>): Prisma__MirrorClient<$Result.GetResult<Prisma.$MirrorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Mirrors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MirrorCountArgs} args - Arguments to filter Mirrors to count.
     * @example
     * // Count the number of Mirrors
     * const count = await prisma.mirror.count({
     *   where: {
     *     // ... the filter for the Mirrors we want to count
     *   }
     * })
    **/
    count<T extends MirrorCountArgs>(
      args?: Subset<T, MirrorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MirrorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mirror.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MirrorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MirrorAggregateArgs>(args: Subset<T, MirrorAggregateArgs>): Prisma.PrismaPromise<GetMirrorAggregateType<T>>

    /**
     * Group by Mirror.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MirrorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MirrorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MirrorGroupByArgs['orderBy'] }
        : { orderBy?: MirrorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MirrorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMirrorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mirror model
   */
  readonly fields: MirrorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mirror.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MirrorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    build<T extends BuildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuildDefaultArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mirror model
   */ 
  interface MirrorFieldRefs {
    readonly id: FieldRef<"Mirror", 'String'>
    readonly buildId: FieldRef<"Mirror", 'String'>
    readonly title: FieldRef<"Mirror", 'String'>
    readonly url: FieldRef<"Mirror", 'String'>
    readonly priority: FieldRef<"Mirror", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Mirror findUnique
   */
  export type MirrorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
    /**
     * Filter, which Mirror to fetch.
     */
    where: MirrorWhereUniqueInput
  }

  /**
   * Mirror findUniqueOrThrow
   */
  export type MirrorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
    /**
     * Filter, which Mirror to fetch.
     */
    where: MirrorWhereUniqueInput
  }

  /**
   * Mirror findFirst
   */
  export type MirrorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
    /**
     * Filter, which Mirror to fetch.
     */
    where?: MirrorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mirrors to fetch.
     */
    orderBy?: MirrorOrderByWithRelationInput | MirrorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mirrors.
     */
    cursor?: MirrorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mirrors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mirrors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mirrors.
     */
    distinct?: MirrorScalarFieldEnum | MirrorScalarFieldEnum[]
  }

  /**
   * Mirror findFirstOrThrow
   */
  export type MirrorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
    /**
     * Filter, which Mirror to fetch.
     */
    where?: MirrorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mirrors to fetch.
     */
    orderBy?: MirrorOrderByWithRelationInput | MirrorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mirrors.
     */
    cursor?: MirrorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mirrors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mirrors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mirrors.
     */
    distinct?: MirrorScalarFieldEnum | MirrorScalarFieldEnum[]
  }

  /**
   * Mirror findMany
   */
  export type MirrorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
    /**
     * Filter, which Mirrors to fetch.
     */
    where?: MirrorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mirrors to fetch.
     */
    orderBy?: MirrorOrderByWithRelationInput | MirrorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mirrors.
     */
    cursor?: MirrorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mirrors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mirrors.
     */
    skip?: number
    distinct?: MirrorScalarFieldEnum | MirrorScalarFieldEnum[]
  }

  /**
   * Mirror create
   */
  export type MirrorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
    /**
     * The data needed to create a Mirror.
     */
    data: XOR<MirrorCreateInput, MirrorUncheckedCreateInput>
  }

  /**
   * Mirror createMany
   */
  export type MirrorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mirrors.
     */
    data: MirrorCreateManyInput | MirrorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mirror update
   */
  export type MirrorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
    /**
     * The data needed to update a Mirror.
     */
    data: XOR<MirrorUpdateInput, MirrorUncheckedUpdateInput>
    /**
     * Choose, which Mirror to update.
     */
    where: MirrorWhereUniqueInput
  }

  /**
   * Mirror updateMany
   */
  export type MirrorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mirrors.
     */
    data: XOR<MirrorUpdateManyMutationInput, MirrorUncheckedUpdateManyInput>
    /**
     * Filter which Mirrors to update
     */
    where?: MirrorWhereInput
  }

  /**
   * Mirror upsert
   */
  export type MirrorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
    /**
     * The filter to search for the Mirror to update in case it exists.
     */
    where: MirrorWhereUniqueInput
    /**
     * In case the Mirror found by the `where` argument doesn't exist, create a new Mirror with this data.
     */
    create: XOR<MirrorCreateInput, MirrorUncheckedCreateInput>
    /**
     * In case the Mirror was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MirrorUpdateInput, MirrorUncheckedUpdateInput>
  }

  /**
   * Mirror delete
   */
  export type MirrorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
    /**
     * Filter which Mirror to delete.
     */
    where: MirrorWhereUniqueInput
  }

  /**
   * Mirror deleteMany
   */
  export type MirrorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mirrors to delete
     */
    where?: MirrorWhereInput
  }

  /**
   * Mirror without action
   */
  export type MirrorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mirror
     */
    select?: MirrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MirrorInclude<ExtArgs> | null
  }


  /**
   * Model SoftwareMedia
   */

  export type AggregateSoftwareMedia = {
    _count: SoftwareMediaCountAggregateOutputType | null
    _avg: SoftwareMediaAvgAggregateOutputType | null
    _sum: SoftwareMediaSumAggregateOutputType | null
    _min: SoftwareMediaMinAggregateOutputType | null
    _max: SoftwareMediaMaxAggregateOutputType | null
  }

  export type SoftwareMediaAvgAggregateOutputType = {
    order: number | null
  }

  export type SoftwareMediaSumAggregateOutputType = {
    order: number | null
  }

  export type SoftwareMediaMinAggregateOutputType = {
    id: string | null
    softwareId: string | null
    type: $Enums.MediaType | null
    url: string | null
    alt: string | null
    order: number | null
    createdAt: Date | null
  }

  export type SoftwareMediaMaxAggregateOutputType = {
    id: string | null
    softwareId: string | null
    type: $Enums.MediaType | null
    url: string | null
    alt: string | null
    order: number | null
    createdAt: Date | null
  }

  export type SoftwareMediaCountAggregateOutputType = {
    id: number
    softwareId: number
    type: number
    url: number
    alt: number
    order: number
    createdAt: number
    _all: number
  }


  export type SoftwareMediaAvgAggregateInputType = {
    order?: true
  }

  export type SoftwareMediaSumAggregateInputType = {
    order?: true
  }

  export type SoftwareMediaMinAggregateInputType = {
    id?: true
    softwareId?: true
    type?: true
    url?: true
    alt?: true
    order?: true
    createdAt?: true
  }

  export type SoftwareMediaMaxAggregateInputType = {
    id?: true
    softwareId?: true
    type?: true
    url?: true
    alt?: true
    order?: true
    createdAt?: true
  }

  export type SoftwareMediaCountAggregateInputType = {
    id?: true
    softwareId?: true
    type?: true
    url?: true
    alt?: true
    order?: true
    createdAt?: true
    _all?: true
  }

  export type SoftwareMediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoftwareMedia to aggregate.
     */
    where?: SoftwareMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareMedias to fetch.
     */
    orderBy?: SoftwareMediaOrderByWithRelationInput | SoftwareMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoftwareMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SoftwareMedias
    **/
    _count?: true | SoftwareMediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SoftwareMediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SoftwareMediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoftwareMediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoftwareMediaMaxAggregateInputType
  }

  export type GetSoftwareMediaAggregateType<T extends SoftwareMediaAggregateArgs> = {
        [P in keyof T & keyof AggregateSoftwareMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoftwareMedia[P]>
      : GetScalarType<T[P], AggregateSoftwareMedia[P]>
  }




  export type SoftwareMediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoftwareMediaWhereInput
    orderBy?: SoftwareMediaOrderByWithAggregationInput | SoftwareMediaOrderByWithAggregationInput[]
    by: SoftwareMediaScalarFieldEnum[] | SoftwareMediaScalarFieldEnum
    having?: SoftwareMediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoftwareMediaCountAggregateInputType | true
    _avg?: SoftwareMediaAvgAggregateInputType
    _sum?: SoftwareMediaSumAggregateInputType
    _min?: SoftwareMediaMinAggregateInputType
    _max?: SoftwareMediaMaxAggregateInputType
  }

  export type SoftwareMediaGroupByOutputType = {
    id: string
    softwareId: string
    type: $Enums.MediaType
    url: string
    alt: string | null
    order: number
    createdAt: Date
    _count: SoftwareMediaCountAggregateOutputType | null
    _avg: SoftwareMediaAvgAggregateOutputType | null
    _sum: SoftwareMediaSumAggregateOutputType | null
    _min: SoftwareMediaMinAggregateOutputType | null
    _max: SoftwareMediaMaxAggregateOutputType | null
  }

  type GetSoftwareMediaGroupByPayload<T extends SoftwareMediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoftwareMediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoftwareMediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoftwareMediaGroupByOutputType[P]>
            : GetScalarType<T[P], SoftwareMediaGroupByOutputType[P]>
        }
      >
    >


  export type SoftwareMediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    softwareId?: boolean
    type?: boolean
    url?: boolean
    alt?: boolean
    order?: boolean
    createdAt?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["softwareMedia"]>


  export type SoftwareMediaSelectScalar = {
    id?: boolean
    softwareId?: boolean
    type?: boolean
    url?: boolean
    alt?: boolean
    order?: boolean
    createdAt?: boolean
  }

  export type SoftwareMediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
  }

  export type $SoftwareMediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SoftwareMedia"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      softwareId: string
      type: $Enums.MediaType
      url: string
      alt: string | null
      order: number
      createdAt: Date
    }, ExtArgs["result"]["softwareMedia"]>
    composites: {}
  }

  type SoftwareMediaGetPayload<S extends boolean | null | undefined | SoftwareMediaDefaultArgs> = $Result.GetResult<Prisma.$SoftwareMediaPayload, S>

  type SoftwareMediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SoftwareMediaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SoftwareMediaCountAggregateInputType | true
    }

  export interface SoftwareMediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SoftwareMedia'], meta: { name: 'SoftwareMedia' } }
    /**
     * Find zero or one SoftwareMedia that matches the filter.
     * @param {SoftwareMediaFindUniqueArgs} args - Arguments to find a SoftwareMedia
     * @example
     * // Get one SoftwareMedia
     * const softwareMedia = await prisma.softwareMedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoftwareMediaFindUniqueArgs>(args: SelectSubset<T, SoftwareMediaFindUniqueArgs<ExtArgs>>): Prisma__SoftwareMediaClient<$Result.GetResult<Prisma.$SoftwareMediaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SoftwareMedia that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SoftwareMediaFindUniqueOrThrowArgs} args - Arguments to find a SoftwareMedia
     * @example
     * // Get one SoftwareMedia
     * const softwareMedia = await prisma.softwareMedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoftwareMediaFindUniqueOrThrowArgs>(args: SelectSubset<T, SoftwareMediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoftwareMediaClient<$Result.GetResult<Prisma.$SoftwareMediaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SoftwareMedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareMediaFindFirstArgs} args - Arguments to find a SoftwareMedia
     * @example
     * // Get one SoftwareMedia
     * const softwareMedia = await prisma.softwareMedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoftwareMediaFindFirstArgs>(args?: SelectSubset<T, SoftwareMediaFindFirstArgs<ExtArgs>>): Prisma__SoftwareMediaClient<$Result.GetResult<Prisma.$SoftwareMediaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SoftwareMedia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareMediaFindFirstOrThrowArgs} args - Arguments to find a SoftwareMedia
     * @example
     * // Get one SoftwareMedia
     * const softwareMedia = await prisma.softwareMedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoftwareMediaFindFirstOrThrowArgs>(args?: SelectSubset<T, SoftwareMediaFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoftwareMediaClient<$Result.GetResult<Prisma.$SoftwareMediaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SoftwareMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareMediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SoftwareMedias
     * const softwareMedias = await prisma.softwareMedia.findMany()
     * 
     * // Get first 10 SoftwareMedias
     * const softwareMedias = await prisma.softwareMedia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const softwareMediaWithIdOnly = await prisma.softwareMedia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SoftwareMediaFindManyArgs>(args?: SelectSubset<T, SoftwareMediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoftwareMediaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SoftwareMedia.
     * @param {SoftwareMediaCreateArgs} args - Arguments to create a SoftwareMedia.
     * @example
     * // Create one SoftwareMedia
     * const SoftwareMedia = await prisma.softwareMedia.create({
     *   data: {
     *     // ... data to create a SoftwareMedia
     *   }
     * })
     * 
     */
    create<T extends SoftwareMediaCreateArgs>(args: SelectSubset<T, SoftwareMediaCreateArgs<ExtArgs>>): Prisma__SoftwareMediaClient<$Result.GetResult<Prisma.$SoftwareMediaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SoftwareMedias.
     * @param {SoftwareMediaCreateManyArgs} args - Arguments to create many SoftwareMedias.
     * @example
     * // Create many SoftwareMedias
     * const softwareMedia = await prisma.softwareMedia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoftwareMediaCreateManyArgs>(args?: SelectSubset<T, SoftwareMediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SoftwareMedia.
     * @param {SoftwareMediaDeleteArgs} args - Arguments to delete one SoftwareMedia.
     * @example
     * // Delete one SoftwareMedia
     * const SoftwareMedia = await prisma.softwareMedia.delete({
     *   where: {
     *     // ... filter to delete one SoftwareMedia
     *   }
     * })
     * 
     */
    delete<T extends SoftwareMediaDeleteArgs>(args: SelectSubset<T, SoftwareMediaDeleteArgs<ExtArgs>>): Prisma__SoftwareMediaClient<$Result.GetResult<Prisma.$SoftwareMediaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SoftwareMedia.
     * @param {SoftwareMediaUpdateArgs} args - Arguments to update one SoftwareMedia.
     * @example
     * // Update one SoftwareMedia
     * const softwareMedia = await prisma.softwareMedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoftwareMediaUpdateArgs>(args: SelectSubset<T, SoftwareMediaUpdateArgs<ExtArgs>>): Prisma__SoftwareMediaClient<$Result.GetResult<Prisma.$SoftwareMediaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SoftwareMedias.
     * @param {SoftwareMediaDeleteManyArgs} args - Arguments to filter SoftwareMedias to delete.
     * @example
     * // Delete a few SoftwareMedias
     * const { count } = await prisma.softwareMedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoftwareMediaDeleteManyArgs>(args?: SelectSubset<T, SoftwareMediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SoftwareMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareMediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SoftwareMedias
     * const softwareMedia = await prisma.softwareMedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoftwareMediaUpdateManyArgs>(args: SelectSubset<T, SoftwareMediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SoftwareMedia.
     * @param {SoftwareMediaUpsertArgs} args - Arguments to update or create a SoftwareMedia.
     * @example
     * // Update or create a SoftwareMedia
     * const softwareMedia = await prisma.softwareMedia.upsert({
     *   create: {
     *     // ... data to create a SoftwareMedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SoftwareMedia we want to update
     *   }
     * })
     */
    upsert<T extends SoftwareMediaUpsertArgs>(args: SelectSubset<T, SoftwareMediaUpsertArgs<ExtArgs>>): Prisma__SoftwareMediaClient<$Result.GetResult<Prisma.$SoftwareMediaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SoftwareMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareMediaCountArgs} args - Arguments to filter SoftwareMedias to count.
     * @example
     * // Count the number of SoftwareMedias
     * const count = await prisma.softwareMedia.count({
     *   where: {
     *     // ... the filter for the SoftwareMedias we want to count
     *   }
     * })
    **/
    count<T extends SoftwareMediaCountArgs>(
      args?: Subset<T, SoftwareMediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoftwareMediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SoftwareMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareMediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoftwareMediaAggregateArgs>(args: Subset<T, SoftwareMediaAggregateArgs>): Prisma.PrismaPromise<GetSoftwareMediaAggregateType<T>>

    /**
     * Group by SoftwareMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoftwareMediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoftwareMediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoftwareMediaGroupByArgs['orderBy'] }
        : { orderBy?: SoftwareMediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoftwareMediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoftwareMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SoftwareMedia model
   */
  readonly fields: SoftwareMediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SoftwareMedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoftwareMediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SoftwareMedia model
   */ 
  interface SoftwareMediaFieldRefs {
    readonly id: FieldRef<"SoftwareMedia", 'String'>
    readonly softwareId: FieldRef<"SoftwareMedia", 'String'>
    readonly type: FieldRef<"SoftwareMedia", 'MediaType'>
    readonly url: FieldRef<"SoftwareMedia", 'String'>
    readonly alt: FieldRef<"SoftwareMedia", 'String'>
    readonly order: FieldRef<"SoftwareMedia", 'Int'>
    readonly createdAt: FieldRef<"SoftwareMedia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SoftwareMedia findUnique
   */
  export type SoftwareMediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareMedia to fetch.
     */
    where: SoftwareMediaWhereUniqueInput
  }

  /**
   * SoftwareMedia findUniqueOrThrow
   */
  export type SoftwareMediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareMedia to fetch.
     */
    where: SoftwareMediaWhereUniqueInput
  }

  /**
   * SoftwareMedia findFirst
   */
  export type SoftwareMediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareMedia to fetch.
     */
    where?: SoftwareMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareMedias to fetch.
     */
    orderBy?: SoftwareMediaOrderByWithRelationInput | SoftwareMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoftwareMedias.
     */
    cursor?: SoftwareMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoftwareMedias.
     */
    distinct?: SoftwareMediaScalarFieldEnum | SoftwareMediaScalarFieldEnum[]
  }

  /**
   * SoftwareMedia findFirstOrThrow
   */
  export type SoftwareMediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareMedia to fetch.
     */
    where?: SoftwareMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareMedias to fetch.
     */
    orderBy?: SoftwareMediaOrderByWithRelationInput | SoftwareMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoftwareMedias.
     */
    cursor?: SoftwareMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoftwareMedias.
     */
    distinct?: SoftwareMediaScalarFieldEnum | SoftwareMediaScalarFieldEnum[]
  }

  /**
   * SoftwareMedia findMany
   */
  export type SoftwareMediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
    /**
     * Filter, which SoftwareMedias to fetch.
     */
    where?: SoftwareMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoftwareMedias to fetch.
     */
    orderBy?: SoftwareMediaOrderByWithRelationInput | SoftwareMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SoftwareMedias.
     */
    cursor?: SoftwareMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoftwareMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoftwareMedias.
     */
    skip?: number
    distinct?: SoftwareMediaScalarFieldEnum | SoftwareMediaScalarFieldEnum[]
  }

  /**
   * SoftwareMedia create
   */
  export type SoftwareMediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
    /**
     * The data needed to create a SoftwareMedia.
     */
    data: XOR<SoftwareMediaCreateInput, SoftwareMediaUncheckedCreateInput>
  }

  /**
   * SoftwareMedia createMany
   */
  export type SoftwareMediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SoftwareMedias.
     */
    data: SoftwareMediaCreateManyInput | SoftwareMediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SoftwareMedia update
   */
  export type SoftwareMediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
    /**
     * The data needed to update a SoftwareMedia.
     */
    data: XOR<SoftwareMediaUpdateInput, SoftwareMediaUncheckedUpdateInput>
    /**
     * Choose, which SoftwareMedia to update.
     */
    where: SoftwareMediaWhereUniqueInput
  }

  /**
   * SoftwareMedia updateMany
   */
  export type SoftwareMediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SoftwareMedias.
     */
    data: XOR<SoftwareMediaUpdateManyMutationInput, SoftwareMediaUncheckedUpdateManyInput>
    /**
     * Filter which SoftwareMedias to update
     */
    where?: SoftwareMediaWhereInput
  }

  /**
   * SoftwareMedia upsert
   */
  export type SoftwareMediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
    /**
     * The filter to search for the SoftwareMedia to update in case it exists.
     */
    where: SoftwareMediaWhereUniqueInput
    /**
     * In case the SoftwareMedia found by the `where` argument doesn't exist, create a new SoftwareMedia with this data.
     */
    create: XOR<SoftwareMediaCreateInput, SoftwareMediaUncheckedCreateInput>
    /**
     * In case the SoftwareMedia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoftwareMediaUpdateInput, SoftwareMediaUncheckedUpdateInput>
  }

  /**
   * SoftwareMedia delete
   */
  export type SoftwareMediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
    /**
     * Filter which SoftwareMedia to delete.
     */
    where: SoftwareMediaWhereUniqueInput
  }

  /**
   * SoftwareMedia deleteMany
   */
  export type SoftwareMediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoftwareMedias to delete
     */
    where?: SoftwareMediaWhereInput
  }

  /**
   * SoftwareMedia without action
   */
  export type SoftwareMediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoftwareMedia
     */
    select?: SoftwareMediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoftwareMediaInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    softwareId: string | null
    userId: string | null
    name: string | null
    email: string | null
    content: string | null
    status: $Enums.CommentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    softwareId: string | null
    userId: string | null
    name: string | null
    email: string | null
    content: string | null
    status: $Enums.CommentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    softwareId: number
    userId: number
    name: number
    email: number
    content: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    softwareId?: true
    userId?: true
    name?: true
    email?: true
    content?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    softwareId?: true
    userId?: true
    name?: true
    email?: true
    content?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    softwareId?: true
    userId?: true
    name?: true
    email?: true
    content?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    softwareId: string
    userId: string | null
    name: string | null
    email: string | null
    content: string
    status: $Enums.CommentStatus
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    softwareId?: boolean
    userId?: boolean
    name?: boolean
    email?: boolean
    content?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    user?: boolean | Comment$userArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>


  export type CommentSelectScalar = {
    id?: boolean
    softwareId?: boolean
    userId?: boolean
    name?: boolean
    email?: boolean
    content?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    user?: boolean | Comment$userArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      softwareId: string
      userId: string | null
      name: string | null
      email: string | null
      content: string
      status: $Enums.CommentStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends Comment$userArgs<ExtArgs> = {}>(args?: Subset<T, Comment$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly softwareId: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly name: FieldRef<"Comment", 'String'>
    readonly email: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly status: FieldRef<"Comment", 'CommentStatus'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment.user
   */
  export type Comment$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    softwareId: string | null
    userId: string | null
    rating: number | null
    title: string | null
    body: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    softwareId: string | null
    userId: string | null
    rating: number | null
    title: string | null
    body: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    softwareId: number
    userId: number
    rating: number
    title: number
    body: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    softwareId?: true
    userId?: true
    rating?: true
    title?: true
    body?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    softwareId?: true
    userId?: true
    rating?: true
    title?: true
    body?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    softwareId?: true
    userId?: true
    rating?: true
    title?: true
    body?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    softwareId: string
    userId: string
    rating: number
    title: string | null
    body: string | null
    createdAt: Date
    updatedAt: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    softwareId?: boolean
    userId?: boolean
    rating?: boolean
    title?: boolean
    body?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>


  export type ReviewSelectScalar = {
    id?: boolean
    softwareId?: boolean
    userId?: boolean
    rating?: boolean
    title?: boolean
    body?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      softwareId: string
      userId: string
      rating: number
      title: string | null
      body: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'String'>
    readonly softwareId: FieldRef<"Review", 'String'>
    readonly userId: FieldRef<"Review", 'String'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly title: FieldRef<"Review", 'String'>
    readonly body: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
    readonly updatedAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model SystemRequirement
   */

  export type AggregateSystemRequirement = {
    _count: SystemRequirementCountAggregateOutputType | null
    _min: SystemRequirementMinAggregateOutputType | null
    _max: SystemRequirementMaxAggregateOutputType | null
  }

  export type SystemRequirementMinAggregateOutputType = {
    id: string | null
    softwareId: string | null
    os: string | null
  }

  export type SystemRequirementMaxAggregateOutputType = {
    id: string | null
    softwareId: string | null
    os: string | null
  }

  export type SystemRequirementCountAggregateOutputType = {
    id: number
    softwareId: number
    os: number
    minimum: number
    recommended: number
    _all: number
  }


  export type SystemRequirementMinAggregateInputType = {
    id?: true
    softwareId?: true
    os?: true
  }

  export type SystemRequirementMaxAggregateInputType = {
    id?: true
    softwareId?: true
    os?: true
  }

  export type SystemRequirementCountAggregateInputType = {
    id?: true
    softwareId?: true
    os?: true
    minimum?: true
    recommended?: true
    _all?: true
  }

  export type SystemRequirementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemRequirement to aggregate.
     */
    where?: SystemRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemRequirements to fetch.
     */
    orderBy?: SystemRequirementOrderByWithRelationInput | SystemRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemRequirements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemRequirements
    **/
    _count?: true | SystemRequirementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemRequirementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemRequirementMaxAggregateInputType
  }

  export type GetSystemRequirementAggregateType<T extends SystemRequirementAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemRequirement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemRequirement[P]>
      : GetScalarType<T[P], AggregateSystemRequirement[P]>
  }




  export type SystemRequirementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemRequirementWhereInput
    orderBy?: SystemRequirementOrderByWithAggregationInput | SystemRequirementOrderByWithAggregationInput[]
    by: SystemRequirementScalarFieldEnum[] | SystemRequirementScalarFieldEnum
    having?: SystemRequirementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemRequirementCountAggregateInputType | true
    _min?: SystemRequirementMinAggregateInputType
    _max?: SystemRequirementMaxAggregateInputType
  }

  export type SystemRequirementGroupByOutputType = {
    id: string
    softwareId: string
    os: string
    minimum: JsonValue
    recommended: JsonValue | null
    _count: SystemRequirementCountAggregateOutputType | null
    _min: SystemRequirementMinAggregateOutputType | null
    _max: SystemRequirementMaxAggregateOutputType | null
  }

  type GetSystemRequirementGroupByPayload<T extends SystemRequirementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemRequirementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemRequirementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemRequirementGroupByOutputType[P]>
            : GetScalarType<T[P], SystemRequirementGroupByOutputType[P]>
        }
      >
    >


  export type SystemRequirementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    softwareId?: boolean
    os?: boolean
    minimum?: boolean
    recommended?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["systemRequirement"]>


  export type SystemRequirementSelectScalar = {
    id?: boolean
    softwareId?: boolean
    os?: boolean
    minimum?: boolean
    recommended?: boolean
  }

  export type SystemRequirementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
  }

  export type $SystemRequirementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemRequirement"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      softwareId: string
      os: string
      minimum: Prisma.JsonValue
      recommended: Prisma.JsonValue | null
    }, ExtArgs["result"]["systemRequirement"]>
    composites: {}
  }

  type SystemRequirementGetPayload<S extends boolean | null | undefined | SystemRequirementDefaultArgs> = $Result.GetResult<Prisma.$SystemRequirementPayload, S>

  type SystemRequirementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SystemRequirementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SystemRequirementCountAggregateInputType | true
    }

  export interface SystemRequirementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemRequirement'], meta: { name: 'SystemRequirement' } }
    /**
     * Find zero or one SystemRequirement that matches the filter.
     * @param {SystemRequirementFindUniqueArgs} args - Arguments to find a SystemRequirement
     * @example
     * // Get one SystemRequirement
     * const systemRequirement = await prisma.systemRequirement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemRequirementFindUniqueArgs>(args: SelectSubset<T, SystemRequirementFindUniqueArgs<ExtArgs>>): Prisma__SystemRequirementClient<$Result.GetResult<Prisma.$SystemRequirementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SystemRequirement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SystemRequirementFindUniqueOrThrowArgs} args - Arguments to find a SystemRequirement
     * @example
     * // Get one SystemRequirement
     * const systemRequirement = await prisma.systemRequirement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemRequirementFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemRequirementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemRequirementClient<$Result.GetResult<Prisma.$SystemRequirementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SystemRequirement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemRequirementFindFirstArgs} args - Arguments to find a SystemRequirement
     * @example
     * // Get one SystemRequirement
     * const systemRequirement = await prisma.systemRequirement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemRequirementFindFirstArgs>(args?: SelectSubset<T, SystemRequirementFindFirstArgs<ExtArgs>>): Prisma__SystemRequirementClient<$Result.GetResult<Prisma.$SystemRequirementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SystemRequirement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemRequirementFindFirstOrThrowArgs} args - Arguments to find a SystemRequirement
     * @example
     * // Get one SystemRequirement
     * const systemRequirement = await prisma.systemRequirement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemRequirementFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemRequirementFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemRequirementClient<$Result.GetResult<Prisma.$SystemRequirementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SystemRequirements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemRequirementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemRequirements
     * const systemRequirements = await prisma.systemRequirement.findMany()
     * 
     * // Get first 10 SystemRequirements
     * const systemRequirements = await prisma.systemRequirement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemRequirementWithIdOnly = await prisma.systemRequirement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemRequirementFindManyArgs>(args?: SelectSubset<T, SystemRequirementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemRequirementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SystemRequirement.
     * @param {SystemRequirementCreateArgs} args - Arguments to create a SystemRequirement.
     * @example
     * // Create one SystemRequirement
     * const SystemRequirement = await prisma.systemRequirement.create({
     *   data: {
     *     // ... data to create a SystemRequirement
     *   }
     * })
     * 
     */
    create<T extends SystemRequirementCreateArgs>(args: SelectSubset<T, SystemRequirementCreateArgs<ExtArgs>>): Prisma__SystemRequirementClient<$Result.GetResult<Prisma.$SystemRequirementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SystemRequirements.
     * @param {SystemRequirementCreateManyArgs} args - Arguments to create many SystemRequirements.
     * @example
     * // Create many SystemRequirements
     * const systemRequirement = await prisma.systemRequirement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemRequirementCreateManyArgs>(args?: SelectSubset<T, SystemRequirementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SystemRequirement.
     * @param {SystemRequirementDeleteArgs} args - Arguments to delete one SystemRequirement.
     * @example
     * // Delete one SystemRequirement
     * const SystemRequirement = await prisma.systemRequirement.delete({
     *   where: {
     *     // ... filter to delete one SystemRequirement
     *   }
     * })
     * 
     */
    delete<T extends SystemRequirementDeleteArgs>(args: SelectSubset<T, SystemRequirementDeleteArgs<ExtArgs>>): Prisma__SystemRequirementClient<$Result.GetResult<Prisma.$SystemRequirementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SystemRequirement.
     * @param {SystemRequirementUpdateArgs} args - Arguments to update one SystemRequirement.
     * @example
     * // Update one SystemRequirement
     * const systemRequirement = await prisma.systemRequirement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemRequirementUpdateArgs>(args: SelectSubset<T, SystemRequirementUpdateArgs<ExtArgs>>): Prisma__SystemRequirementClient<$Result.GetResult<Prisma.$SystemRequirementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SystemRequirements.
     * @param {SystemRequirementDeleteManyArgs} args - Arguments to filter SystemRequirements to delete.
     * @example
     * // Delete a few SystemRequirements
     * const { count } = await prisma.systemRequirement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemRequirementDeleteManyArgs>(args?: SelectSubset<T, SystemRequirementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemRequirements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemRequirementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemRequirements
     * const systemRequirement = await prisma.systemRequirement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemRequirementUpdateManyArgs>(args: SelectSubset<T, SystemRequirementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemRequirement.
     * @param {SystemRequirementUpsertArgs} args - Arguments to update or create a SystemRequirement.
     * @example
     * // Update or create a SystemRequirement
     * const systemRequirement = await prisma.systemRequirement.upsert({
     *   create: {
     *     // ... data to create a SystemRequirement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemRequirement we want to update
     *   }
     * })
     */
    upsert<T extends SystemRequirementUpsertArgs>(args: SelectSubset<T, SystemRequirementUpsertArgs<ExtArgs>>): Prisma__SystemRequirementClient<$Result.GetResult<Prisma.$SystemRequirementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SystemRequirements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemRequirementCountArgs} args - Arguments to filter SystemRequirements to count.
     * @example
     * // Count the number of SystemRequirements
     * const count = await prisma.systemRequirement.count({
     *   where: {
     *     // ... the filter for the SystemRequirements we want to count
     *   }
     * })
    **/
    count<T extends SystemRequirementCountArgs>(
      args?: Subset<T, SystemRequirementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemRequirementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemRequirement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemRequirementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemRequirementAggregateArgs>(args: Subset<T, SystemRequirementAggregateArgs>): Prisma.PrismaPromise<GetSystemRequirementAggregateType<T>>

    /**
     * Group by SystemRequirement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemRequirementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemRequirementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemRequirementGroupByArgs['orderBy'] }
        : { orderBy?: SystemRequirementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemRequirementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemRequirementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemRequirement model
   */
  readonly fields: SystemRequirementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemRequirement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemRequirementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemRequirement model
   */ 
  interface SystemRequirementFieldRefs {
    readonly id: FieldRef<"SystemRequirement", 'String'>
    readonly softwareId: FieldRef<"SystemRequirement", 'String'>
    readonly os: FieldRef<"SystemRequirement", 'String'>
    readonly minimum: FieldRef<"SystemRequirement", 'Json'>
    readonly recommended: FieldRef<"SystemRequirement", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * SystemRequirement findUnique
   */
  export type SystemRequirementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
    /**
     * Filter, which SystemRequirement to fetch.
     */
    where: SystemRequirementWhereUniqueInput
  }

  /**
   * SystemRequirement findUniqueOrThrow
   */
  export type SystemRequirementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
    /**
     * Filter, which SystemRequirement to fetch.
     */
    where: SystemRequirementWhereUniqueInput
  }

  /**
   * SystemRequirement findFirst
   */
  export type SystemRequirementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
    /**
     * Filter, which SystemRequirement to fetch.
     */
    where?: SystemRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemRequirements to fetch.
     */
    orderBy?: SystemRequirementOrderByWithRelationInput | SystemRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemRequirements.
     */
    cursor?: SystemRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemRequirements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemRequirements.
     */
    distinct?: SystemRequirementScalarFieldEnum | SystemRequirementScalarFieldEnum[]
  }

  /**
   * SystemRequirement findFirstOrThrow
   */
  export type SystemRequirementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
    /**
     * Filter, which SystemRequirement to fetch.
     */
    where?: SystemRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemRequirements to fetch.
     */
    orderBy?: SystemRequirementOrderByWithRelationInput | SystemRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemRequirements.
     */
    cursor?: SystemRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemRequirements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemRequirements.
     */
    distinct?: SystemRequirementScalarFieldEnum | SystemRequirementScalarFieldEnum[]
  }

  /**
   * SystemRequirement findMany
   */
  export type SystemRequirementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
    /**
     * Filter, which SystemRequirements to fetch.
     */
    where?: SystemRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemRequirements to fetch.
     */
    orderBy?: SystemRequirementOrderByWithRelationInput | SystemRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemRequirements.
     */
    cursor?: SystemRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemRequirements.
     */
    skip?: number
    distinct?: SystemRequirementScalarFieldEnum | SystemRequirementScalarFieldEnum[]
  }

  /**
   * SystemRequirement create
   */
  export type SystemRequirementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
    /**
     * The data needed to create a SystemRequirement.
     */
    data: XOR<SystemRequirementCreateInput, SystemRequirementUncheckedCreateInput>
  }

  /**
   * SystemRequirement createMany
   */
  export type SystemRequirementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemRequirements.
     */
    data: SystemRequirementCreateManyInput | SystemRequirementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemRequirement update
   */
  export type SystemRequirementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
    /**
     * The data needed to update a SystemRequirement.
     */
    data: XOR<SystemRequirementUpdateInput, SystemRequirementUncheckedUpdateInput>
    /**
     * Choose, which SystemRequirement to update.
     */
    where: SystemRequirementWhereUniqueInput
  }

  /**
   * SystemRequirement updateMany
   */
  export type SystemRequirementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemRequirements.
     */
    data: XOR<SystemRequirementUpdateManyMutationInput, SystemRequirementUncheckedUpdateManyInput>
    /**
     * Filter which SystemRequirements to update
     */
    where?: SystemRequirementWhereInput
  }

  /**
   * SystemRequirement upsert
   */
  export type SystemRequirementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
    /**
     * The filter to search for the SystemRequirement to update in case it exists.
     */
    where: SystemRequirementWhereUniqueInput
    /**
     * In case the SystemRequirement found by the `where` argument doesn't exist, create a new SystemRequirement with this data.
     */
    create: XOR<SystemRequirementCreateInput, SystemRequirementUncheckedCreateInput>
    /**
     * In case the SystemRequirement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemRequirementUpdateInput, SystemRequirementUncheckedUpdateInput>
  }

  /**
   * SystemRequirement delete
   */
  export type SystemRequirementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
    /**
     * Filter which SystemRequirement to delete.
     */
    where: SystemRequirementWhereUniqueInput
  }

  /**
   * SystemRequirement deleteMany
   */
  export type SystemRequirementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemRequirements to delete
     */
    where?: SystemRequirementWhereInput
  }

  /**
   * SystemRequirement without action
   */
  export type SystemRequirementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemRequirement
     */
    select?: SystemRequirementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemRequirementInclude<ExtArgs> | null
  }


  /**
   * Model FAQ
   */

  export type AggregateFAQ = {
    _count: FAQCountAggregateOutputType | null
    _avg: FAQAvgAggregateOutputType | null
    _sum: FAQSumAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  export type FAQAvgAggregateOutputType = {
    order: number | null
  }

  export type FAQSumAggregateOutputType = {
    order: number | null
  }

  export type FAQMinAggregateOutputType = {
    id: string | null
    softwareId: string | null
    question: string | null
    answer: string | null
    order: number | null
  }

  export type FAQMaxAggregateOutputType = {
    id: string | null
    softwareId: string | null
    question: string | null
    answer: string | null
    order: number | null
  }

  export type FAQCountAggregateOutputType = {
    id: number
    softwareId: number
    question: number
    answer: number
    order: number
    _all: number
  }


  export type FAQAvgAggregateInputType = {
    order?: true
  }

  export type FAQSumAggregateInputType = {
    order?: true
  }

  export type FAQMinAggregateInputType = {
    id?: true
    softwareId?: true
    question?: true
    answer?: true
    order?: true
  }

  export type FAQMaxAggregateInputType = {
    id?: true
    softwareId?: true
    question?: true
    answer?: true
    order?: true
  }

  export type FAQCountAggregateInputType = {
    id?: true
    softwareId?: true
    question?: true
    answer?: true
    order?: true
    _all?: true
  }

  export type FAQAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQ to aggregate.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FAQS
    **/
    _count?: true | FAQCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FAQAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FAQSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FAQMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FAQMaxAggregateInputType
  }

  export type GetFAQAggregateType<T extends FAQAggregateArgs> = {
        [P in keyof T & keyof AggregateFAQ]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFAQ[P]>
      : GetScalarType<T[P], AggregateFAQ[P]>
  }




  export type FAQGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FAQWhereInput
    orderBy?: FAQOrderByWithAggregationInput | FAQOrderByWithAggregationInput[]
    by: FAQScalarFieldEnum[] | FAQScalarFieldEnum
    having?: FAQScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FAQCountAggregateInputType | true
    _avg?: FAQAvgAggregateInputType
    _sum?: FAQSumAggregateInputType
    _min?: FAQMinAggregateInputType
    _max?: FAQMaxAggregateInputType
  }

  export type FAQGroupByOutputType = {
    id: string
    softwareId: string
    question: string
    answer: string
    order: number
    _count: FAQCountAggregateOutputType | null
    _avg: FAQAvgAggregateOutputType | null
    _sum: FAQSumAggregateOutputType | null
    _min: FAQMinAggregateOutputType | null
    _max: FAQMaxAggregateOutputType | null
  }

  type GetFAQGroupByPayload<T extends FAQGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FAQGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FAQGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FAQGroupByOutputType[P]>
            : GetScalarType<T[P], FAQGroupByOutputType[P]>
        }
      >
    >


  export type FAQSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    softwareId?: boolean
    question?: boolean
    answer?: boolean
    order?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fAQ"]>


  export type FAQSelectScalar = {
    id?: boolean
    softwareId?: boolean
    question?: boolean
    answer?: boolean
    order?: boolean
  }

  export type FAQInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
  }

  export type $FAQPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FAQ"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      softwareId: string
      question: string
      answer: string
      order: number
    }, ExtArgs["result"]["fAQ"]>
    composites: {}
  }

  type FAQGetPayload<S extends boolean | null | undefined | FAQDefaultArgs> = $Result.GetResult<Prisma.$FAQPayload, S>

  type FAQCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FAQFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FAQCountAggregateInputType | true
    }

  export interface FAQDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FAQ'], meta: { name: 'FAQ' } }
    /**
     * Find zero or one FAQ that matches the filter.
     * @param {FAQFindUniqueArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FAQFindUniqueArgs>(args: SelectSubset<T, FAQFindUniqueArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FAQ that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FAQFindUniqueOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FAQFindUniqueOrThrowArgs>(args: SelectSubset<T, FAQFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FAQ that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FAQFindFirstArgs>(args?: SelectSubset<T, FAQFindFirstArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FAQ that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindFirstOrThrowArgs} args - Arguments to find a FAQ
     * @example
     * // Get one FAQ
     * const fAQ = await prisma.fAQ.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FAQFindFirstOrThrowArgs>(args?: SelectSubset<T, FAQFindFirstOrThrowArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FAQS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FAQS
     * const fAQS = await prisma.fAQ.findMany()
     * 
     * // Get first 10 FAQS
     * const fAQS = await prisma.fAQ.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fAQWithIdOnly = await prisma.fAQ.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FAQFindManyArgs>(args?: SelectSubset<T, FAQFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FAQ.
     * @param {FAQCreateArgs} args - Arguments to create a FAQ.
     * @example
     * // Create one FAQ
     * const FAQ = await prisma.fAQ.create({
     *   data: {
     *     // ... data to create a FAQ
     *   }
     * })
     * 
     */
    create<T extends FAQCreateArgs>(args: SelectSubset<T, FAQCreateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FAQS.
     * @param {FAQCreateManyArgs} args - Arguments to create many FAQS.
     * @example
     * // Create many FAQS
     * const fAQ = await prisma.fAQ.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FAQCreateManyArgs>(args?: SelectSubset<T, FAQCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FAQ.
     * @param {FAQDeleteArgs} args - Arguments to delete one FAQ.
     * @example
     * // Delete one FAQ
     * const FAQ = await prisma.fAQ.delete({
     *   where: {
     *     // ... filter to delete one FAQ
     *   }
     * })
     * 
     */
    delete<T extends FAQDeleteArgs>(args: SelectSubset<T, FAQDeleteArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FAQ.
     * @param {FAQUpdateArgs} args - Arguments to update one FAQ.
     * @example
     * // Update one FAQ
     * const fAQ = await prisma.fAQ.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FAQUpdateArgs>(args: SelectSubset<T, FAQUpdateArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FAQS.
     * @param {FAQDeleteManyArgs} args - Arguments to filter FAQS to delete.
     * @example
     * // Delete a few FAQS
     * const { count } = await prisma.fAQ.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FAQDeleteManyArgs>(args?: SelectSubset<T, FAQDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FAQS
     * const fAQ = await prisma.fAQ.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FAQUpdateManyArgs>(args: SelectSubset<T, FAQUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FAQ.
     * @param {FAQUpsertArgs} args - Arguments to update or create a FAQ.
     * @example
     * // Update or create a FAQ
     * const fAQ = await prisma.fAQ.upsert({
     *   create: {
     *     // ... data to create a FAQ
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FAQ we want to update
     *   }
     * })
     */
    upsert<T extends FAQUpsertArgs>(args: SelectSubset<T, FAQUpsertArgs<ExtArgs>>): Prisma__FAQClient<$Result.GetResult<Prisma.$FAQPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FAQS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQCountArgs} args - Arguments to filter FAQS to count.
     * @example
     * // Count the number of FAQS
     * const count = await prisma.fAQ.count({
     *   where: {
     *     // ... the filter for the FAQS we want to count
     *   }
     * })
    **/
    count<T extends FAQCountArgs>(
      args?: Subset<T, FAQCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FAQCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FAQAggregateArgs>(args: Subset<T, FAQAggregateArgs>): Prisma.PrismaPromise<GetFAQAggregateType<T>>

    /**
     * Group by FAQ.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FAQGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FAQGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FAQGroupByArgs['orderBy'] }
        : { orderBy?: FAQGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FAQGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFAQGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FAQ model
   */
  readonly fields: FAQFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FAQ.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FAQClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FAQ model
   */ 
  interface FAQFieldRefs {
    readonly id: FieldRef<"FAQ", 'String'>
    readonly softwareId: FieldRef<"FAQ", 'String'>
    readonly question: FieldRef<"FAQ", 'String'>
    readonly answer: FieldRef<"FAQ", 'String'>
    readonly order: FieldRef<"FAQ", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FAQ findUnique
   */
  export type FAQFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findUniqueOrThrow
   */
  export type FAQFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ findFirst
   */
  export type FAQFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findFirstOrThrow
   */
  export type FAQFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
    /**
     * Filter, which FAQ to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FAQS.
     */
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ findMany
   */
  export type FAQFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
    /**
     * Filter, which FAQS to fetch.
     */
    where?: FAQWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FAQS to fetch.
     */
    orderBy?: FAQOrderByWithRelationInput | FAQOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FAQS.
     */
    cursor?: FAQWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FAQS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FAQS.
     */
    skip?: number
    distinct?: FAQScalarFieldEnum | FAQScalarFieldEnum[]
  }

  /**
   * FAQ create
   */
  export type FAQCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
    /**
     * The data needed to create a FAQ.
     */
    data: XOR<FAQCreateInput, FAQUncheckedCreateInput>
  }

  /**
   * FAQ createMany
   */
  export type FAQCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FAQS.
     */
    data: FAQCreateManyInput | FAQCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FAQ update
   */
  export type FAQUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
    /**
     * The data needed to update a FAQ.
     */
    data: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
    /**
     * Choose, which FAQ to update.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ updateMany
   */
  export type FAQUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FAQS.
     */
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyInput>
    /**
     * Filter which FAQS to update
     */
    where?: FAQWhereInput
  }

  /**
   * FAQ upsert
   */
  export type FAQUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
    /**
     * The filter to search for the FAQ to update in case it exists.
     */
    where: FAQWhereUniqueInput
    /**
     * In case the FAQ found by the `where` argument doesn't exist, create a new FAQ with this data.
     */
    create: XOR<FAQCreateInput, FAQUncheckedCreateInput>
    /**
     * In case the FAQ was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FAQUpdateInput, FAQUncheckedUpdateInput>
  }

  /**
   * FAQ delete
   */
  export type FAQDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
    /**
     * Filter which FAQ to delete.
     */
    where: FAQWhereUniqueInput
  }

  /**
   * FAQ deleteMany
   */
  export type FAQDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FAQS to delete
     */
    where?: FAQWhereInput
  }

  /**
   * FAQ without action
   */
  export type FAQDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FAQ
     */
    select?: FAQSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FAQInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    name: string | null
    role: $Enums.Role | null
    avatarUrl: string | null
    isActive: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    name: string | null
    role: $Enums.Role | null
    avatarUrl: string | null
    isActive: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    name: number
    role: number
    avatarUrl: number
    isActive: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    avatarUrl?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    avatarUrl?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    avatarUrl?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    name: string | null
    role: $Enums.Role
    avatarUrl: string | null
    isActive: boolean
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    comments?: boolean | User$commentsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | User$commentsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      comments: Prisma.$CommentPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      name: string | null
      role: $Enums.Role
      avatarUrl: string | null
      isActive: boolean
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Page
   */

  export type AggregatePage = {
    _count: PageCountAggregateOutputType | null
    _min: PageMinAggregateOutputType | null
    _max: PageMaxAggregateOutputType | null
  }

  export type PageMinAggregateOutputType = {
    id: string | null
    slug: string | null
    title: string | null
    content: string | null
    status: $Enums.PageStatus | null
    metaTitle: string | null
    metaDescription: string | null
    publishedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PageMaxAggregateOutputType = {
    id: string | null
    slug: string | null
    title: string | null
    content: string | null
    status: $Enums.PageStatus | null
    metaTitle: string | null
    metaDescription: string | null
    publishedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PageCountAggregateOutputType = {
    id: number
    slug: number
    title: number
    content: number
    status: number
    metaTitle: number
    metaDescription: number
    publishedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PageMinAggregateInputType = {
    id?: true
    slug?: true
    title?: true
    content?: true
    status?: true
    metaTitle?: true
    metaDescription?: true
    publishedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PageMaxAggregateInputType = {
    id?: true
    slug?: true
    title?: true
    content?: true
    status?: true
    metaTitle?: true
    metaDescription?: true
    publishedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PageCountAggregateInputType = {
    id?: true
    slug?: true
    title?: true
    content?: true
    status?: true
    metaTitle?: true
    metaDescription?: true
    publishedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Page to aggregate.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pages
    **/
    _count?: true | PageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageMaxAggregateInputType
  }

  export type GetPageAggregateType<T extends PageAggregateArgs> = {
        [P in keyof T & keyof AggregatePage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePage[P]>
      : GetScalarType<T[P], AggregatePage[P]>
  }




  export type PageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageWhereInput
    orderBy?: PageOrderByWithAggregationInput | PageOrderByWithAggregationInput[]
    by: PageScalarFieldEnum[] | PageScalarFieldEnum
    having?: PageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageCountAggregateInputType | true
    _min?: PageMinAggregateInputType
    _max?: PageMaxAggregateInputType
  }

  export type PageGroupByOutputType = {
    id: string
    slug: string
    title: string
    content: string
    status: $Enums.PageStatus
    metaTitle: string | null
    metaDescription: string | null
    publishedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: PageCountAggregateOutputType | null
    _min: PageMinAggregateOutputType | null
    _max: PageMaxAggregateOutputType | null
  }

  type GetPageGroupByPayload<T extends PageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageGroupByOutputType[P]>
            : GetScalarType<T[P], PageGroupByOutputType[P]>
        }
      >
    >


  export type PageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    title?: boolean
    content?: boolean
    status?: boolean
    metaTitle?: boolean
    metaDescription?: boolean
    publishedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["page"]>


  export type PageSelectScalar = {
    id?: boolean
    slug?: boolean
    title?: boolean
    content?: boolean
    status?: boolean
    metaTitle?: boolean
    metaDescription?: boolean
    publishedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $PagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Page"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      slug: string
      title: string
      content: string
      status: $Enums.PageStatus
      metaTitle: string | null
      metaDescription: string | null
      publishedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["page"]>
    composites: {}
  }

  type PageGetPayload<S extends boolean | null | undefined | PageDefaultArgs> = $Result.GetResult<Prisma.$PagePayload, S>

  type PageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PageCountAggregateInputType | true
    }

  export interface PageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Page'], meta: { name: 'Page' } }
    /**
     * Find zero or one Page that matches the filter.
     * @param {PageFindUniqueArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PageFindUniqueArgs>(args: SelectSubset<T, PageFindUniqueArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Page that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PageFindUniqueOrThrowArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PageFindUniqueOrThrowArgs>(args: SelectSubset<T, PageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Page that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindFirstArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PageFindFirstArgs>(args?: SelectSubset<T, PageFindFirstArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Page that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindFirstOrThrowArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PageFindFirstOrThrowArgs>(args?: SelectSubset<T, PageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pages
     * const pages = await prisma.page.findMany()
     * 
     * // Get first 10 Pages
     * const pages = await prisma.page.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pageWithIdOnly = await prisma.page.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PageFindManyArgs>(args?: SelectSubset<T, PageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Page.
     * @param {PageCreateArgs} args - Arguments to create a Page.
     * @example
     * // Create one Page
     * const Page = await prisma.page.create({
     *   data: {
     *     // ... data to create a Page
     *   }
     * })
     * 
     */
    create<T extends PageCreateArgs>(args: SelectSubset<T, PageCreateArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pages.
     * @param {PageCreateManyArgs} args - Arguments to create many Pages.
     * @example
     * // Create many Pages
     * const page = await prisma.page.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PageCreateManyArgs>(args?: SelectSubset<T, PageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Page.
     * @param {PageDeleteArgs} args - Arguments to delete one Page.
     * @example
     * // Delete one Page
     * const Page = await prisma.page.delete({
     *   where: {
     *     // ... filter to delete one Page
     *   }
     * })
     * 
     */
    delete<T extends PageDeleteArgs>(args: SelectSubset<T, PageDeleteArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Page.
     * @param {PageUpdateArgs} args - Arguments to update one Page.
     * @example
     * // Update one Page
     * const page = await prisma.page.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PageUpdateArgs>(args: SelectSubset<T, PageUpdateArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pages.
     * @param {PageDeleteManyArgs} args - Arguments to filter Pages to delete.
     * @example
     * // Delete a few Pages
     * const { count } = await prisma.page.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PageDeleteManyArgs>(args?: SelectSubset<T, PageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pages
     * const page = await prisma.page.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PageUpdateManyArgs>(args: SelectSubset<T, PageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Page.
     * @param {PageUpsertArgs} args - Arguments to update or create a Page.
     * @example
     * // Update or create a Page
     * const page = await prisma.page.upsert({
     *   create: {
     *     // ... data to create a Page
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Page we want to update
     *   }
     * })
     */
    upsert<T extends PageUpsertArgs>(args: SelectSubset<T, PageUpsertArgs<ExtArgs>>): Prisma__PageClient<$Result.GetResult<Prisma.$PagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageCountArgs} args - Arguments to filter Pages to count.
     * @example
     * // Count the number of Pages
     * const count = await prisma.page.count({
     *   where: {
     *     // ... the filter for the Pages we want to count
     *   }
     * })
    **/
    count<T extends PageCountArgs>(
      args?: Subset<T, PageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Page.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageAggregateArgs>(args: Subset<T, PageAggregateArgs>): Prisma.PrismaPromise<GetPageAggregateType<T>>

    /**
     * Group by Page.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageGroupByArgs['orderBy'] }
        : { orderBy?: PageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Page model
   */
  readonly fields: PageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Page.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Page model
   */ 
  interface PageFieldRefs {
    readonly id: FieldRef<"Page", 'String'>
    readonly slug: FieldRef<"Page", 'String'>
    readonly title: FieldRef<"Page", 'String'>
    readonly content: FieldRef<"Page", 'String'>
    readonly status: FieldRef<"Page", 'PageStatus'>
    readonly metaTitle: FieldRef<"Page", 'String'>
    readonly metaDescription: FieldRef<"Page", 'String'>
    readonly publishedAt: FieldRef<"Page", 'DateTime'>
    readonly createdAt: FieldRef<"Page", 'DateTime'>
    readonly updatedAt: FieldRef<"Page", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Page findUnique
   */
  export type PageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page findUniqueOrThrow
   */
  export type PageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page findFirst
   */
  export type PageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pages.
     */
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page findFirstOrThrow
   */
  export type PageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pages.
     */
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page findMany
   */
  export type PageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter, which Pages to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: PageOrderByWithRelationInput | PageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    distinct?: PageScalarFieldEnum | PageScalarFieldEnum[]
  }

  /**
   * Page create
   */
  export type PageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * The data needed to create a Page.
     */
    data: XOR<PageCreateInput, PageUncheckedCreateInput>
  }

  /**
   * Page createMany
   */
  export type PageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pages.
     */
    data: PageCreateManyInput | PageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Page update
   */
  export type PageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * The data needed to update a Page.
     */
    data: XOR<PageUpdateInput, PageUncheckedUpdateInput>
    /**
     * Choose, which Page to update.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page updateMany
   */
  export type PageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pages.
     */
    data: XOR<PageUpdateManyMutationInput, PageUncheckedUpdateManyInput>
    /**
     * Filter which Pages to update
     */
    where?: PageWhereInput
  }

  /**
   * Page upsert
   */
  export type PageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * The filter to search for the Page to update in case it exists.
     */
    where: PageWhereUniqueInput
    /**
     * In case the Page found by the `where` argument doesn't exist, create a new Page with this data.
     */
    create: XOR<PageCreateInput, PageUncheckedCreateInput>
    /**
     * In case the Page was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageUpdateInput, PageUncheckedUpdateInput>
  }

  /**
   * Page delete
   */
  export type PageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter which Page to delete.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page deleteMany
   */
  export type PageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pages to delete
     */
    where?: PageWhereInput
  }

  /**
   * Page without action
   */
  export type PageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
  }


  /**
   * Model Setting
   */

  export type AggregateSetting = {
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  export type SettingMinAggregateOutputType = {
    key: string | null
    text: string | null
    updatedAt: Date | null
  }

  export type SettingMaxAggregateOutputType = {
    key: string | null
    text: string | null
    updatedAt: Date | null
  }

  export type SettingCountAggregateOutputType = {
    key: number
    json: number
    text: number
    updatedAt: number
    _all: number
  }


  export type SettingMinAggregateInputType = {
    key?: true
    text?: true
    updatedAt?: true
  }

  export type SettingMaxAggregateInputType = {
    key?: true
    text?: true
    updatedAt?: true
  }

  export type SettingCountAggregateInputType = {
    key?: true
    json?: true
    text?: true
    updatedAt?: true
    _all?: true
  }

  export type SettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setting to aggregate.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingMaxAggregateInputType
  }

  export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetting[P]>
      : GetScalarType<T[P], AggregateSetting[P]>
  }




  export type SettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingWhereInput
    orderBy?: SettingOrderByWithAggregationInput | SettingOrderByWithAggregationInput[]
    by: SettingScalarFieldEnum[] | SettingScalarFieldEnum
    having?: SettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingCountAggregateInputType | true
    _min?: SettingMinAggregateInputType
    _max?: SettingMaxAggregateInputType
  }

  export type SettingGroupByOutputType = {
    key: string
    json: JsonValue | null
    text: string | null
    updatedAt: Date
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  type GetSettingGroupByPayload<T extends SettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingGroupByOutputType[P]>
            : GetScalarType<T[P], SettingGroupByOutputType[P]>
        }
      >
    >


  export type SettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    json?: boolean
    text?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>


  export type SettingSelectScalar = {
    key?: boolean
    json?: boolean
    text?: boolean
    updatedAt?: boolean
  }


  export type $SettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      key: string
      json: Prisma.JsonValue | null
      text: string | null
      updatedAt: Date
    }, ExtArgs["result"]["setting"]>
    composites: {}
  }

  type SettingGetPayload<S extends boolean | null | undefined | SettingDefaultArgs> = $Result.GetResult<Prisma.$SettingPayload, S>

  type SettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SettingCountAggregateInputType | true
    }

  export interface SettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setting'], meta: { name: 'Setting' } }
    /**
     * Find zero or one Setting that matches the filter.
     * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingFindUniqueArgs>(args: SelectSubset<T, SettingFindUniqueArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Setting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SettingFindUniqueOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Setting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingFindFirstArgs>(args?: SelectSubset<T, SettingFindFirstArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Setting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.setting.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.setting.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const settingWithKeyOnly = await prisma.setting.findMany({ select: { key: true } })
     * 
     */
    findMany<T extends SettingFindManyArgs>(args?: SelectSubset<T, SettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Setting.
     * @param {SettingCreateArgs} args - Arguments to create a Setting.
     * @example
     * // Create one Setting
     * const Setting = await prisma.setting.create({
     *   data: {
     *     // ... data to create a Setting
     *   }
     * })
     * 
     */
    create<T extends SettingCreateArgs>(args: SelectSubset<T, SettingCreateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Settings.
     * @param {SettingCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingCreateManyArgs>(args?: SelectSubset<T, SettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Setting.
     * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
     * @example
     * // Delete one Setting
     * const Setting = await prisma.setting.delete({
     *   where: {
     *     // ... filter to delete one Setting
     *   }
     * })
     * 
     */
    delete<T extends SettingDeleteArgs>(args: SelectSubset<T, SettingDeleteArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Setting.
     * @param {SettingUpdateArgs} args - Arguments to update one Setting.
     * @example
     * // Update one Setting
     * const setting = await prisma.setting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingUpdateArgs>(args: SelectSubset<T, SettingUpdateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Settings.
     * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.setting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingDeleteManyArgs>(args?: SelectSubset<T, SettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingUpdateManyArgs>(args: SelectSubset<T, SettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Setting.
     * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
     * @example
     * // Update or create a Setting
     * const setting = await prisma.setting.upsert({
     *   create: {
     *     // ... data to create a Setting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setting we want to update
     *   }
     * })
     */
    upsert<T extends SettingUpsertArgs>(args: SelectSubset<T, SettingUpsertArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.setting.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingCountArgs>(
      args?: Subset<T, SettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingAggregateArgs>(args: Subset<T, SettingAggregateArgs>): Prisma.PrismaPromise<GetSettingAggregateType<T>>

    /**
     * Group by Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingGroupByArgs['orderBy'] }
        : { orderBy?: SettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setting model
   */
  readonly fields: SettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setting model
   */ 
  interface SettingFieldRefs {
    readonly key: FieldRef<"Setting", 'String'>
    readonly json: FieldRef<"Setting", 'Json'>
    readonly text: FieldRef<"Setting", 'String'>
    readonly updatedAt: FieldRef<"Setting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Setting findUnique
   */
  export type SettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findUniqueOrThrow
   */
  export type SettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findFirst
   */
  export type SettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findFirstOrThrow
   */
  export type SettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findMany
   */
  export type SettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting create
   */
  export type SettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to create a Setting.
     */
    data: XOR<SettingCreateInput, SettingUncheckedCreateInput>
  }

  /**
   * Setting createMany
   */
  export type SettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting update
   */
  export type SettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to update a Setting.
     */
    data: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
    /**
     * Choose, which Setting to update.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting updateMany
   */
  export type SettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
  }

  /**
   * Setting upsert
   */
  export type SettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The filter to search for the Setting to update in case it exists.
     */
    where: SettingWhereUniqueInput
    /**
     * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
     */
    create: XOR<SettingCreateInput, SettingUncheckedCreateInput>
    /**
     * In case the Setting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
  }

  /**
   * Setting delete
   */
  export type SettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter which Setting to delete.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting deleteMany
   */
  export type SettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingWhereInput
  }

  /**
   * Setting without action
   */
  export type SettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
  }


  /**
   * Model DownloadLog
   */

  export type AggregateDownloadLog = {
    _count: DownloadLogCountAggregateOutputType | null
    _min: DownloadLogMinAggregateOutputType | null
    _max: DownloadLogMaxAggregateOutputType | null
  }

  export type DownloadLogMinAggregateOutputType = {
    id: string | null
    softwareId: string | null
    versionId: string | null
    buildId: string | null
    ip: string | null
    ua: string | null
    referer: string | null
    createdAt: Date | null
  }

  export type DownloadLogMaxAggregateOutputType = {
    id: string | null
    softwareId: string | null
    versionId: string | null
    buildId: string | null
    ip: string | null
    ua: string | null
    referer: string | null
    createdAt: Date | null
  }

  export type DownloadLogCountAggregateOutputType = {
    id: number
    softwareId: number
    versionId: number
    buildId: number
    ip: number
    ua: number
    referer: number
    createdAt: number
    _all: number
  }


  export type DownloadLogMinAggregateInputType = {
    id?: true
    softwareId?: true
    versionId?: true
    buildId?: true
    ip?: true
    ua?: true
    referer?: true
    createdAt?: true
  }

  export type DownloadLogMaxAggregateInputType = {
    id?: true
    softwareId?: true
    versionId?: true
    buildId?: true
    ip?: true
    ua?: true
    referer?: true
    createdAt?: true
  }

  export type DownloadLogCountAggregateInputType = {
    id?: true
    softwareId?: true
    versionId?: true
    buildId?: true
    ip?: true
    ua?: true
    referer?: true
    createdAt?: true
    _all?: true
  }

  export type DownloadLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DownloadLog to aggregate.
     */
    where?: DownloadLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadLogs to fetch.
     */
    orderBy?: DownloadLogOrderByWithRelationInput | DownloadLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DownloadLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DownloadLogs
    **/
    _count?: true | DownloadLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DownloadLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DownloadLogMaxAggregateInputType
  }

  export type GetDownloadLogAggregateType<T extends DownloadLogAggregateArgs> = {
        [P in keyof T & keyof AggregateDownloadLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDownloadLog[P]>
      : GetScalarType<T[P], AggregateDownloadLog[P]>
  }




  export type DownloadLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DownloadLogWhereInput
    orderBy?: DownloadLogOrderByWithAggregationInput | DownloadLogOrderByWithAggregationInput[]
    by: DownloadLogScalarFieldEnum[] | DownloadLogScalarFieldEnum
    having?: DownloadLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DownloadLogCountAggregateInputType | true
    _min?: DownloadLogMinAggregateInputType
    _max?: DownloadLogMaxAggregateInputType
  }

  export type DownloadLogGroupByOutputType = {
    id: string
    softwareId: string
    versionId: string | null
    buildId: string | null
    ip: string | null
    ua: string | null
    referer: string | null
    createdAt: Date
    _count: DownloadLogCountAggregateOutputType | null
    _min: DownloadLogMinAggregateOutputType | null
    _max: DownloadLogMaxAggregateOutputType | null
  }

  type GetDownloadLogGroupByPayload<T extends DownloadLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DownloadLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DownloadLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DownloadLogGroupByOutputType[P]>
            : GetScalarType<T[P], DownloadLogGroupByOutputType[P]>
        }
      >
    >


  export type DownloadLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    softwareId?: boolean
    versionId?: boolean
    buildId?: boolean
    ip?: boolean
    ua?: boolean
    referer?: boolean
    createdAt?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    version?: boolean | DownloadLog$versionArgs<ExtArgs>
    build?: boolean | DownloadLog$buildArgs<ExtArgs>
  }, ExtArgs["result"]["downloadLog"]>


  export type DownloadLogSelectScalar = {
    id?: boolean
    softwareId?: boolean
    versionId?: boolean
    buildId?: boolean
    ip?: boolean
    ua?: boolean
    referer?: boolean
    createdAt?: boolean
  }

  export type DownloadLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
    version?: boolean | DownloadLog$versionArgs<ExtArgs>
    build?: boolean | DownloadLog$buildArgs<ExtArgs>
  }

  export type $DownloadLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DownloadLog"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
      version: Prisma.$VersionPayload<ExtArgs> | null
      build: Prisma.$BuildPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      softwareId: string
      versionId: string | null
      buildId: string | null
      ip: string | null
      ua: string | null
      referer: string | null
      createdAt: Date
    }, ExtArgs["result"]["downloadLog"]>
    composites: {}
  }

  type DownloadLogGetPayload<S extends boolean | null | undefined | DownloadLogDefaultArgs> = $Result.GetResult<Prisma.$DownloadLogPayload, S>

  type DownloadLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DownloadLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DownloadLogCountAggregateInputType | true
    }

  export interface DownloadLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DownloadLog'], meta: { name: 'DownloadLog' } }
    /**
     * Find zero or one DownloadLog that matches the filter.
     * @param {DownloadLogFindUniqueArgs} args - Arguments to find a DownloadLog
     * @example
     * // Get one DownloadLog
     * const downloadLog = await prisma.downloadLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DownloadLogFindUniqueArgs>(args: SelectSubset<T, DownloadLogFindUniqueArgs<ExtArgs>>): Prisma__DownloadLogClient<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DownloadLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DownloadLogFindUniqueOrThrowArgs} args - Arguments to find a DownloadLog
     * @example
     * // Get one DownloadLog
     * const downloadLog = await prisma.downloadLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DownloadLogFindUniqueOrThrowArgs>(args: SelectSubset<T, DownloadLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DownloadLogClient<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DownloadLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadLogFindFirstArgs} args - Arguments to find a DownloadLog
     * @example
     * // Get one DownloadLog
     * const downloadLog = await prisma.downloadLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DownloadLogFindFirstArgs>(args?: SelectSubset<T, DownloadLogFindFirstArgs<ExtArgs>>): Prisma__DownloadLogClient<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DownloadLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadLogFindFirstOrThrowArgs} args - Arguments to find a DownloadLog
     * @example
     * // Get one DownloadLog
     * const downloadLog = await prisma.downloadLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DownloadLogFindFirstOrThrowArgs>(args?: SelectSubset<T, DownloadLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__DownloadLogClient<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DownloadLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DownloadLogs
     * const downloadLogs = await prisma.downloadLog.findMany()
     * 
     * // Get first 10 DownloadLogs
     * const downloadLogs = await prisma.downloadLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const downloadLogWithIdOnly = await prisma.downloadLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DownloadLogFindManyArgs>(args?: SelectSubset<T, DownloadLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DownloadLog.
     * @param {DownloadLogCreateArgs} args - Arguments to create a DownloadLog.
     * @example
     * // Create one DownloadLog
     * const DownloadLog = await prisma.downloadLog.create({
     *   data: {
     *     // ... data to create a DownloadLog
     *   }
     * })
     * 
     */
    create<T extends DownloadLogCreateArgs>(args: SelectSubset<T, DownloadLogCreateArgs<ExtArgs>>): Prisma__DownloadLogClient<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DownloadLogs.
     * @param {DownloadLogCreateManyArgs} args - Arguments to create many DownloadLogs.
     * @example
     * // Create many DownloadLogs
     * const downloadLog = await prisma.downloadLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DownloadLogCreateManyArgs>(args?: SelectSubset<T, DownloadLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DownloadLog.
     * @param {DownloadLogDeleteArgs} args - Arguments to delete one DownloadLog.
     * @example
     * // Delete one DownloadLog
     * const DownloadLog = await prisma.downloadLog.delete({
     *   where: {
     *     // ... filter to delete one DownloadLog
     *   }
     * })
     * 
     */
    delete<T extends DownloadLogDeleteArgs>(args: SelectSubset<T, DownloadLogDeleteArgs<ExtArgs>>): Prisma__DownloadLogClient<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DownloadLog.
     * @param {DownloadLogUpdateArgs} args - Arguments to update one DownloadLog.
     * @example
     * // Update one DownloadLog
     * const downloadLog = await prisma.downloadLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DownloadLogUpdateArgs>(args: SelectSubset<T, DownloadLogUpdateArgs<ExtArgs>>): Prisma__DownloadLogClient<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DownloadLogs.
     * @param {DownloadLogDeleteManyArgs} args - Arguments to filter DownloadLogs to delete.
     * @example
     * // Delete a few DownloadLogs
     * const { count } = await prisma.downloadLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DownloadLogDeleteManyArgs>(args?: SelectSubset<T, DownloadLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DownloadLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DownloadLogs
     * const downloadLog = await prisma.downloadLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DownloadLogUpdateManyArgs>(args: SelectSubset<T, DownloadLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DownloadLog.
     * @param {DownloadLogUpsertArgs} args - Arguments to update or create a DownloadLog.
     * @example
     * // Update or create a DownloadLog
     * const downloadLog = await prisma.downloadLog.upsert({
     *   create: {
     *     // ... data to create a DownloadLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DownloadLog we want to update
     *   }
     * })
     */
    upsert<T extends DownloadLogUpsertArgs>(args: SelectSubset<T, DownloadLogUpsertArgs<ExtArgs>>): Prisma__DownloadLogClient<$Result.GetResult<Prisma.$DownloadLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DownloadLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadLogCountArgs} args - Arguments to filter DownloadLogs to count.
     * @example
     * // Count the number of DownloadLogs
     * const count = await prisma.downloadLog.count({
     *   where: {
     *     // ... the filter for the DownloadLogs we want to count
     *   }
     * })
    **/
    count<T extends DownloadLogCountArgs>(
      args?: Subset<T, DownloadLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DownloadLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DownloadLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DownloadLogAggregateArgs>(args: Subset<T, DownloadLogAggregateArgs>): Prisma.PrismaPromise<GetDownloadLogAggregateType<T>>

    /**
     * Group by DownloadLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DownloadLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DownloadLogGroupByArgs['orderBy'] }
        : { orderBy?: DownloadLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DownloadLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDownloadLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DownloadLog model
   */
  readonly fields: DownloadLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DownloadLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DownloadLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    version<T extends DownloadLog$versionArgs<ExtArgs> = {}>(args?: Subset<T, DownloadLog$versionArgs<ExtArgs>>): Prisma__VersionClient<$Result.GetResult<Prisma.$VersionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    build<T extends DownloadLog$buildArgs<ExtArgs> = {}>(args?: Subset<T, DownloadLog$buildArgs<ExtArgs>>): Prisma__BuildClient<$Result.GetResult<Prisma.$BuildPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DownloadLog model
   */ 
  interface DownloadLogFieldRefs {
    readonly id: FieldRef<"DownloadLog", 'String'>
    readonly softwareId: FieldRef<"DownloadLog", 'String'>
    readonly versionId: FieldRef<"DownloadLog", 'String'>
    readonly buildId: FieldRef<"DownloadLog", 'String'>
    readonly ip: FieldRef<"DownloadLog", 'String'>
    readonly ua: FieldRef<"DownloadLog", 'String'>
    readonly referer: FieldRef<"DownloadLog", 'String'>
    readonly createdAt: FieldRef<"DownloadLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DownloadLog findUnique
   */
  export type DownloadLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    /**
     * Filter, which DownloadLog to fetch.
     */
    where: DownloadLogWhereUniqueInput
  }

  /**
   * DownloadLog findUniqueOrThrow
   */
  export type DownloadLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    /**
     * Filter, which DownloadLog to fetch.
     */
    where: DownloadLogWhereUniqueInput
  }

  /**
   * DownloadLog findFirst
   */
  export type DownloadLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    /**
     * Filter, which DownloadLog to fetch.
     */
    where?: DownloadLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadLogs to fetch.
     */
    orderBy?: DownloadLogOrderByWithRelationInput | DownloadLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DownloadLogs.
     */
    cursor?: DownloadLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DownloadLogs.
     */
    distinct?: DownloadLogScalarFieldEnum | DownloadLogScalarFieldEnum[]
  }

  /**
   * DownloadLog findFirstOrThrow
   */
  export type DownloadLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    /**
     * Filter, which DownloadLog to fetch.
     */
    where?: DownloadLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadLogs to fetch.
     */
    orderBy?: DownloadLogOrderByWithRelationInput | DownloadLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DownloadLogs.
     */
    cursor?: DownloadLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DownloadLogs.
     */
    distinct?: DownloadLogScalarFieldEnum | DownloadLogScalarFieldEnum[]
  }

  /**
   * DownloadLog findMany
   */
  export type DownloadLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    /**
     * Filter, which DownloadLogs to fetch.
     */
    where?: DownloadLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadLogs to fetch.
     */
    orderBy?: DownloadLogOrderByWithRelationInput | DownloadLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DownloadLogs.
     */
    cursor?: DownloadLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadLogs.
     */
    skip?: number
    distinct?: DownloadLogScalarFieldEnum | DownloadLogScalarFieldEnum[]
  }

  /**
   * DownloadLog create
   */
  export type DownloadLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    /**
     * The data needed to create a DownloadLog.
     */
    data: XOR<DownloadLogCreateInput, DownloadLogUncheckedCreateInput>
  }

  /**
   * DownloadLog createMany
   */
  export type DownloadLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DownloadLogs.
     */
    data: DownloadLogCreateManyInput | DownloadLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DownloadLog update
   */
  export type DownloadLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    /**
     * The data needed to update a DownloadLog.
     */
    data: XOR<DownloadLogUpdateInput, DownloadLogUncheckedUpdateInput>
    /**
     * Choose, which DownloadLog to update.
     */
    where: DownloadLogWhereUniqueInput
  }

  /**
   * DownloadLog updateMany
   */
  export type DownloadLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DownloadLogs.
     */
    data: XOR<DownloadLogUpdateManyMutationInput, DownloadLogUncheckedUpdateManyInput>
    /**
     * Filter which DownloadLogs to update
     */
    where?: DownloadLogWhereInput
  }

  /**
   * DownloadLog upsert
   */
  export type DownloadLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    /**
     * The filter to search for the DownloadLog to update in case it exists.
     */
    where: DownloadLogWhereUniqueInput
    /**
     * In case the DownloadLog found by the `where` argument doesn't exist, create a new DownloadLog with this data.
     */
    create: XOR<DownloadLogCreateInput, DownloadLogUncheckedCreateInput>
    /**
     * In case the DownloadLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DownloadLogUpdateInput, DownloadLogUncheckedUpdateInput>
  }

  /**
   * DownloadLog delete
   */
  export type DownloadLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
    /**
     * Filter which DownloadLog to delete.
     */
    where: DownloadLogWhereUniqueInput
  }

  /**
   * DownloadLog deleteMany
   */
  export type DownloadLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DownloadLogs to delete
     */
    where?: DownloadLogWhereInput
  }

  /**
   * DownloadLog.version
   */
  export type DownloadLog$versionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Version
     */
    select?: VersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VersionInclude<ExtArgs> | null
    where?: VersionWhereInput
  }

  /**
   * DownloadLog.build
   */
  export type DownloadLog$buildArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Build
     */
    select?: BuildSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuildInclude<ExtArgs> | null
    where?: BuildWhereInput
  }

  /**
   * DownloadLog without action
   */
  export type DownloadLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadLog
     */
    select?: DownloadLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadLogInclude<ExtArgs> | null
  }


  /**
   * Model DownloadCounter
   */

  export type AggregateDownloadCounter = {
    _count: DownloadCounterCountAggregateOutputType | null
    _avg: DownloadCounterAvgAggregateOutputType | null
    _sum: DownloadCounterSumAggregateOutputType | null
    _min: DownloadCounterMinAggregateOutputType | null
    _max: DownloadCounterMaxAggregateOutputType | null
  }

  export type DownloadCounterAvgAggregateOutputType = {
    total: number | null
  }

  export type DownloadCounterSumAggregateOutputType = {
    total: number | null
  }

  export type DownloadCounterMinAggregateOutputType = {
    softwareId: string | null
    total: number | null
    updatedAt: Date | null
  }

  export type DownloadCounterMaxAggregateOutputType = {
    softwareId: string | null
    total: number | null
    updatedAt: Date | null
  }

  export type DownloadCounterCountAggregateOutputType = {
    softwareId: number
    total: number
    updatedAt: number
    _all: number
  }


  export type DownloadCounterAvgAggregateInputType = {
    total?: true
  }

  export type DownloadCounterSumAggregateInputType = {
    total?: true
  }

  export type DownloadCounterMinAggregateInputType = {
    softwareId?: true
    total?: true
    updatedAt?: true
  }

  export type DownloadCounterMaxAggregateInputType = {
    softwareId?: true
    total?: true
    updatedAt?: true
  }

  export type DownloadCounterCountAggregateInputType = {
    softwareId?: true
    total?: true
    updatedAt?: true
    _all?: true
  }

  export type DownloadCounterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DownloadCounter to aggregate.
     */
    where?: DownloadCounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadCounters to fetch.
     */
    orderBy?: DownloadCounterOrderByWithRelationInput | DownloadCounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DownloadCounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadCounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadCounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DownloadCounters
    **/
    _count?: true | DownloadCounterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DownloadCounterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DownloadCounterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DownloadCounterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DownloadCounterMaxAggregateInputType
  }

  export type GetDownloadCounterAggregateType<T extends DownloadCounterAggregateArgs> = {
        [P in keyof T & keyof AggregateDownloadCounter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDownloadCounter[P]>
      : GetScalarType<T[P], AggregateDownloadCounter[P]>
  }




  export type DownloadCounterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DownloadCounterWhereInput
    orderBy?: DownloadCounterOrderByWithAggregationInput | DownloadCounterOrderByWithAggregationInput[]
    by: DownloadCounterScalarFieldEnum[] | DownloadCounterScalarFieldEnum
    having?: DownloadCounterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DownloadCounterCountAggregateInputType | true
    _avg?: DownloadCounterAvgAggregateInputType
    _sum?: DownloadCounterSumAggregateInputType
    _min?: DownloadCounterMinAggregateInputType
    _max?: DownloadCounterMaxAggregateInputType
  }

  export type DownloadCounterGroupByOutputType = {
    softwareId: string
    total: number
    updatedAt: Date
    _count: DownloadCounterCountAggregateOutputType | null
    _avg: DownloadCounterAvgAggregateOutputType | null
    _sum: DownloadCounterSumAggregateOutputType | null
    _min: DownloadCounterMinAggregateOutputType | null
    _max: DownloadCounterMaxAggregateOutputType | null
  }

  type GetDownloadCounterGroupByPayload<T extends DownloadCounterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DownloadCounterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DownloadCounterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DownloadCounterGroupByOutputType[P]>
            : GetScalarType<T[P], DownloadCounterGroupByOutputType[P]>
        }
      >
    >


  export type DownloadCounterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    softwareId?: boolean
    total?: boolean
    updatedAt?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["downloadCounter"]>


  export type DownloadCounterSelectScalar = {
    softwareId?: boolean
    total?: boolean
    updatedAt?: boolean
  }

  export type DownloadCounterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
  }

  export type $DownloadCounterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DownloadCounter"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      softwareId: string
      total: number
      updatedAt: Date
    }, ExtArgs["result"]["downloadCounter"]>
    composites: {}
  }

  type DownloadCounterGetPayload<S extends boolean | null | undefined | DownloadCounterDefaultArgs> = $Result.GetResult<Prisma.$DownloadCounterPayload, S>

  type DownloadCounterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DownloadCounterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DownloadCounterCountAggregateInputType | true
    }

  export interface DownloadCounterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DownloadCounter'], meta: { name: 'DownloadCounter' } }
    /**
     * Find zero or one DownloadCounter that matches the filter.
     * @param {DownloadCounterFindUniqueArgs} args - Arguments to find a DownloadCounter
     * @example
     * // Get one DownloadCounter
     * const downloadCounter = await prisma.downloadCounter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DownloadCounterFindUniqueArgs>(args: SelectSubset<T, DownloadCounterFindUniqueArgs<ExtArgs>>): Prisma__DownloadCounterClient<$Result.GetResult<Prisma.$DownloadCounterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DownloadCounter that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DownloadCounterFindUniqueOrThrowArgs} args - Arguments to find a DownloadCounter
     * @example
     * // Get one DownloadCounter
     * const downloadCounter = await prisma.downloadCounter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DownloadCounterFindUniqueOrThrowArgs>(args: SelectSubset<T, DownloadCounterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DownloadCounterClient<$Result.GetResult<Prisma.$DownloadCounterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DownloadCounter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounterFindFirstArgs} args - Arguments to find a DownloadCounter
     * @example
     * // Get one DownloadCounter
     * const downloadCounter = await prisma.downloadCounter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DownloadCounterFindFirstArgs>(args?: SelectSubset<T, DownloadCounterFindFirstArgs<ExtArgs>>): Prisma__DownloadCounterClient<$Result.GetResult<Prisma.$DownloadCounterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DownloadCounter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounterFindFirstOrThrowArgs} args - Arguments to find a DownloadCounter
     * @example
     * // Get one DownloadCounter
     * const downloadCounter = await prisma.downloadCounter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DownloadCounterFindFirstOrThrowArgs>(args?: SelectSubset<T, DownloadCounterFindFirstOrThrowArgs<ExtArgs>>): Prisma__DownloadCounterClient<$Result.GetResult<Prisma.$DownloadCounterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DownloadCounters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DownloadCounters
     * const downloadCounters = await prisma.downloadCounter.findMany()
     * 
     * // Get first 10 DownloadCounters
     * const downloadCounters = await prisma.downloadCounter.findMany({ take: 10 })
     * 
     * // Only select the `softwareId`
     * const downloadCounterWithSoftwareIdOnly = await prisma.downloadCounter.findMany({ select: { softwareId: true } })
     * 
     */
    findMany<T extends DownloadCounterFindManyArgs>(args?: SelectSubset<T, DownloadCounterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DownloadCounterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DownloadCounter.
     * @param {DownloadCounterCreateArgs} args - Arguments to create a DownloadCounter.
     * @example
     * // Create one DownloadCounter
     * const DownloadCounter = await prisma.downloadCounter.create({
     *   data: {
     *     // ... data to create a DownloadCounter
     *   }
     * })
     * 
     */
    create<T extends DownloadCounterCreateArgs>(args: SelectSubset<T, DownloadCounterCreateArgs<ExtArgs>>): Prisma__DownloadCounterClient<$Result.GetResult<Prisma.$DownloadCounterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DownloadCounters.
     * @param {DownloadCounterCreateManyArgs} args - Arguments to create many DownloadCounters.
     * @example
     * // Create many DownloadCounters
     * const downloadCounter = await prisma.downloadCounter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DownloadCounterCreateManyArgs>(args?: SelectSubset<T, DownloadCounterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DownloadCounter.
     * @param {DownloadCounterDeleteArgs} args - Arguments to delete one DownloadCounter.
     * @example
     * // Delete one DownloadCounter
     * const DownloadCounter = await prisma.downloadCounter.delete({
     *   where: {
     *     // ... filter to delete one DownloadCounter
     *   }
     * })
     * 
     */
    delete<T extends DownloadCounterDeleteArgs>(args: SelectSubset<T, DownloadCounterDeleteArgs<ExtArgs>>): Prisma__DownloadCounterClient<$Result.GetResult<Prisma.$DownloadCounterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DownloadCounter.
     * @param {DownloadCounterUpdateArgs} args - Arguments to update one DownloadCounter.
     * @example
     * // Update one DownloadCounter
     * const downloadCounter = await prisma.downloadCounter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DownloadCounterUpdateArgs>(args: SelectSubset<T, DownloadCounterUpdateArgs<ExtArgs>>): Prisma__DownloadCounterClient<$Result.GetResult<Prisma.$DownloadCounterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DownloadCounters.
     * @param {DownloadCounterDeleteManyArgs} args - Arguments to filter DownloadCounters to delete.
     * @example
     * // Delete a few DownloadCounters
     * const { count } = await prisma.downloadCounter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DownloadCounterDeleteManyArgs>(args?: SelectSubset<T, DownloadCounterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DownloadCounters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DownloadCounters
     * const downloadCounter = await prisma.downloadCounter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DownloadCounterUpdateManyArgs>(args: SelectSubset<T, DownloadCounterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DownloadCounter.
     * @param {DownloadCounterUpsertArgs} args - Arguments to update or create a DownloadCounter.
     * @example
     * // Update or create a DownloadCounter
     * const downloadCounter = await prisma.downloadCounter.upsert({
     *   create: {
     *     // ... data to create a DownloadCounter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DownloadCounter we want to update
     *   }
     * })
     */
    upsert<T extends DownloadCounterUpsertArgs>(args: SelectSubset<T, DownloadCounterUpsertArgs<ExtArgs>>): Prisma__DownloadCounterClient<$Result.GetResult<Prisma.$DownloadCounterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DownloadCounters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounterCountArgs} args - Arguments to filter DownloadCounters to count.
     * @example
     * // Count the number of DownloadCounters
     * const count = await prisma.downloadCounter.count({
     *   where: {
     *     // ... the filter for the DownloadCounters we want to count
     *   }
     * })
    **/
    count<T extends DownloadCounterCountArgs>(
      args?: Subset<T, DownloadCounterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DownloadCounterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DownloadCounter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DownloadCounterAggregateArgs>(args: Subset<T, DownloadCounterAggregateArgs>): Prisma.PrismaPromise<GetDownloadCounterAggregateType<T>>

    /**
     * Group by DownloadCounter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DownloadCounterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DownloadCounterGroupByArgs['orderBy'] }
        : { orderBy?: DownloadCounterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DownloadCounterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDownloadCounterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DownloadCounter model
   */
  readonly fields: DownloadCounterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DownloadCounter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DownloadCounterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DownloadCounter model
   */ 
  interface DownloadCounterFieldRefs {
    readonly softwareId: FieldRef<"DownloadCounter", 'String'>
    readonly total: FieldRef<"DownloadCounter", 'Int'>
    readonly updatedAt: FieldRef<"DownloadCounter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DownloadCounter findUnique
   */
  export type DownloadCounterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
    /**
     * Filter, which DownloadCounter to fetch.
     */
    where: DownloadCounterWhereUniqueInput
  }

  /**
   * DownloadCounter findUniqueOrThrow
   */
  export type DownloadCounterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
    /**
     * Filter, which DownloadCounter to fetch.
     */
    where: DownloadCounterWhereUniqueInput
  }

  /**
   * DownloadCounter findFirst
   */
  export type DownloadCounterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
    /**
     * Filter, which DownloadCounter to fetch.
     */
    where?: DownloadCounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadCounters to fetch.
     */
    orderBy?: DownloadCounterOrderByWithRelationInput | DownloadCounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DownloadCounters.
     */
    cursor?: DownloadCounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadCounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadCounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DownloadCounters.
     */
    distinct?: DownloadCounterScalarFieldEnum | DownloadCounterScalarFieldEnum[]
  }

  /**
   * DownloadCounter findFirstOrThrow
   */
  export type DownloadCounterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
    /**
     * Filter, which DownloadCounter to fetch.
     */
    where?: DownloadCounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadCounters to fetch.
     */
    orderBy?: DownloadCounterOrderByWithRelationInput | DownloadCounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DownloadCounters.
     */
    cursor?: DownloadCounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadCounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadCounters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DownloadCounters.
     */
    distinct?: DownloadCounterScalarFieldEnum | DownloadCounterScalarFieldEnum[]
  }

  /**
   * DownloadCounter findMany
   */
  export type DownloadCounterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
    /**
     * Filter, which DownloadCounters to fetch.
     */
    where?: DownloadCounterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadCounters to fetch.
     */
    orderBy?: DownloadCounterOrderByWithRelationInput | DownloadCounterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DownloadCounters.
     */
    cursor?: DownloadCounterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadCounters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadCounters.
     */
    skip?: number
    distinct?: DownloadCounterScalarFieldEnum | DownloadCounterScalarFieldEnum[]
  }

  /**
   * DownloadCounter create
   */
  export type DownloadCounterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
    /**
     * The data needed to create a DownloadCounter.
     */
    data: XOR<DownloadCounterCreateInput, DownloadCounterUncheckedCreateInput>
  }

  /**
   * DownloadCounter createMany
   */
  export type DownloadCounterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DownloadCounters.
     */
    data: DownloadCounterCreateManyInput | DownloadCounterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DownloadCounter update
   */
  export type DownloadCounterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
    /**
     * The data needed to update a DownloadCounter.
     */
    data: XOR<DownloadCounterUpdateInput, DownloadCounterUncheckedUpdateInput>
    /**
     * Choose, which DownloadCounter to update.
     */
    where: DownloadCounterWhereUniqueInput
  }

  /**
   * DownloadCounter updateMany
   */
  export type DownloadCounterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DownloadCounters.
     */
    data: XOR<DownloadCounterUpdateManyMutationInput, DownloadCounterUncheckedUpdateManyInput>
    /**
     * Filter which DownloadCounters to update
     */
    where?: DownloadCounterWhereInput
  }

  /**
   * DownloadCounter upsert
   */
  export type DownloadCounterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
    /**
     * The filter to search for the DownloadCounter to update in case it exists.
     */
    where: DownloadCounterWhereUniqueInput
    /**
     * In case the DownloadCounter found by the `where` argument doesn't exist, create a new DownloadCounter with this data.
     */
    create: XOR<DownloadCounterCreateInput, DownloadCounterUncheckedCreateInput>
    /**
     * In case the DownloadCounter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DownloadCounterUpdateInput, DownloadCounterUncheckedUpdateInput>
  }

  /**
   * DownloadCounter delete
   */
  export type DownloadCounterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
    /**
     * Filter which DownloadCounter to delete.
     */
    where: DownloadCounterWhereUniqueInput
  }

  /**
   * DownloadCounter deleteMany
   */
  export type DownloadCounterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DownloadCounters to delete
     */
    where?: DownloadCounterWhereInput
  }

  /**
   * DownloadCounter without action
   */
  export type DownloadCounterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter
     */
    select?: DownloadCounterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounterInclude<ExtArgs> | null
  }


  /**
   * Model DownloadCounter30d
   */

  export type AggregateDownloadCounter30d = {
    _count: DownloadCounter30dCountAggregateOutputType | null
    _avg: DownloadCounter30dAvgAggregateOutputType | null
    _sum: DownloadCounter30dSumAggregateOutputType | null
    _min: DownloadCounter30dMinAggregateOutputType | null
    _max: DownloadCounter30dMaxAggregateOutputType | null
  }

  export type DownloadCounter30dAvgAggregateOutputType = {
    total30d: number | null
  }

  export type DownloadCounter30dSumAggregateOutputType = {
    total30d: number | null
  }

  export type DownloadCounter30dMinAggregateOutputType = {
    softwareId: string | null
    total30d: number | null
    computedAt: Date | null
  }

  export type DownloadCounter30dMaxAggregateOutputType = {
    softwareId: string | null
    total30d: number | null
    computedAt: Date | null
  }

  export type DownloadCounter30dCountAggregateOutputType = {
    softwareId: number
    total30d: number
    computedAt: number
    _all: number
  }


  export type DownloadCounter30dAvgAggregateInputType = {
    total30d?: true
  }

  export type DownloadCounter30dSumAggregateInputType = {
    total30d?: true
  }

  export type DownloadCounter30dMinAggregateInputType = {
    softwareId?: true
    total30d?: true
    computedAt?: true
  }

  export type DownloadCounter30dMaxAggregateInputType = {
    softwareId?: true
    total30d?: true
    computedAt?: true
  }

  export type DownloadCounter30dCountAggregateInputType = {
    softwareId?: true
    total30d?: true
    computedAt?: true
    _all?: true
  }

  export type DownloadCounter30dAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DownloadCounter30d to aggregate.
     */
    where?: DownloadCounter30dWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadCounter30ds to fetch.
     */
    orderBy?: DownloadCounter30dOrderByWithRelationInput | DownloadCounter30dOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DownloadCounter30dWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadCounter30ds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadCounter30ds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DownloadCounter30ds
    **/
    _count?: true | DownloadCounter30dCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DownloadCounter30dAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DownloadCounter30dSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DownloadCounter30dMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DownloadCounter30dMaxAggregateInputType
  }

  export type GetDownloadCounter30dAggregateType<T extends DownloadCounter30dAggregateArgs> = {
        [P in keyof T & keyof AggregateDownloadCounter30d]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDownloadCounter30d[P]>
      : GetScalarType<T[P], AggregateDownloadCounter30d[P]>
  }




  export type DownloadCounter30dGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DownloadCounter30dWhereInput
    orderBy?: DownloadCounter30dOrderByWithAggregationInput | DownloadCounter30dOrderByWithAggregationInput[]
    by: DownloadCounter30dScalarFieldEnum[] | DownloadCounter30dScalarFieldEnum
    having?: DownloadCounter30dScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DownloadCounter30dCountAggregateInputType | true
    _avg?: DownloadCounter30dAvgAggregateInputType
    _sum?: DownloadCounter30dSumAggregateInputType
    _min?: DownloadCounter30dMinAggregateInputType
    _max?: DownloadCounter30dMaxAggregateInputType
  }

  export type DownloadCounter30dGroupByOutputType = {
    softwareId: string
    total30d: number
    computedAt: Date
    _count: DownloadCounter30dCountAggregateOutputType | null
    _avg: DownloadCounter30dAvgAggregateOutputType | null
    _sum: DownloadCounter30dSumAggregateOutputType | null
    _min: DownloadCounter30dMinAggregateOutputType | null
    _max: DownloadCounter30dMaxAggregateOutputType | null
  }

  type GetDownloadCounter30dGroupByPayload<T extends DownloadCounter30dGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DownloadCounter30dGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DownloadCounter30dGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DownloadCounter30dGroupByOutputType[P]>
            : GetScalarType<T[P], DownloadCounter30dGroupByOutputType[P]>
        }
      >
    >


  export type DownloadCounter30dSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    softwareId?: boolean
    total30d?: boolean
    computedAt?: boolean
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["downloadCounter30d"]>


  export type DownloadCounter30dSelectScalar = {
    softwareId?: boolean
    total30d?: boolean
    computedAt?: boolean
  }

  export type DownloadCounter30dInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    software?: boolean | SoftwareDefaultArgs<ExtArgs>
  }

  export type $DownloadCounter30dPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DownloadCounter30d"
    objects: {
      software: Prisma.$SoftwarePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      softwareId: string
      total30d: number
      computedAt: Date
    }, ExtArgs["result"]["downloadCounter30d"]>
    composites: {}
  }

  type DownloadCounter30dGetPayload<S extends boolean | null | undefined | DownloadCounter30dDefaultArgs> = $Result.GetResult<Prisma.$DownloadCounter30dPayload, S>

  type DownloadCounter30dCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DownloadCounter30dFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DownloadCounter30dCountAggregateInputType | true
    }

  export interface DownloadCounter30dDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DownloadCounter30d'], meta: { name: 'DownloadCounter30d' } }
    /**
     * Find zero or one DownloadCounter30d that matches the filter.
     * @param {DownloadCounter30dFindUniqueArgs} args - Arguments to find a DownloadCounter30d
     * @example
     * // Get one DownloadCounter30d
     * const downloadCounter30d = await prisma.downloadCounter30d.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DownloadCounter30dFindUniqueArgs>(args: SelectSubset<T, DownloadCounter30dFindUniqueArgs<ExtArgs>>): Prisma__DownloadCounter30dClient<$Result.GetResult<Prisma.$DownloadCounter30dPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DownloadCounter30d that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DownloadCounter30dFindUniqueOrThrowArgs} args - Arguments to find a DownloadCounter30d
     * @example
     * // Get one DownloadCounter30d
     * const downloadCounter30d = await prisma.downloadCounter30d.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DownloadCounter30dFindUniqueOrThrowArgs>(args: SelectSubset<T, DownloadCounter30dFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DownloadCounter30dClient<$Result.GetResult<Prisma.$DownloadCounter30dPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DownloadCounter30d that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounter30dFindFirstArgs} args - Arguments to find a DownloadCounter30d
     * @example
     * // Get one DownloadCounter30d
     * const downloadCounter30d = await prisma.downloadCounter30d.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DownloadCounter30dFindFirstArgs>(args?: SelectSubset<T, DownloadCounter30dFindFirstArgs<ExtArgs>>): Prisma__DownloadCounter30dClient<$Result.GetResult<Prisma.$DownloadCounter30dPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DownloadCounter30d that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounter30dFindFirstOrThrowArgs} args - Arguments to find a DownloadCounter30d
     * @example
     * // Get one DownloadCounter30d
     * const downloadCounter30d = await prisma.downloadCounter30d.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DownloadCounter30dFindFirstOrThrowArgs>(args?: SelectSubset<T, DownloadCounter30dFindFirstOrThrowArgs<ExtArgs>>): Prisma__DownloadCounter30dClient<$Result.GetResult<Prisma.$DownloadCounter30dPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DownloadCounter30ds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounter30dFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DownloadCounter30ds
     * const downloadCounter30ds = await prisma.downloadCounter30d.findMany()
     * 
     * // Get first 10 DownloadCounter30ds
     * const downloadCounter30ds = await prisma.downloadCounter30d.findMany({ take: 10 })
     * 
     * // Only select the `softwareId`
     * const downloadCounter30dWithSoftwareIdOnly = await prisma.downloadCounter30d.findMany({ select: { softwareId: true } })
     * 
     */
    findMany<T extends DownloadCounter30dFindManyArgs>(args?: SelectSubset<T, DownloadCounter30dFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DownloadCounter30dPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DownloadCounter30d.
     * @param {DownloadCounter30dCreateArgs} args - Arguments to create a DownloadCounter30d.
     * @example
     * // Create one DownloadCounter30d
     * const DownloadCounter30d = await prisma.downloadCounter30d.create({
     *   data: {
     *     // ... data to create a DownloadCounter30d
     *   }
     * })
     * 
     */
    create<T extends DownloadCounter30dCreateArgs>(args: SelectSubset<T, DownloadCounter30dCreateArgs<ExtArgs>>): Prisma__DownloadCounter30dClient<$Result.GetResult<Prisma.$DownloadCounter30dPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DownloadCounter30ds.
     * @param {DownloadCounter30dCreateManyArgs} args - Arguments to create many DownloadCounter30ds.
     * @example
     * // Create many DownloadCounter30ds
     * const downloadCounter30d = await prisma.downloadCounter30d.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DownloadCounter30dCreateManyArgs>(args?: SelectSubset<T, DownloadCounter30dCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DownloadCounter30d.
     * @param {DownloadCounter30dDeleteArgs} args - Arguments to delete one DownloadCounter30d.
     * @example
     * // Delete one DownloadCounter30d
     * const DownloadCounter30d = await prisma.downloadCounter30d.delete({
     *   where: {
     *     // ... filter to delete one DownloadCounter30d
     *   }
     * })
     * 
     */
    delete<T extends DownloadCounter30dDeleteArgs>(args: SelectSubset<T, DownloadCounter30dDeleteArgs<ExtArgs>>): Prisma__DownloadCounter30dClient<$Result.GetResult<Prisma.$DownloadCounter30dPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DownloadCounter30d.
     * @param {DownloadCounter30dUpdateArgs} args - Arguments to update one DownloadCounter30d.
     * @example
     * // Update one DownloadCounter30d
     * const downloadCounter30d = await prisma.downloadCounter30d.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DownloadCounter30dUpdateArgs>(args: SelectSubset<T, DownloadCounter30dUpdateArgs<ExtArgs>>): Prisma__DownloadCounter30dClient<$Result.GetResult<Prisma.$DownloadCounter30dPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DownloadCounter30ds.
     * @param {DownloadCounter30dDeleteManyArgs} args - Arguments to filter DownloadCounter30ds to delete.
     * @example
     * // Delete a few DownloadCounter30ds
     * const { count } = await prisma.downloadCounter30d.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DownloadCounter30dDeleteManyArgs>(args?: SelectSubset<T, DownloadCounter30dDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DownloadCounter30ds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounter30dUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DownloadCounter30ds
     * const downloadCounter30d = await prisma.downloadCounter30d.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DownloadCounter30dUpdateManyArgs>(args: SelectSubset<T, DownloadCounter30dUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DownloadCounter30d.
     * @param {DownloadCounter30dUpsertArgs} args - Arguments to update or create a DownloadCounter30d.
     * @example
     * // Update or create a DownloadCounter30d
     * const downloadCounter30d = await prisma.downloadCounter30d.upsert({
     *   create: {
     *     // ... data to create a DownloadCounter30d
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DownloadCounter30d we want to update
     *   }
     * })
     */
    upsert<T extends DownloadCounter30dUpsertArgs>(args: SelectSubset<T, DownloadCounter30dUpsertArgs<ExtArgs>>): Prisma__DownloadCounter30dClient<$Result.GetResult<Prisma.$DownloadCounter30dPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DownloadCounter30ds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounter30dCountArgs} args - Arguments to filter DownloadCounter30ds to count.
     * @example
     * // Count the number of DownloadCounter30ds
     * const count = await prisma.downloadCounter30d.count({
     *   where: {
     *     // ... the filter for the DownloadCounter30ds we want to count
     *   }
     * })
    **/
    count<T extends DownloadCounter30dCountArgs>(
      args?: Subset<T, DownloadCounter30dCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DownloadCounter30dCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DownloadCounter30d.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounter30dAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DownloadCounter30dAggregateArgs>(args: Subset<T, DownloadCounter30dAggregateArgs>): Prisma.PrismaPromise<GetDownloadCounter30dAggregateType<T>>

    /**
     * Group by DownloadCounter30d.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DownloadCounter30dGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DownloadCounter30dGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DownloadCounter30dGroupByArgs['orderBy'] }
        : { orderBy?: DownloadCounter30dGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DownloadCounter30dGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDownloadCounter30dGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DownloadCounter30d model
   */
  readonly fields: DownloadCounter30dFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DownloadCounter30d.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DownloadCounter30dClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    software<T extends SoftwareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoftwareDefaultArgs<ExtArgs>>): Prisma__SoftwareClient<$Result.GetResult<Prisma.$SoftwarePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DownloadCounter30d model
   */ 
  interface DownloadCounter30dFieldRefs {
    readonly softwareId: FieldRef<"DownloadCounter30d", 'String'>
    readonly total30d: FieldRef<"DownloadCounter30d", 'Int'>
    readonly computedAt: FieldRef<"DownloadCounter30d", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DownloadCounter30d findUnique
   */
  export type DownloadCounter30dFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
    /**
     * Filter, which DownloadCounter30d to fetch.
     */
    where: DownloadCounter30dWhereUniqueInput
  }

  /**
   * DownloadCounter30d findUniqueOrThrow
   */
  export type DownloadCounter30dFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
    /**
     * Filter, which DownloadCounter30d to fetch.
     */
    where: DownloadCounter30dWhereUniqueInput
  }

  /**
   * DownloadCounter30d findFirst
   */
  export type DownloadCounter30dFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
    /**
     * Filter, which DownloadCounter30d to fetch.
     */
    where?: DownloadCounter30dWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadCounter30ds to fetch.
     */
    orderBy?: DownloadCounter30dOrderByWithRelationInput | DownloadCounter30dOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DownloadCounter30ds.
     */
    cursor?: DownloadCounter30dWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadCounter30ds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadCounter30ds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DownloadCounter30ds.
     */
    distinct?: DownloadCounter30dScalarFieldEnum | DownloadCounter30dScalarFieldEnum[]
  }

  /**
   * DownloadCounter30d findFirstOrThrow
   */
  export type DownloadCounter30dFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
    /**
     * Filter, which DownloadCounter30d to fetch.
     */
    where?: DownloadCounter30dWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadCounter30ds to fetch.
     */
    orderBy?: DownloadCounter30dOrderByWithRelationInput | DownloadCounter30dOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DownloadCounter30ds.
     */
    cursor?: DownloadCounter30dWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadCounter30ds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadCounter30ds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DownloadCounter30ds.
     */
    distinct?: DownloadCounter30dScalarFieldEnum | DownloadCounter30dScalarFieldEnum[]
  }

  /**
   * DownloadCounter30d findMany
   */
  export type DownloadCounter30dFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
    /**
     * Filter, which DownloadCounter30ds to fetch.
     */
    where?: DownloadCounter30dWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DownloadCounter30ds to fetch.
     */
    orderBy?: DownloadCounter30dOrderByWithRelationInput | DownloadCounter30dOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DownloadCounter30ds.
     */
    cursor?: DownloadCounter30dWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DownloadCounter30ds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DownloadCounter30ds.
     */
    skip?: number
    distinct?: DownloadCounter30dScalarFieldEnum | DownloadCounter30dScalarFieldEnum[]
  }

  /**
   * DownloadCounter30d create
   */
  export type DownloadCounter30dCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
    /**
     * The data needed to create a DownloadCounter30d.
     */
    data: XOR<DownloadCounter30dCreateInput, DownloadCounter30dUncheckedCreateInput>
  }

  /**
   * DownloadCounter30d createMany
   */
  export type DownloadCounter30dCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DownloadCounter30ds.
     */
    data: DownloadCounter30dCreateManyInput | DownloadCounter30dCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DownloadCounter30d update
   */
  export type DownloadCounter30dUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
    /**
     * The data needed to update a DownloadCounter30d.
     */
    data: XOR<DownloadCounter30dUpdateInput, DownloadCounter30dUncheckedUpdateInput>
    /**
     * Choose, which DownloadCounter30d to update.
     */
    where: DownloadCounter30dWhereUniqueInput
  }

  /**
   * DownloadCounter30d updateMany
   */
  export type DownloadCounter30dUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DownloadCounter30ds.
     */
    data: XOR<DownloadCounter30dUpdateManyMutationInput, DownloadCounter30dUncheckedUpdateManyInput>
    /**
     * Filter which DownloadCounter30ds to update
     */
    where?: DownloadCounter30dWhereInput
  }

  /**
   * DownloadCounter30d upsert
   */
  export type DownloadCounter30dUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
    /**
     * The filter to search for the DownloadCounter30d to update in case it exists.
     */
    where: DownloadCounter30dWhereUniqueInput
    /**
     * In case the DownloadCounter30d found by the `where` argument doesn't exist, create a new DownloadCounter30d with this data.
     */
    create: XOR<DownloadCounter30dCreateInput, DownloadCounter30dUncheckedCreateInput>
    /**
     * In case the DownloadCounter30d was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DownloadCounter30dUpdateInput, DownloadCounter30dUncheckedUpdateInput>
  }

  /**
   * DownloadCounter30d delete
   */
  export type DownloadCounter30dDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
    /**
     * Filter which DownloadCounter30d to delete.
     */
    where: DownloadCounter30dWhereUniqueInput
  }

  /**
   * DownloadCounter30d deleteMany
   */
  export type DownloadCounter30dDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DownloadCounter30ds to delete
     */
    where?: DownloadCounter30dWhereInput
  }

  /**
   * DownloadCounter30d without action
   */
  export type DownloadCounter30dDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DownloadCounter30d
     */
    select?: DownloadCounter30dSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DownloadCounter30dInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    parentId: 'parentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    createdAt: 'createdAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const SoftwareCategoryScalarFieldEnum: {
    softwareId: 'softwareId',
    categoryId: 'categoryId'
  };

  export type SoftwareCategoryScalarFieldEnum = (typeof SoftwareCategoryScalarFieldEnum)[keyof typeof SoftwareCategoryScalarFieldEnum]


  export const VendorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    website: 'website',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  export const SoftwareScalarFieldEnum: {
    id: 'id',
    slug: 'slug',
    name: 'name',
    license: 'license',
    homepage: 'homepage',
    shortDesc: 'shortDesc',
    longDesc: 'longDesc',
    os: 'os',
    iconUrl: 'iconUrl',
    heroUrl: 'heroUrl',
    ratingsAvg: 'ratingsAvg',
    ratingsCount: 'ratingsCount',
    isLatest: 'isLatest',
    isUpdated: 'isUpdated',
    isRecommended: 'isRecommended',
    isNew: 'isNew',
    lastUpdatedAt: 'lastUpdatedAt',
    publishedAt: 'publishedAt',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    vendorId: 'vendorId'
  };

  export type SoftwareScalarFieldEnum = (typeof SoftwareScalarFieldEnum)[keyof typeof SoftwareScalarFieldEnum]


  export const VersionScalarFieldEnum: {
    id: 'id',
    softwareId: 'softwareId',
    version: 'version',
    osLabel: 'osLabel',
    license: 'license',
    changelog: 'changelog',
    releasedAt: 'releasedAt',
    createdAt: 'createdAt'
  };

  export type VersionScalarFieldEnum = (typeof VersionScalarFieldEnum)[keyof typeof VersionScalarFieldEnum]


  export const BuildScalarFieldEnum: {
    id: 'id',
    versionId: 'versionId',
    os: 'os',
    arch: 'arch',
    buildType: 'buildType',
    sizeMB: 'sizeMB',
    fileSize: 'fileSize',
    sha256: 'sha256',
    downloadUrl: 'downloadUrl',
    createdAt: 'createdAt'
  };

  export type BuildScalarFieldEnum = (typeof BuildScalarFieldEnum)[keyof typeof BuildScalarFieldEnum]


  export const MirrorScalarFieldEnum: {
    id: 'id',
    buildId: 'buildId',
    title: 'title',
    url: 'url',
    priority: 'priority'
  };

  export type MirrorScalarFieldEnum = (typeof MirrorScalarFieldEnum)[keyof typeof MirrorScalarFieldEnum]


  export const SoftwareMediaScalarFieldEnum: {
    id: 'id',
    softwareId: 'softwareId',
    type: 'type',
    url: 'url',
    alt: 'alt',
    order: 'order',
    createdAt: 'createdAt'
  };

  export type SoftwareMediaScalarFieldEnum = (typeof SoftwareMediaScalarFieldEnum)[keyof typeof SoftwareMediaScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    softwareId: 'softwareId',
    userId: 'userId',
    name: 'name',
    email: 'email',
    content: 'content',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    softwareId: 'softwareId',
    userId: 'userId',
    rating: 'rating',
    title: 'title',
    body: 'body',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const SystemRequirementScalarFieldEnum: {
    id: 'id',
    softwareId: 'softwareId',
    os: 'os',
    minimum: 'minimum',
    recommended: 'recommended'
  };

  export type SystemRequirementScalarFieldEnum = (typeof SystemRequirementScalarFieldEnum)[keyof typeof SystemRequirementScalarFieldEnum]


  export const FAQScalarFieldEnum: {
    id: 'id',
    softwareId: 'softwareId',
    question: 'question',
    answer: 'answer',
    order: 'order'
  };

  export type FAQScalarFieldEnum = (typeof FAQScalarFieldEnum)[keyof typeof FAQScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    name: 'name',
    role: 'role',
    avatarUrl: 'avatarUrl',
    isActive: 'isActive',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PageScalarFieldEnum: {
    id: 'id',
    slug: 'slug',
    title: 'title',
    content: 'content',
    status: 'status',
    metaTitle: 'metaTitle',
    metaDescription: 'metaDescription',
    publishedAt: 'publishedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PageScalarFieldEnum = (typeof PageScalarFieldEnum)[keyof typeof PageScalarFieldEnum]


  export const SettingScalarFieldEnum: {
    key: 'key',
    json: 'json',
    text: 'text',
    updatedAt: 'updatedAt'
  };

  export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


  export const DownloadLogScalarFieldEnum: {
    id: 'id',
    softwareId: 'softwareId',
    versionId: 'versionId',
    buildId: 'buildId',
    ip: 'ip',
    ua: 'ua',
    referer: 'referer',
    createdAt: 'createdAt'
  };

  export type DownloadLogScalarFieldEnum = (typeof DownloadLogScalarFieldEnum)[keyof typeof DownloadLogScalarFieldEnum]


  export const DownloadCounterScalarFieldEnum: {
    softwareId: 'softwareId',
    total: 'total',
    updatedAt: 'updatedAt'
  };

  export type DownloadCounterScalarFieldEnum = (typeof DownloadCounterScalarFieldEnum)[keyof typeof DownloadCounterScalarFieldEnum]


  export const DownloadCounter30dScalarFieldEnum: {
    softwareId: 'softwareId',
    total30d: 'total30d',
    computedAt: 'computedAt'
  };

  export type DownloadCounter30dScalarFieldEnum = (typeof DownloadCounter30dScalarFieldEnum)[keyof typeof DownloadCounter30dScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BuildType'
   */
  export type EnumBuildTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BuildType'>
    


  /**
   * Reference to a field of type 'MediaType'
   */
  export type EnumMediaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MediaType'>
    


  /**
   * Reference to a field of type 'CommentStatus'
   */
  export type EnumCommentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommentStatus'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'PageStatus'
   */
  export type EnumPageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PageStatus'>
    
  /**
   * Deep Input Types
   */


  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    software?: SoftwareCategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: CategoryOrderByWithRelationInput
    children?: CategoryOrderByRelationAggregateInput
    software?: SoftwareCategoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parent?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    children?: CategoryListRelationFilter
    software?: SoftwareCategoryListRelationFilter
  }, "id" | "slug">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    slug?: StringWithAggregatesFilter<"Category"> | string
    parentId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    slug?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    softwares?: SoftwareListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    softwares?: SoftwareOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    name?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    softwares?: SoftwareListRelationFilter
  }, "id" | "slug">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    slug?: StringWithAggregatesFilter<"Tag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type SoftwareCategoryWhereInput = {
    AND?: SoftwareCategoryWhereInput | SoftwareCategoryWhereInput[]
    OR?: SoftwareCategoryWhereInput[]
    NOT?: SoftwareCategoryWhereInput | SoftwareCategoryWhereInput[]
    softwareId?: StringFilter<"SoftwareCategory"> | string
    categoryId?: StringFilter<"SoftwareCategory"> | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type SoftwareCategoryOrderByWithRelationInput = {
    softwareId?: SortOrder
    categoryId?: SortOrder
    software?: SoftwareOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
  }

  export type SoftwareCategoryWhereUniqueInput = Prisma.AtLeast<{
    softwareId_categoryId?: SoftwareCategorySoftwareIdCategoryIdCompoundUniqueInput
    AND?: SoftwareCategoryWhereInput | SoftwareCategoryWhereInput[]
    OR?: SoftwareCategoryWhereInput[]
    NOT?: SoftwareCategoryWhereInput | SoftwareCategoryWhereInput[]
    softwareId?: StringFilter<"SoftwareCategory"> | string
    categoryId?: StringFilter<"SoftwareCategory"> | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }, "softwareId_categoryId">

  export type SoftwareCategoryOrderByWithAggregationInput = {
    softwareId?: SortOrder
    categoryId?: SortOrder
    _count?: SoftwareCategoryCountOrderByAggregateInput
    _max?: SoftwareCategoryMaxOrderByAggregateInput
    _min?: SoftwareCategoryMinOrderByAggregateInput
  }

  export type SoftwareCategoryScalarWhereWithAggregatesInput = {
    AND?: SoftwareCategoryScalarWhereWithAggregatesInput | SoftwareCategoryScalarWhereWithAggregatesInput[]
    OR?: SoftwareCategoryScalarWhereWithAggregatesInput[]
    NOT?: SoftwareCategoryScalarWhereWithAggregatesInput | SoftwareCategoryScalarWhereWithAggregatesInput[]
    softwareId?: StringWithAggregatesFilter<"SoftwareCategory"> | string
    categoryId?: StringWithAggregatesFilter<"SoftwareCategory"> | string
  }

  export type VendorWhereInput = {
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    id?: StringFilter<"Vendor"> | string
    name?: StringFilter<"Vendor"> | string
    slug?: StringFilter<"Vendor"> | string
    website?: StringNullableFilter<"Vendor"> | string | null
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeFilter<"Vendor"> | Date | string
    softwares?: SoftwareListRelationFilter
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    website?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    softwares?: SoftwareOrderByRelationAggregateInput
  }

  export type VendorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: VendorWhereInput | VendorWhereInput[]
    OR?: VendorWhereInput[]
    NOT?: VendorWhereInput | VendorWhereInput[]
    name?: StringFilter<"Vendor"> | string
    website?: StringNullableFilter<"Vendor"> | string | null
    createdAt?: DateTimeFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeFilter<"Vendor"> | Date | string
    softwares?: SoftwareListRelationFilter
  }, "id" | "slug">

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    website?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VendorCountOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    OR?: VendorScalarWhereWithAggregatesInput[]
    NOT?: VendorScalarWhereWithAggregatesInput | VendorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vendor"> | string
    name?: StringWithAggregatesFilter<"Vendor"> | string
    slug?: StringWithAggregatesFilter<"Vendor"> | string
    website?: StringNullableWithAggregatesFilter<"Vendor"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Vendor"> | Date | string
  }

  export type SoftwareWhereInput = {
    AND?: SoftwareWhereInput | SoftwareWhereInput[]
    OR?: SoftwareWhereInput[]
    NOT?: SoftwareWhereInput | SoftwareWhereInput[]
    id?: StringFilter<"Software"> | string
    slug?: StringFilter<"Software"> | string
    name?: StringFilter<"Software"> | string
    license?: StringNullableFilter<"Software"> | string | null
    homepage?: StringNullableFilter<"Software"> | string | null
    shortDesc?: StringNullableFilter<"Software"> | string | null
    longDesc?: StringNullableFilter<"Software"> | string | null
    os?: JsonNullableFilter<"Software">
    iconUrl?: StringNullableFilter<"Software"> | string | null
    heroUrl?: StringNullableFilter<"Software"> | string | null
    ratingsAvg?: FloatFilter<"Software"> | number
    ratingsCount?: IntFilter<"Software"> | number
    isLatest?: BoolFilter<"Software"> | boolean
    isUpdated?: BoolFilter<"Software"> | boolean
    isRecommended?: BoolFilter<"Software"> | boolean
    isNew?: BoolFilter<"Software"> | boolean
    lastUpdatedAt?: DateTimeFilter<"Software"> | Date | string
    publishedAt?: DateTimeNullableFilter<"Software"> | Date | string | null
    status?: StringFilter<"Software"> | string
    createdAt?: DateTimeFilter<"Software"> | Date | string
    updatedAt?: DateTimeFilter<"Software"> | Date | string
    vendorId?: StringNullableFilter<"Software"> | string | null
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    categories?: SoftwareCategoryListRelationFilter
    versions?: VersionListRelationFilter
    media?: SoftwareMediaListRelationFilter
    faqs?: FAQListRelationFilter
    requirements?: SystemRequirementListRelationFilter
    comments?: CommentListRelationFilter
    tags?: TagListRelationFilter
    reviews?: ReviewListRelationFilter
    logs?: DownloadLogListRelationFilter
    counter?: XOR<DownloadCounterNullableRelationFilter, DownloadCounterWhereInput> | null
    counter30d?: XOR<DownloadCounter30dNullableRelationFilter, DownloadCounter30dWhereInput> | null
  }

  export type SoftwareOrderByWithRelationInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    license?: SortOrderInput | SortOrder
    homepage?: SortOrderInput | SortOrder
    shortDesc?: SortOrderInput | SortOrder
    longDesc?: SortOrderInput | SortOrder
    os?: SortOrderInput | SortOrder
    iconUrl?: SortOrderInput | SortOrder
    heroUrl?: SortOrderInput | SortOrder
    ratingsAvg?: SortOrder
    ratingsCount?: SortOrder
    isLatest?: SortOrder
    isUpdated?: SortOrder
    isRecommended?: SortOrder
    isNew?: SortOrder
    lastUpdatedAt?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vendorId?: SortOrderInput | SortOrder
    vendor?: VendorOrderByWithRelationInput
    categories?: SoftwareCategoryOrderByRelationAggregateInput
    versions?: VersionOrderByRelationAggregateInput
    media?: SoftwareMediaOrderByRelationAggregateInput
    faqs?: FAQOrderByRelationAggregateInput
    requirements?: SystemRequirementOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    tags?: TagOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    logs?: DownloadLogOrderByRelationAggregateInput
    counter?: DownloadCounterOrderByWithRelationInput
    counter30d?: DownloadCounter30dOrderByWithRelationInput
  }

  export type SoftwareWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: SoftwareWhereInput | SoftwareWhereInput[]
    OR?: SoftwareWhereInput[]
    NOT?: SoftwareWhereInput | SoftwareWhereInput[]
    name?: StringFilter<"Software"> | string
    license?: StringNullableFilter<"Software"> | string | null
    homepage?: StringNullableFilter<"Software"> | string | null
    shortDesc?: StringNullableFilter<"Software"> | string | null
    longDesc?: StringNullableFilter<"Software"> | string | null
    os?: JsonNullableFilter<"Software">
    iconUrl?: StringNullableFilter<"Software"> | string | null
    heroUrl?: StringNullableFilter<"Software"> | string | null
    ratingsAvg?: FloatFilter<"Software"> | number
    ratingsCount?: IntFilter<"Software"> | number
    isLatest?: BoolFilter<"Software"> | boolean
    isUpdated?: BoolFilter<"Software"> | boolean
    isRecommended?: BoolFilter<"Software"> | boolean
    isNew?: BoolFilter<"Software"> | boolean
    lastUpdatedAt?: DateTimeFilter<"Software"> | Date | string
    publishedAt?: DateTimeNullableFilter<"Software"> | Date | string | null
    status?: StringFilter<"Software"> | string
    createdAt?: DateTimeFilter<"Software"> | Date | string
    updatedAt?: DateTimeFilter<"Software"> | Date | string
    vendorId?: StringNullableFilter<"Software"> | string | null
    vendor?: XOR<VendorNullableRelationFilter, VendorWhereInput> | null
    categories?: SoftwareCategoryListRelationFilter
    versions?: VersionListRelationFilter
    media?: SoftwareMediaListRelationFilter
    faqs?: FAQListRelationFilter
    requirements?: SystemRequirementListRelationFilter
    comments?: CommentListRelationFilter
    tags?: TagListRelationFilter
    reviews?: ReviewListRelationFilter
    logs?: DownloadLogListRelationFilter
    counter?: XOR<DownloadCounterNullableRelationFilter, DownloadCounterWhereInput> | null
    counter30d?: XOR<DownloadCounter30dNullableRelationFilter, DownloadCounter30dWhereInput> | null
  }, "id" | "slug">

  export type SoftwareOrderByWithAggregationInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    license?: SortOrderInput | SortOrder
    homepage?: SortOrderInput | SortOrder
    shortDesc?: SortOrderInput | SortOrder
    longDesc?: SortOrderInput | SortOrder
    os?: SortOrderInput | SortOrder
    iconUrl?: SortOrderInput | SortOrder
    heroUrl?: SortOrderInput | SortOrder
    ratingsAvg?: SortOrder
    ratingsCount?: SortOrder
    isLatest?: SortOrder
    isUpdated?: SortOrder
    isRecommended?: SortOrder
    isNew?: SortOrder
    lastUpdatedAt?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vendorId?: SortOrderInput | SortOrder
    _count?: SoftwareCountOrderByAggregateInput
    _avg?: SoftwareAvgOrderByAggregateInput
    _max?: SoftwareMaxOrderByAggregateInput
    _min?: SoftwareMinOrderByAggregateInput
    _sum?: SoftwareSumOrderByAggregateInput
  }

  export type SoftwareScalarWhereWithAggregatesInput = {
    AND?: SoftwareScalarWhereWithAggregatesInput | SoftwareScalarWhereWithAggregatesInput[]
    OR?: SoftwareScalarWhereWithAggregatesInput[]
    NOT?: SoftwareScalarWhereWithAggregatesInput | SoftwareScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Software"> | string
    slug?: StringWithAggregatesFilter<"Software"> | string
    name?: StringWithAggregatesFilter<"Software"> | string
    license?: StringNullableWithAggregatesFilter<"Software"> | string | null
    homepage?: StringNullableWithAggregatesFilter<"Software"> | string | null
    shortDesc?: StringNullableWithAggregatesFilter<"Software"> | string | null
    longDesc?: StringNullableWithAggregatesFilter<"Software"> | string | null
    os?: JsonNullableWithAggregatesFilter<"Software">
    iconUrl?: StringNullableWithAggregatesFilter<"Software"> | string | null
    heroUrl?: StringNullableWithAggregatesFilter<"Software"> | string | null
    ratingsAvg?: FloatWithAggregatesFilter<"Software"> | number
    ratingsCount?: IntWithAggregatesFilter<"Software"> | number
    isLatest?: BoolWithAggregatesFilter<"Software"> | boolean
    isUpdated?: BoolWithAggregatesFilter<"Software"> | boolean
    isRecommended?: BoolWithAggregatesFilter<"Software"> | boolean
    isNew?: BoolWithAggregatesFilter<"Software"> | boolean
    lastUpdatedAt?: DateTimeWithAggregatesFilter<"Software"> | Date | string
    publishedAt?: DateTimeNullableWithAggregatesFilter<"Software"> | Date | string | null
    status?: StringWithAggregatesFilter<"Software"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Software"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Software"> | Date | string
    vendorId?: StringNullableWithAggregatesFilter<"Software"> | string | null
  }

  export type VersionWhereInput = {
    AND?: VersionWhereInput | VersionWhereInput[]
    OR?: VersionWhereInput[]
    NOT?: VersionWhereInput | VersionWhereInput[]
    id?: StringFilter<"Version"> | string
    softwareId?: StringFilter<"Version"> | string
    version?: StringFilter<"Version"> | string
    osLabel?: StringNullableFilter<"Version"> | string | null
    license?: StringNullableFilter<"Version"> | string | null
    changelog?: StringNullableFilter<"Version"> | string | null
    releasedAt?: DateTimeNullableFilter<"Version"> | Date | string | null
    createdAt?: DateTimeFilter<"Version"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    builds?: BuildListRelationFilter
    logs?: DownloadLogListRelationFilter
  }

  export type VersionOrderByWithRelationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    version?: SortOrder
    osLabel?: SortOrderInput | SortOrder
    license?: SortOrderInput | SortOrder
    changelog?: SortOrderInput | SortOrder
    releasedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    software?: SoftwareOrderByWithRelationInput
    builds?: BuildOrderByRelationAggregateInput
    logs?: DownloadLogOrderByRelationAggregateInput
  }

  export type VersionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    softwareId_version?: VersionSoftwareIdVersionCompoundUniqueInput
    AND?: VersionWhereInput | VersionWhereInput[]
    OR?: VersionWhereInput[]
    NOT?: VersionWhereInput | VersionWhereInput[]
    softwareId?: StringFilter<"Version"> | string
    version?: StringFilter<"Version"> | string
    osLabel?: StringNullableFilter<"Version"> | string | null
    license?: StringNullableFilter<"Version"> | string | null
    changelog?: StringNullableFilter<"Version"> | string | null
    releasedAt?: DateTimeNullableFilter<"Version"> | Date | string | null
    createdAt?: DateTimeFilter<"Version"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    builds?: BuildListRelationFilter
    logs?: DownloadLogListRelationFilter
  }, "id" | "softwareId_version">

  export type VersionOrderByWithAggregationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    version?: SortOrder
    osLabel?: SortOrderInput | SortOrder
    license?: SortOrderInput | SortOrder
    changelog?: SortOrderInput | SortOrder
    releasedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: VersionCountOrderByAggregateInput
    _max?: VersionMaxOrderByAggregateInput
    _min?: VersionMinOrderByAggregateInput
  }

  export type VersionScalarWhereWithAggregatesInput = {
    AND?: VersionScalarWhereWithAggregatesInput | VersionScalarWhereWithAggregatesInput[]
    OR?: VersionScalarWhereWithAggregatesInput[]
    NOT?: VersionScalarWhereWithAggregatesInput | VersionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Version"> | string
    softwareId?: StringWithAggregatesFilter<"Version"> | string
    version?: StringWithAggregatesFilter<"Version"> | string
    osLabel?: StringNullableWithAggregatesFilter<"Version"> | string | null
    license?: StringNullableWithAggregatesFilter<"Version"> | string | null
    changelog?: StringNullableWithAggregatesFilter<"Version"> | string | null
    releasedAt?: DateTimeNullableWithAggregatesFilter<"Version"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Version"> | Date | string
  }

  export type BuildWhereInput = {
    AND?: BuildWhereInput | BuildWhereInput[]
    OR?: BuildWhereInput[]
    NOT?: BuildWhereInput | BuildWhereInput[]
    id?: StringFilter<"Build"> | string
    versionId?: StringFilter<"Build"> | string
    os?: StringNullableFilter<"Build"> | string | null
    arch?: StringNullableFilter<"Build"> | string | null
    buildType?: EnumBuildTypeNullableFilter<"Build"> | $Enums.BuildType | null
    sizeMB?: IntNullableFilter<"Build"> | number | null
    fileSize?: StringNullableFilter<"Build"> | string | null
    sha256?: StringNullableFilter<"Build"> | string | null
    downloadUrl?: StringNullableFilter<"Build"> | string | null
    createdAt?: DateTimeFilter<"Build"> | Date | string
    version?: XOR<VersionRelationFilter, VersionWhereInput>
    mirrors?: MirrorListRelationFilter
    logs?: DownloadLogListRelationFilter
  }

  export type BuildOrderByWithRelationInput = {
    id?: SortOrder
    versionId?: SortOrder
    os?: SortOrderInput | SortOrder
    arch?: SortOrderInput | SortOrder
    buildType?: SortOrderInput | SortOrder
    sizeMB?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    sha256?: SortOrderInput | SortOrder
    downloadUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    version?: VersionOrderByWithRelationInput
    mirrors?: MirrorOrderByRelationAggregateInput
    logs?: DownloadLogOrderByRelationAggregateInput
  }

  export type BuildWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BuildWhereInput | BuildWhereInput[]
    OR?: BuildWhereInput[]
    NOT?: BuildWhereInput | BuildWhereInput[]
    versionId?: StringFilter<"Build"> | string
    os?: StringNullableFilter<"Build"> | string | null
    arch?: StringNullableFilter<"Build"> | string | null
    buildType?: EnumBuildTypeNullableFilter<"Build"> | $Enums.BuildType | null
    sizeMB?: IntNullableFilter<"Build"> | number | null
    fileSize?: StringNullableFilter<"Build"> | string | null
    sha256?: StringNullableFilter<"Build"> | string | null
    downloadUrl?: StringNullableFilter<"Build"> | string | null
    createdAt?: DateTimeFilter<"Build"> | Date | string
    version?: XOR<VersionRelationFilter, VersionWhereInput>
    mirrors?: MirrorListRelationFilter
    logs?: DownloadLogListRelationFilter
  }, "id">

  export type BuildOrderByWithAggregationInput = {
    id?: SortOrder
    versionId?: SortOrder
    os?: SortOrderInput | SortOrder
    arch?: SortOrderInput | SortOrder
    buildType?: SortOrderInput | SortOrder
    sizeMB?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    sha256?: SortOrderInput | SortOrder
    downloadUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: BuildCountOrderByAggregateInput
    _avg?: BuildAvgOrderByAggregateInput
    _max?: BuildMaxOrderByAggregateInput
    _min?: BuildMinOrderByAggregateInput
    _sum?: BuildSumOrderByAggregateInput
  }

  export type BuildScalarWhereWithAggregatesInput = {
    AND?: BuildScalarWhereWithAggregatesInput | BuildScalarWhereWithAggregatesInput[]
    OR?: BuildScalarWhereWithAggregatesInput[]
    NOT?: BuildScalarWhereWithAggregatesInput | BuildScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Build"> | string
    versionId?: StringWithAggregatesFilter<"Build"> | string
    os?: StringNullableWithAggregatesFilter<"Build"> | string | null
    arch?: StringNullableWithAggregatesFilter<"Build"> | string | null
    buildType?: EnumBuildTypeNullableWithAggregatesFilter<"Build"> | $Enums.BuildType | null
    sizeMB?: IntNullableWithAggregatesFilter<"Build"> | number | null
    fileSize?: StringNullableWithAggregatesFilter<"Build"> | string | null
    sha256?: StringNullableWithAggregatesFilter<"Build"> | string | null
    downloadUrl?: StringNullableWithAggregatesFilter<"Build"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Build"> | Date | string
  }

  export type MirrorWhereInput = {
    AND?: MirrorWhereInput | MirrorWhereInput[]
    OR?: MirrorWhereInput[]
    NOT?: MirrorWhereInput | MirrorWhereInput[]
    id?: StringFilter<"Mirror"> | string
    buildId?: StringFilter<"Mirror"> | string
    title?: StringFilter<"Mirror"> | string
    url?: StringFilter<"Mirror"> | string
    priority?: IntFilter<"Mirror"> | number
    build?: XOR<BuildRelationFilter, BuildWhereInput>
  }

  export type MirrorOrderByWithRelationInput = {
    id?: SortOrder
    buildId?: SortOrder
    title?: SortOrder
    url?: SortOrder
    priority?: SortOrder
    build?: BuildOrderByWithRelationInput
  }

  export type MirrorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MirrorWhereInput | MirrorWhereInput[]
    OR?: MirrorWhereInput[]
    NOT?: MirrorWhereInput | MirrorWhereInput[]
    buildId?: StringFilter<"Mirror"> | string
    title?: StringFilter<"Mirror"> | string
    url?: StringFilter<"Mirror"> | string
    priority?: IntFilter<"Mirror"> | number
    build?: XOR<BuildRelationFilter, BuildWhereInput>
  }, "id">

  export type MirrorOrderByWithAggregationInput = {
    id?: SortOrder
    buildId?: SortOrder
    title?: SortOrder
    url?: SortOrder
    priority?: SortOrder
    _count?: MirrorCountOrderByAggregateInput
    _avg?: MirrorAvgOrderByAggregateInput
    _max?: MirrorMaxOrderByAggregateInput
    _min?: MirrorMinOrderByAggregateInput
    _sum?: MirrorSumOrderByAggregateInput
  }

  export type MirrorScalarWhereWithAggregatesInput = {
    AND?: MirrorScalarWhereWithAggregatesInput | MirrorScalarWhereWithAggregatesInput[]
    OR?: MirrorScalarWhereWithAggregatesInput[]
    NOT?: MirrorScalarWhereWithAggregatesInput | MirrorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Mirror"> | string
    buildId?: StringWithAggregatesFilter<"Mirror"> | string
    title?: StringWithAggregatesFilter<"Mirror"> | string
    url?: StringWithAggregatesFilter<"Mirror"> | string
    priority?: IntWithAggregatesFilter<"Mirror"> | number
  }

  export type SoftwareMediaWhereInput = {
    AND?: SoftwareMediaWhereInput | SoftwareMediaWhereInput[]
    OR?: SoftwareMediaWhereInput[]
    NOT?: SoftwareMediaWhereInput | SoftwareMediaWhereInput[]
    id?: StringFilter<"SoftwareMedia"> | string
    softwareId?: StringFilter<"SoftwareMedia"> | string
    type?: EnumMediaTypeFilter<"SoftwareMedia"> | $Enums.MediaType
    url?: StringFilter<"SoftwareMedia"> | string
    alt?: StringNullableFilter<"SoftwareMedia"> | string | null
    order?: IntFilter<"SoftwareMedia"> | number
    createdAt?: DateTimeFilter<"SoftwareMedia"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
  }

  export type SoftwareMediaOrderByWithRelationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    type?: SortOrder
    url?: SortOrder
    alt?: SortOrderInput | SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    software?: SoftwareOrderByWithRelationInput
  }

  export type SoftwareMediaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SoftwareMediaWhereInput | SoftwareMediaWhereInput[]
    OR?: SoftwareMediaWhereInput[]
    NOT?: SoftwareMediaWhereInput | SoftwareMediaWhereInput[]
    softwareId?: StringFilter<"SoftwareMedia"> | string
    type?: EnumMediaTypeFilter<"SoftwareMedia"> | $Enums.MediaType
    url?: StringFilter<"SoftwareMedia"> | string
    alt?: StringNullableFilter<"SoftwareMedia"> | string | null
    order?: IntFilter<"SoftwareMedia"> | number
    createdAt?: DateTimeFilter<"SoftwareMedia"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
  }, "id">

  export type SoftwareMediaOrderByWithAggregationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    type?: SortOrder
    url?: SortOrder
    alt?: SortOrderInput | SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    _count?: SoftwareMediaCountOrderByAggregateInput
    _avg?: SoftwareMediaAvgOrderByAggregateInput
    _max?: SoftwareMediaMaxOrderByAggregateInput
    _min?: SoftwareMediaMinOrderByAggregateInput
    _sum?: SoftwareMediaSumOrderByAggregateInput
  }

  export type SoftwareMediaScalarWhereWithAggregatesInput = {
    AND?: SoftwareMediaScalarWhereWithAggregatesInput | SoftwareMediaScalarWhereWithAggregatesInput[]
    OR?: SoftwareMediaScalarWhereWithAggregatesInput[]
    NOT?: SoftwareMediaScalarWhereWithAggregatesInput | SoftwareMediaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SoftwareMedia"> | string
    softwareId?: StringWithAggregatesFilter<"SoftwareMedia"> | string
    type?: EnumMediaTypeWithAggregatesFilter<"SoftwareMedia"> | $Enums.MediaType
    url?: StringWithAggregatesFilter<"SoftwareMedia"> | string
    alt?: StringNullableWithAggregatesFilter<"SoftwareMedia"> | string | null
    order?: IntWithAggregatesFilter<"SoftwareMedia"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SoftwareMedia"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    softwareId?: StringFilter<"Comment"> | string
    userId?: StringNullableFilter<"Comment"> | string | null
    name?: StringNullableFilter<"Comment"> | string | null
    email?: StringNullableFilter<"Comment"> | string | null
    content?: StringFilter<"Comment"> | string
    status?: EnumCommentStatusFilter<"Comment"> | $Enums.CommentStatus
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    content?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    software?: SoftwareOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    softwareId?: StringFilter<"Comment"> | string
    userId?: StringNullableFilter<"Comment"> | string | null
    name?: StringNullableFilter<"Comment"> | string | null
    email?: StringNullableFilter<"Comment"> | string | null
    content?: StringFilter<"Comment"> | string
    status?: EnumCommentStatusFilter<"Comment"> | $Enums.CommentStatus
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    userId?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    content?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    softwareId?: StringWithAggregatesFilter<"Comment"> | string
    userId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    name?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    email?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    content?: StringWithAggregatesFilter<"Comment"> | string
    status?: EnumCommentStatusWithAggregatesFilter<"Comment"> | $Enums.CommentStatus
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: StringFilter<"Review"> | string
    softwareId?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    title?: StringNullableFilter<"Review"> | string | null
    body?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    title?: SortOrderInput | SortOrder
    body?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    software?: SoftwareOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    softwareId_userId?: ReviewSoftwareIdUserIdCompoundUniqueInput
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    softwareId?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    title?: StringNullableFilter<"Review"> | string | null
    body?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "softwareId_userId">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    title?: SortOrderInput | SortOrder
    body?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Review"> | string
    softwareId?: StringWithAggregatesFilter<"Review"> | string
    userId?: StringWithAggregatesFilter<"Review"> | string
    rating?: IntWithAggregatesFilter<"Review"> | number
    title?: StringNullableWithAggregatesFilter<"Review"> | string | null
    body?: StringNullableWithAggregatesFilter<"Review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type SystemRequirementWhereInput = {
    AND?: SystemRequirementWhereInput | SystemRequirementWhereInput[]
    OR?: SystemRequirementWhereInput[]
    NOT?: SystemRequirementWhereInput | SystemRequirementWhereInput[]
    id?: StringFilter<"SystemRequirement"> | string
    softwareId?: StringFilter<"SystemRequirement"> | string
    os?: StringFilter<"SystemRequirement"> | string
    minimum?: JsonFilter<"SystemRequirement">
    recommended?: JsonNullableFilter<"SystemRequirement">
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
  }

  export type SystemRequirementOrderByWithRelationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    os?: SortOrder
    minimum?: SortOrder
    recommended?: SortOrderInput | SortOrder
    software?: SoftwareOrderByWithRelationInput
  }

  export type SystemRequirementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SystemRequirementWhereInput | SystemRequirementWhereInput[]
    OR?: SystemRequirementWhereInput[]
    NOT?: SystemRequirementWhereInput | SystemRequirementWhereInput[]
    softwareId?: StringFilter<"SystemRequirement"> | string
    os?: StringFilter<"SystemRequirement"> | string
    minimum?: JsonFilter<"SystemRequirement">
    recommended?: JsonNullableFilter<"SystemRequirement">
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
  }, "id">

  export type SystemRequirementOrderByWithAggregationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    os?: SortOrder
    minimum?: SortOrder
    recommended?: SortOrderInput | SortOrder
    _count?: SystemRequirementCountOrderByAggregateInput
    _max?: SystemRequirementMaxOrderByAggregateInput
    _min?: SystemRequirementMinOrderByAggregateInput
  }

  export type SystemRequirementScalarWhereWithAggregatesInput = {
    AND?: SystemRequirementScalarWhereWithAggregatesInput | SystemRequirementScalarWhereWithAggregatesInput[]
    OR?: SystemRequirementScalarWhereWithAggregatesInput[]
    NOT?: SystemRequirementScalarWhereWithAggregatesInput | SystemRequirementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemRequirement"> | string
    softwareId?: StringWithAggregatesFilter<"SystemRequirement"> | string
    os?: StringWithAggregatesFilter<"SystemRequirement"> | string
    minimum?: JsonWithAggregatesFilter<"SystemRequirement">
    recommended?: JsonNullableWithAggregatesFilter<"SystemRequirement">
  }

  export type FAQWhereInput = {
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    id?: StringFilter<"FAQ"> | string
    softwareId?: StringFilter<"FAQ"> | string
    question?: StringFilter<"FAQ"> | string
    answer?: StringFilter<"FAQ"> | string
    order?: IntFilter<"FAQ"> | number
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
  }

  export type FAQOrderByWithRelationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    order?: SortOrder
    software?: SoftwareOrderByWithRelationInput
  }

  export type FAQWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FAQWhereInput | FAQWhereInput[]
    OR?: FAQWhereInput[]
    NOT?: FAQWhereInput | FAQWhereInput[]
    softwareId?: StringFilter<"FAQ"> | string
    question?: StringFilter<"FAQ"> | string
    answer?: StringFilter<"FAQ"> | string
    order?: IntFilter<"FAQ"> | number
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
  }, "id">

  export type FAQOrderByWithAggregationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    order?: SortOrder
    _count?: FAQCountOrderByAggregateInput
    _avg?: FAQAvgOrderByAggregateInput
    _max?: FAQMaxOrderByAggregateInput
    _min?: FAQMinOrderByAggregateInput
    _sum?: FAQSumOrderByAggregateInput
  }

  export type FAQScalarWhereWithAggregatesInput = {
    AND?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    OR?: FAQScalarWhereWithAggregatesInput[]
    NOT?: FAQScalarWhereWithAggregatesInput | FAQScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FAQ"> | string
    softwareId?: StringWithAggregatesFilter<"FAQ"> | string
    question?: StringWithAggregatesFilter<"FAQ"> | string
    answer?: StringWithAggregatesFilter<"FAQ"> | string
    order?: IntWithAggregatesFilter<"FAQ"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    avatarUrl?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    comments?: CommentListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comments?: CommentOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    avatarUrl?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    comments?: CommentListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrderInput | SortOrder
    role?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PageWhereInput = {
    AND?: PageWhereInput | PageWhereInput[]
    OR?: PageWhereInput[]
    NOT?: PageWhereInput | PageWhereInput[]
    id?: StringFilter<"Page"> | string
    slug?: StringFilter<"Page"> | string
    title?: StringFilter<"Page"> | string
    content?: StringFilter<"Page"> | string
    status?: EnumPageStatusFilter<"Page"> | $Enums.PageStatus
    metaTitle?: StringNullableFilter<"Page"> | string | null
    metaDescription?: StringNullableFilter<"Page"> | string | null
    publishedAt?: DateTimeNullableFilter<"Page"> | Date | string | null
    createdAt?: DateTimeFilter<"Page"> | Date | string
    updatedAt?: DateTimeFilter<"Page"> | Date | string
  }

  export type PageOrderByWithRelationInput = {
    id?: SortOrder
    slug?: SortOrder
    title?: SortOrder
    content?: SortOrder
    status?: SortOrder
    metaTitle?: SortOrderInput | SortOrder
    metaDescription?: SortOrderInput | SortOrder
    publishedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: PageWhereInput | PageWhereInput[]
    OR?: PageWhereInput[]
    NOT?: PageWhereInput | PageWhereInput[]
    title?: StringFilter<"Page"> | string
    content?: StringFilter<"Page"> | string
    status?: EnumPageStatusFilter<"Page"> | $Enums.PageStatus
    metaTitle?: StringNullableFilter<"Page"> | string | null
    metaDescription?: StringNullableFilter<"Page"> | string | null
    publishedAt?: DateTimeNullableFilter<"Page"> | Date | string | null
    createdAt?: DateTimeFilter<"Page"> | Date | string
    updatedAt?: DateTimeFilter<"Page"> | Date | string
  }, "id" | "slug">

  export type PageOrderByWithAggregationInput = {
    id?: SortOrder
    slug?: SortOrder
    title?: SortOrder
    content?: SortOrder
    status?: SortOrder
    metaTitle?: SortOrderInput | SortOrder
    metaDescription?: SortOrderInput | SortOrder
    publishedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PageCountOrderByAggregateInput
    _max?: PageMaxOrderByAggregateInput
    _min?: PageMinOrderByAggregateInput
  }

  export type PageScalarWhereWithAggregatesInput = {
    AND?: PageScalarWhereWithAggregatesInput | PageScalarWhereWithAggregatesInput[]
    OR?: PageScalarWhereWithAggregatesInput[]
    NOT?: PageScalarWhereWithAggregatesInput | PageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Page"> | string
    slug?: StringWithAggregatesFilter<"Page"> | string
    title?: StringWithAggregatesFilter<"Page"> | string
    content?: StringWithAggregatesFilter<"Page"> | string
    status?: EnumPageStatusWithAggregatesFilter<"Page"> | $Enums.PageStatus
    metaTitle?: StringNullableWithAggregatesFilter<"Page"> | string | null
    metaDescription?: StringNullableWithAggregatesFilter<"Page"> | string | null
    publishedAt?: DateTimeNullableWithAggregatesFilter<"Page"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Page"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Page"> | Date | string
  }

  export type SettingWhereInput = {
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    key?: StringFilter<"Setting"> | string
    json?: JsonNullableFilter<"Setting">
    text?: StringNullableFilter<"Setting"> | string | null
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }

  export type SettingOrderByWithRelationInput = {
    key?: SortOrder
    json?: SortOrderInput | SortOrder
    text?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
  }

  export type SettingWhereUniqueInput = Prisma.AtLeast<{
    key?: string
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    json?: JsonNullableFilter<"Setting">
    text?: StringNullableFilter<"Setting"> | string | null
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }, "key">

  export type SettingOrderByWithAggregationInput = {
    key?: SortOrder
    json?: SortOrderInput | SortOrder
    text?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: SettingCountOrderByAggregateInput
    _max?: SettingMaxOrderByAggregateInput
    _min?: SettingMinOrderByAggregateInput
  }

  export type SettingScalarWhereWithAggregatesInput = {
    AND?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    OR?: SettingScalarWhereWithAggregatesInput[]
    NOT?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    key?: StringWithAggregatesFilter<"Setting"> | string
    json?: JsonNullableWithAggregatesFilter<"Setting">
    text?: StringNullableWithAggregatesFilter<"Setting"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"Setting"> | Date | string
  }

  export type DownloadLogWhereInput = {
    AND?: DownloadLogWhereInput | DownloadLogWhereInput[]
    OR?: DownloadLogWhereInput[]
    NOT?: DownloadLogWhereInput | DownloadLogWhereInput[]
    id?: StringFilter<"DownloadLog"> | string
    softwareId?: StringFilter<"DownloadLog"> | string
    versionId?: StringNullableFilter<"DownloadLog"> | string | null
    buildId?: StringNullableFilter<"DownloadLog"> | string | null
    ip?: StringNullableFilter<"DownloadLog"> | string | null
    ua?: StringNullableFilter<"DownloadLog"> | string | null
    referer?: StringNullableFilter<"DownloadLog"> | string | null
    createdAt?: DateTimeFilter<"DownloadLog"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    version?: XOR<VersionNullableRelationFilter, VersionWhereInput> | null
    build?: XOR<BuildNullableRelationFilter, BuildWhereInput> | null
  }

  export type DownloadLogOrderByWithRelationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    versionId?: SortOrderInput | SortOrder
    buildId?: SortOrderInput | SortOrder
    ip?: SortOrderInput | SortOrder
    ua?: SortOrderInput | SortOrder
    referer?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    software?: SoftwareOrderByWithRelationInput
    version?: VersionOrderByWithRelationInput
    build?: BuildOrderByWithRelationInput
  }

  export type DownloadLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DownloadLogWhereInput | DownloadLogWhereInput[]
    OR?: DownloadLogWhereInput[]
    NOT?: DownloadLogWhereInput | DownloadLogWhereInput[]
    softwareId?: StringFilter<"DownloadLog"> | string
    versionId?: StringNullableFilter<"DownloadLog"> | string | null
    buildId?: StringNullableFilter<"DownloadLog"> | string | null
    ip?: StringNullableFilter<"DownloadLog"> | string | null
    ua?: StringNullableFilter<"DownloadLog"> | string | null
    referer?: StringNullableFilter<"DownloadLog"> | string | null
    createdAt?: DateTimeFilter<"DownloadLog"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
    version?: XOR<VersionNullableRelationFilter, VersionWhereInput> | null
    build?: XOR<BuildNullableRelationFilter, BuildWhereInput> | null
  }, "id">

  export type DownloadLogOrderByWithAggregationInput = {
    id?: SortOrder
    softwareId?: SortOrder
    versionId?: SortOrderInput | SortOrder
    buildId?: SortOrderInput | SortOrder
    ip?: SortOrderInput | SortOrder
    ua?: SortOrderInput | SortOrder
    referer?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DownloadLogCountOrderByAggregateInput
    _max?: DownloadLogMaxOrderByAggregateInput
    _min?: DownloadLogMinOrderByAggregateInput
  }

  export type DownloadLogScalarWhereWithAggregatesInput = {
    AND?: DownloadLogScalarWhereWithAggregatesInput | DownloadLogScalarWhereWithAggregatesInput[]
    OR?: DownloadLogScalarWhereWithAggregatesInput[]
    NOT?: DownloadLogScalarWhereWithAggregatesInput | DownloadLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DownloadLog"> | string
    softwareId?: StringWithAggregatesFilter<"DownloadLog"> | string
    versionId?: StringNullableWithAggregatesFilter<"DownloadLog"> | string | null
    buildId?: StringNullableWithAggregatesFilter<"DownloadLog"> | string | null
    ip?: StringNullableWithAggregatesFilter<"DownloadLog"> | string | null
    ua?: StringNullableWithAggregatesFilter<"DownloadLog"> | string | null
    referer?: StringNullableWithAggregatesFilter<"DownloadLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DownloadLog"> | Date | string
  }

  export type DownloadCounterWhereInput = {
    AND?: DownloadCounterWhereInput | DownloadCounterWhereInput[]
    OR?: DownloadCounterWhereInput[]
    NOT?: DownloadCounterWhereInput | DownloadCounterWhereInput[]
    softwareId?: StringFilter<"DownloadCounter"> | string
    total?: IntFilter<"DownloadCounter"> | number
    updatedAt?: DateTimeFilter<"DownloadCounter"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
  }

  export type DownloadCounterOrderByWithRelationInput = {
    softwareId?: SortOrder
    total?: SortOrder
    updatedAt?: SortOrder
    software?: SoftwareOrderByWithRelationInput
  }

  export type DownloadCounterWhereUniqueInput = Prisma.AtLeast<{
    softwareId?: string
    AND?: DownloadCounterWhereInput | DownloadCounterWhereInput[]
    OR?: DownloadCounterWhereInput[]
    NOT?: DownloadCounterWhereInput | DownloadCounterWhereInput[]
    total?: IntFilter<"DownloadCounter"> | number
    updatedAt?: DateTimeFilter<"DownloadCounter"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
  }, "softwareId">

  export type DownloadCounterOrderByWithAggregationInput = {
    softwareId?: SortOrder
    total?: SortOrder
    updatedAt?: SortOrder
    _count?: DownloadCounterCountOrderByAggregateInput
    _avg?: DownloadCounterAvgOrderByAggregateInput
    _max?: DownloadCounterMaxOrderByAggregateInput
    _min?: DownloadCounterMinOrderByAggregateInput
    _sum?: DownloadCounterSumOrderByAggregateInput
  }

  export type DownloadCounterScalarWhereWithAggregatesInput = {
    AND?: DownloadCounterScalarWhereWithAggregatesInput | DownloadCounterScalarWhereWithAggregatesInput[]
    OR?: DownloadCounterScalarWhereWithAggregatesInput[]
    NOT?: DownloadCounterScalarWhereWithAggregatesInput | DownloadCounterScalarWhereWithAggregatesInput[]
    softwareId?: StringWithAggregatesFilter<"DownloadCounter"> | string
    total?: IntWithAggregatesFilter<"DownloadCounter"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"DownloadCounter"> | Date | string
  }

  export type DownloadCounter30dWhereInput = {
    AND?: DownloadCounter30dWhereInput | DownloadCounter30dWhereInput[]
    OR?: DownloadCounter30dWhereInput[]
    NOT?: DownloadCounter30dWhereInput | DownloadCounter30dWhereInput[]
    softwareId?: StringFilter<"DownloadCounter30d"> | string
    total30d?: IntFilter<"DownloadCounter30d"> | number
    computedAt?: DateTimeFilter<"DownloadCounter30d"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
  }

  export type DownloadCounter30dOrderByWithRelationInput = {
    softwareId?: SortOrder
    total30d?: SortOrder
    computedAt?: SortOrder
    software?: SoftwareOrderByWithRelationInput
  }

  export type DownloadCounter30dWhereUniqueInput = Prisma.AtLeast<{
    softwareId?: string
    AND?: DownloadCounter30dWhereInput | DownloadCounter30dWhereInput[]
    OR?: DownloadCounter30dWhereInput[]
    NOT?: DownloadCounter30dWhereInput | DownloadCounter30dWhereInput[]
    total30d?: IntFilter<"DownloadCounter30d"> | number
    computedAt?: DateTimeFilter<"DownloadCounter30d"> | Date | string
    software?: XOR<SoftwareRelationFilter, SoftwareWhereInput>
  }, "softwareId">

  export type DownloadCounter30dOrderByWithAggregationInput = {
    softwareId?: SortOrder
    total30d?: SortOrder
    computedAt?: SortOrder
    _count?: DownloadCounter30dCountOrderByAggregateInput
    _avg?: DownloadCounter30dAvgOrderByAggregateInput
    _max?: DownloadCounter30dMaxOrderByAggregateInput
    _min?: DownloadCounter30dMinOrderByAggregateInput
    _sum?: DownloadCounter30dSumOrderByAggregateInput
  }

  export type DownloadCounter30dScalarWhereWithAggregatesInput = {
    AND?: DownloadCounter30dScalarWhereWithAggregatesInput | DownloadCounter30dScalarWhereWithAggregatesInput[]
    OR?: DownloadCounter30dScalarWhereWithAggregatesInput[]
    NOT?: DownloadCounter30dScalarWhereWithAggregatesInput | DownloadCounter30dScalarWhereWithAggregatesInput[]
    softwareId?: StringWithAggregatesFilter<"DownloadCounter30d"> | string
    total30d?: IntWithAggregatesFilter<"DownloadCounter30d"> | number
    computedAt?: DateTimeWithAggregatesFilter<"DownloadCounter30d"> | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
    software?: SoftwareCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    software?: SoftwareCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
    software?: SoftwareCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    software?: SoftwareCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    slug: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    softwares?: SoftwareCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    softwares?: SoftwareUncheckedCreateNestedManyWithoutTagsInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    softwares?: SoftwareUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    softwares?: SoftwareUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareCategoryCreateInput = {
    software: SoftwareCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCategoryUncheckedCreateInput = {
    softwareId: string
    categoryId: string
  }

  export type SoftwareCategoryUpdateInput = {
    software?: SoftwareUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutSoftwareNestedInput
  }

  export type SoftwareCategoryUncheckedUpdateInput = {
    softwareId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type SoftwareCategoryCreateManyInput = {
    softwareId: string
    categoryId: string
  }

  export type SoftwareCategoryUpdateManyMutationInput = {

  }

  export type SoftwareCategoryUncheckedUpdateManyInput = {
    softwareId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type VendorCreateInput = {
    id?: string
    name: string
    slug: string
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    softwares?: SoftwareCreateNestedManyWithoutVendorInput
  }

  export type VendorUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    softwares?: SoftwareUncheckedCreateNestedManyWithoutVendorInput
  }

  export type VendorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    softwares?: SoftwareUpdateManyWithoutVendorNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    softwares?: SoftwareUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type VendorCreateManyInput = {
    id?: string
    name: string
    slug: string
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareCreateInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareCreateManyInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
  }

  export type SoftwareUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VersionCreateInput = {
    id?: string
    version: string
    osLabel?: string | null
    license?: string | null
    changelog?: string | null
    releasedAt?: Date | string | null
    createdAt?: Date | string
    software: SoftwareCreateNestedOneWithoutVersionsInput
    builds?: BuildCreateNestedManyWithoutVersionInput
    logs?: DownloadLogCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateInput = {
    id?: string
    softwareId: string
    version: string
    osLabel?: string | null
    license?: string | null
    changelog?: string | null
    releasedAt?: Date | string | null
    createdAt?: Date | string
    builds?: BuildUncheckedCreateNestedManyWithoutVersionInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutVersionsNestedInput
    builds?: BuildUpdateManyWithoutVersionNestedInput
    logs?: DownloadLogUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    builds?: BuildUncheckedUpdateManyWithoutVersionNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type VersionCreateManyInput = {
    id?: string
    softwareId: string
    version: string
    osLabel?: string | null
    license?: string | null
    changelog?: string | null
    releasedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type VersionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VersionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildCreateInput = {
    id?: string
    os?: string | null
    arch?: string | null
    buildType?: $Enums.BuildType | null
    sizeMB?: number | null
    fileSize?: string | null
    sha256?: string | null
    downloadUrl?: string | null
    createdAt?: Date | string
    version: VersionCreateNestedOneWithoutBuildsInput
    mirrors?: MirrorCreateNestedManyWithoutBuildInput
    logs?: DownloadLogCreateNestedManyWithoutBuildInput
  }

  export type BuildUncheckedCreateInput = {
    id?: string
    versionId: string
    os?: string | null
    arch?: string | null
    buildType?: $Enums.BuildType | null
    sizeMB?: number | null
    fileSize?: string | null
    sha256?: string | null
    downloadUrl?: string | null
    createdAt?: Date | string
    mirrors?: MirrorUncheckedCreateNestedManyWithoutBuildInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutBuildInput
  }

  export type BuildUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: VersionUpdateOneRequiredWithoutBuildsNestedInput
    mirrors?: MirrorUpdateManyWithoutBuildNestedInput
    logs?: DownloadLogUpdateManyWithoutBuildNestedInput
  }

  export type BuildUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionId?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mirrors?: MirrorUncheckedUpdateManyWithoutBuildNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutBuildNestedInput
  }

  export type BuildCreateManyInput = {
    id?: string
    versionId: string
    os?: string | null
    arch?: string | null
    buildType?: $Enums.BuildType | null
    sizeMB?: number | null
    fileSize?: string | null
    sha256?: string | null
    downloadUrl?: string | null
    createdAt?: Date | string
  }

  export type BuildUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionId?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MirrorCreateInput = {
    id?: string
    title: string
    url: string
    priority?: number
    build: BuildCreateNestedOneWithoutMirrorsInput
  }

  export type MirrorUncheckedCreateInput = {
    id?: string
    buildId: string
    title: string
    url: string
    priority?: number
  }

  export type MirrorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
    build?: BuildUpdateOneRequiredWithoutMirrorsNestedInput
  }

  export type MirrorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type MirrorCreateManyInput = {
    id?: string
    buildId: string
    title: string
    url: string
    priority?: number
  }

  export type MirrorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type MirrorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    buildId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type SoftwareMediaCreateInput = {
    id?: string
    type: $Enums.MediaType
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
    software: SoftwareCreateNestedOneWithoutMediaInput
  }

  export type SoftwareMediaUncheckedCreateInput = {
    id?: string
    softwareId: string
    type: $Enums.MediaType
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type SoftwareMediaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutMediaNestedInput
  }

  export type SoftwareMediaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareMediaCreateManyInput = {
    id?: string
    softwareId: string
    type: $Enums.MediaType
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type SoftwareMediaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareMediaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    content: string
    status?: $Enums.CommentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    software: SoftwareCreateNestedOneWithoutCommentsInput
    user?: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    softwareId: string
    userId?: string | null
    name?: string | null
    email?: string | null
    content: string
    status?: $Enums.CommentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumCommentStatusFieldUpdateOperationsInput | $Enums.CommentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumCommentStatusFieldUpdateOperationsInput | $Enums.CommentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    id?: string
    softwareId: string
    userId?: string | null
    name?: string | null
    email?: string | null
    content: string
    status?: $Enums.CommentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumCommentStatusFieldUpdateOperationsInput | $Enums.CommentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumCommentStatusFieldUpdateOperationsInput | $Enums.CommentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateInput = {
    id?: string
    rating: number
    title?: string | null
    body?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    software: SoftwareCreateNestedOneWithoutReviewsInput
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    softwareId: string
    userId: string
    rating: number
    title?: string | null
    body?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutReviewsNestedInput
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    id?: string
    softwareId: string
    userId: string
    rating: number
    title?: string | null
    body?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemRequirementCreateInput = {
    id?: string
    os: string
    minimum: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
    software: SoftwareCreateNestedOneWithoutRequirementsInput
  }

  export type SystemRequirementUncheckedCreateInput = {
    id?: string
    softwareId: string
    os: string
    minimum: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SystemRequirementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    minimum?: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
    software?: SoftwareUpdateOneRequiredWithoutRequirementsNestedInput
  }

  export type SystemRequirementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    minimum?: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SystemRequirementCreateManyInput = {
    id?: string
    softwareId: string
    os: string
    minimum: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SystemRequirementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    minimum?: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SystemRequirementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    minimum?: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FAQCreateInput = {
    id?: string
    question: string
    answer: string
    order?: number
    software: SoftwareCreateNestedOneWithoutFaqsInput
  }

  export type FAQUncheckedCreateInput = {
    id?: string
    softwareId: string
    question: string
    answer: string
    order?: number
  }

  export type FAQUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    software?: SoftwareUpdateOneRequiredWithoutFaqsNestedInput
  }

  export type FAQUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type FAQCreateManyInput = {
    id?: string
    softwareId: string
    question: string
    answer: string
    order?: number
  }

  export type FAQUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type FAQUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    name?: string | null
    role?: $Enums.Role
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    name?: string | null
    role?: $Enums.Role
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    name?: string | null
    role?: $Enums.Role
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageCreateInput = {
    id?: string
    slug: string
    title: string
    content: string
    status?: $Enums.PageStatus
    metaTitle?: string | null
    metaDescription?: string | null
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageUncheckedCreateInput = {
    id?: string
    slug: string
    title: string
    content: string
    status?: $Enums.PageStatus
    metaTitle?: string | null
    metaDescription?: string | null
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumPageStatusFieldUpdateOperationsInput | $Enums.PageStatus
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumPageStatusFieldUpdateOperationsInput | $Enums.PageStatus
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageCreateManyInput = {
    id?: string
    slug: string
    title: string
    content: string
    status?: $Enums.PageStatus
    metaTitle?: string | null
    metaDescription?: string | null
    publishedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumPageStatusFieldUpdateOperationsInput | $Enums.PageStatus
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumPageStatusFieldUpdateOperationsInput | $Enums.PageStatus
    metaTitle?: NullableStringFieldUpdateOperationsInput | string | null
    metaDescription?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateInput = {
    key: string
    json?: NullableJsonNullValueInput | InputJsonValue
    text?: string | null
    updatedAt?: Date | string
  }

  export type SettingUncheckedCreateInput = {
    key: string
    json?: NullableJsonNullValueInput | InputJsonValue
    text?: string | null
    updatedAt?: Date | string
  }

  export type SettingUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    json?: NullableJsonNullValueInput | InputJsonValue
    text?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    json?: NullableJsonNullValueInput | InputJsonValue
    text?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateManyInput = {
    key: string
    json?: NullableJsonNullValueInput | InputJsonValue
    text?: string | null
    updatedAt?: Date | string
  }

  export type SettingUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    json?: NullableJsonNullValueInput | InputJsonValue
    text?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    json?: NullableJsonNullValueInput | InputJsonValue
    text?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadLogCreateInput = {
    id?: string
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
    software: SoftwareCreateNestedOneWithoutLogsInput
    version?: VersionCreateNestedOneWithoutLogsInput
    build?: BuildCreateNestedOneWithoutLogsInput
  }

  export type DownloadLogUncheckedCreateInput = {
    id?: string
    softwareId: string
    versionId?: string | null
    buildId?: string | null
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
  }

  export type DownloadLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutLogsNestedInput
    version?: VersionUpdateOneWithoutLogsNestedInput
    build?: BuildUpdateOneWithoutLogsNestedInput
  }

  export type DownloadLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
    buildId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadLogCreateManyInput = {
    id?: string
    softwareId: string
    versionId?: string | null
    buildId?: string | null
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
  }

  export type DownloadLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
    buildId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadCounterCreateInput = {
    total?: number
    updatedAt?: Date | string
    software: SoftwareCreateNestedOneWithoutCounterInput
  }

  export type DownloadCounterUncheckedCreateInput = {
    softwareId: string
    total?: number
    updatedAt?: Date | string
  }

  export type DownloadCounterUpdateInput = {
    total?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutCounterNestedInput
  }

  export type DownloadCounterUncheckedUpdateInput = {
    softwareId?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadCounterCreateManyInput = {
    softwareId: string
    total?: number
    updatedAt?: Date | string
  }

  export type DownloadCounterUpdateManyMutationInput = {
    total?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadCounterUncheckedUpdateManyInput = {
    softwareId?: StringFieldUpdateOperationsInput | string
    total?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadCounter30dCreateInput = {
    total30d?: number
    computedAt?: Date | string
    software: SoftwareCreateNestedOneWithoutCounter30dInput
  }

  export type DownloadCounter30dUncheckedCreateInput = {
    softwareId: string
    total30d?: number
    computedAt?: Date | string
  }

  export type DownloadCounter30dUpdateInput = {
    total30d?: IntFieldUpdateOperationsInput | number
    computedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutCounter30dNestedInput
  }

  export type DownloadCounter30dUncheckedUpdateInput = {
    softwareId?: StringFieldUpdateOperationsInput | string
    total30d?: IntFieldUpdateOperationsInput | number
    computedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadCounter30dCreateManyInput = {
    softwareId: string
    total30d?: number
    computedAt?: Date | string
  }

  export type DownloadCounter30dUpdateManyMutationInput = {
    total30d?: IntFieldUpdateOperationsInput | number
    computedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadCounter30dUncheckedUpdateManyInput = {
    softwareId?: StringFieldUpdateOperationsInput | string
    total30d?: IntFieldUpdateOperationsInput | number
    computedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type SoftwareCategoryListRelationFilter = {
    every?: SoftwareCategoryWhereInput
    some?: SoftwareCategoryWhereInput
    none?: SoftwareCategoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SoftwareCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SoftwareListRelationFilter = {
    every?: SoftwareWhereInput
    some?: SoftwareWhereInput
    none?: SoftwareWhereInput
  }

  export type SoftwareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
  }

  export type SoftwareRelationFilter = {
    is?: SoftwareWhereInput
    isNot?: SoftwareWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type SoftwareCategorySoftwareIdCategoryIdCompoundUniqueInput = {
    softwareId: string
    categoryId: string
  }

  export type SoftwareCategoryCountOrderByAggregateInput = {
    softwareId?: SortOrder
    categoryId?: SortOrder
  }

  export type SoftwareCategoryMaxOrderByAggregateInput = {
    softwareId?: SortOrder
    categoryId?: SortOrder
  }

  export type SoftwareCategoryMinOrderByAggregateInput = {
    softwareId?: SortOrder
    categoryId?: SortOrder
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type VendorNullableRelationFilter = {
    is?: VendorWhereInput | null
    isNot?: VendorWhereInput | null
  }

  export type VersionListRelationFilter = {
    every?: VersionWhereInput
    some?: VersionWhereInput
    none?: VersionWhereInput
  }

  export type SoftwareMediaListRelationFilter = {
    every?: SoftwareMediaWhereInput
    some?: SoftwareMediaWhereInput
    none?: SoftwareMediaWhereInput
  }

  export type FAQListRelationFilter = {
    every?: FAQWhereInput
    some?: FAQWhereInput
    none?: FAQWhereInput
  }

  export type SystemRequirementListRelationFilter = {
    every?: SystemRequirementWhereInput
    some?: SystemRequirementWhereInput
    none?: SystemRequirementWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type DownloadLogListRelationFilter = {
    every?: DownloadLogWhereInput
    some?: DownloadLogWhereInput
    none?: DownloadLogWhereInput
  }

  export type DownloadCounterNullableRelationFilter = {
    is?: DownloadCounterWhereInput | null
    isNot?: DownloadCounterWhereInput | null
  }

  export type DownloadCounter30dNullableRelationFilter = {
    is?: DownloadCounter30dWhereInput | null
    isNot?: DownloadCounter30dWhereInput | null
  }

  export type VersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SoftwareMediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FAQOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SystemRequirementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DownloadLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SoftwareCountOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    license?: SortOrder
    homepage?: SortOrder
    shortDesc?: SortOrder
    longDesc?: SortOrder
    os?: SortOrder
    iconUrl?: SortOrder
    heroUrl?: SortOrder
    ratingsAvg?: SortOrder
    ratingsCount?: SortOrder
    isLatest?: SortOrder
    isUpdated?: SortOrder
    isRecommended?: SortOrder
    isNew?: SortOrder
    lastUpdatedAt?: SortOrder
    publishedAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vendorId?: SortOrder
  }

  export type SoftwareAvgOrderByAggregateInput = {
    ratingsAvg?: SortOrder
    ratingsCount?: SortOrder
  }

  export type SoftwareMaxOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    license?: SortOrder
    homepage?: SortOrder
    shortDesc?: SortOrder
    longDesc?: SortOrder
    iconUrl?: SortOrder
    heroUrl?: SortOrder
    ratingsAvg?: SortOrder
    ratingsCount?: SortOrder
    isLatest?: SortOrder
    isUpdated?: SortOrder
    isRecommended?: SortOrder
    isNew?: SortOrder
    lastUpdatedAt?: SortOrder
    publishedAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vendorId?: SortOrder
  }

  export type SoftwareMinOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    license?: SortOrder
    homepage?: SortOrder
    shortDesc?: SortOrder
    longDesc?: SortOrder
    iconUrl?: SortOrder
    heroUrl?: SortOrder
    ratingsAvg?: SortOrder
    ratingsCount?: SortOrder
    isLatest?: SortOrder
    isUpdated?: SortOrder
    isRecommended?: SortOrder
    isNew?: SortOrder
    lastUpdatedAt?: SortOrder
    publishedAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vendorId?: SortOrder
  }

  export type SoftwareSumOrderByAggregateInput = {
    ratingsAvg?: SortOrder
    ratingsCount?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BuildListRelationFilter = {
    every?: BuildWhereInput
    some?: BuildWhereInput
    none?: BuildWhereInput
  }

  export type BuildOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VersionSoftwareIdVersionCompoundUniqueInput = {
    softwareId: string
    version: string
  }

  export type VersionCountOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    version?: SortOrder
    osLabel?: SortOrder
    license?: SortOrder
    changelog?: SortOrder
    releasedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type VersionMaxOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    version?: SortOrder
    osLabel?: SortOrder
    license?: SortOrder
    changelog?: SortOrder
    releasedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type VersionMinOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    version?: SortOrder
    osLabel?: SortOrder
    license?: SortOrder
    changelog?: SortOrder
    releasedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumBuildTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BuildType | EnumBuildTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BuildType[] | null
    notIn?: $Enums.BuildType[] | null
    not?: NestedEnumBuildTypeNullableFilter<$PrismaModel> | $Enums.BuildType | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type VersionRelationFilter = {
    is?: VersionWhereInput
    isNot?: VersionWhereInput
  }

  export type MirrorListRelationFilter = {
    every?: MirrorWhereInput
    some?: MirrorWhereInput
    none?: MirrorWhereInput
  }

  export type MirrorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuildCountOrderByAggregateInput = {
    id?: SortOrder
    versionId?: SortOrder
    os?: SortOrder
    arch?: SortOrder
    buildType?: SortOrder
    sizeMB?: SortOrder
    fileSize?: SortOrder
    sha256?: SortOrder
    downloadUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildAvgOrderByAggregateInput = {
    sizeMB?: SortOrder
  }

  export type BuildMaxOrderByAggregateInput = {
    id?: SortOrder
    versionId?: SortOrder
    os?: SortOrder
    arch?: SortOrder
    buildType?: SortOrder
    sizeMB?: SortOrder
    fileSize?: SortOrder
    sha256?: SortOrder
    downloadUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildMinOrderByAggregateInput = {
    id?: SortOrder
    versionId?: SortOrder
    os?: SortOrder
    arch?: SortOrder
    buildType?: SortOrder
    sizeMB?: SortOrder
    fileSize?: SortOrder
    sha256?: SortOrder
    downloadUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type BuildSumOrderByAggregateInput = {
    sizeMB?: SortOrder
  }

  export type EnumBuildTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BuildType | EnumBuildTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BuildType[] | null
    notIn?: $Enums.BuildType[] | null
    not?: NestedEnumBuildTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BuildType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBuildTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBuildTypeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BuildRelationFilter = {
    is?: BuildWhereInput
    isNot?: BuildWhereInput
  }

  export type MirrorCountOrderByAggregateInput = {
    id?: SortOrder
    buildId?: SortOrder
    title?: SortOrder
    url?: SortOrder
    priority?: SortOrder
  }

  export type MirrorAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type MirrorMaxOrderByAggregateInput = {
    id?: SortOrder
    buildId?: SortOrder
    title?: SortOrder
    url?: SortOrder
    priority?: SortOrder
  }

  export type MirrorMinOrderByAggregateInput = {
    id?: SortOrder
    buildId?: SortOrder
    title?: SortOrder
    url?: SortOrder
    priority?: SortOrder
  }

  export type MirrorSumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type EnumMediaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[]
    notIn?: $Enums.MediaType[]
    not?: NestedEnumMediaTypeFilter<$PrismaModel> | $Enums.MediaType
  }

  export type SoftwareMediaCountOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    type?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type SoftwareMediaAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type SoftwareMediaMaxOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    type?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type SoftwareMediaMinOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    type?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type SoftwareMediaSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumMediaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[]
    notIn?: $Enums.MediaType[]
    not?: NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel> | $Enums.MediaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMediaTypeFilter<$PrismaModel>
    _max?: NestedEnumMediaTypeFilter<$PrismaModel>
  }

  export type EnumCommentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentStatus | EnumCommentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CommentStatus[]
    notIn?: $Enums.CommentStatus[]
    not?: NestedEnumCommentStatusFilter<$PrismaModel> | $Enums.CommentStatus
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    content?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    content?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    content?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCommentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentStatus | EnumCommentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CommentStatus[]
    notIn?: $Enums.CommentStatus[]
    not?: NestedEnumCommentStatusWithAggregatesFilter<$PrismaModel> | $Enums.CommentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommentStatusFilter<$PrismaModel>
    _max?: NestedEnumCommentStatusFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ReviewSoftwareIdUserIdCompoundUniqueInput = {
    softwareId: string
    userId: string
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    title?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    title?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    title?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SystemRequirementCountOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    os?: SortOrder
    minimum?: SortOrder
    recommended?: SortOrder
  }

  export type SystemRequirementMaxOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    os?: SortOrder
  }

  export type SystemRequirementMinOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    os?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type FAQCountOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    order?: SortOrder
  }

  export type FAQAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type FAQMaxOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    order?: SortOrder
  }

  export type FAQMinOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    order?: SortOrder
  }

  export type FAQSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumPageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PageStatus | EnumPageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PageStatus[]
    notIn?: $Enums.PageStatus[]
    not?: NestedEnumPageStatusFilter<$PrismaModel> | $Enums.PageStatus
  }

  export type PageCountOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    title?: SortOrder
    content?: SortOrder
    status?: SortOrder
    metaTitle?: SortOrder
    metaDescription?: SortOrder
    publishedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageMaxOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    title?: SortOrder
    content?: SortOrder
    status?: SortOrder
    metaTitle?: SortOrder
    metaDescription?: SortOrder
    publishedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageMinOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    title?: SortOrder
    content?: SortOrder
    status?: SortOrder
    metaTitle?: SortOrder
    metaDescription?: SortOrder
    publishedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PageStatus | EnumPageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PageStatus[]
    notIn?: $Enums.PageStatus[]
    not?: NestedEnumPageStatusWithAggregatesFilter<$PrismaModel> | $Enums.PageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPageStatusFilter<$PrismaModel>
    _max?: NestedEnumPageStatusFilter<$PrismaModel>
  }

  export type SettingCountOrderByAggregateInput = {
    key?: SortOrder
    json?: SortOrder
    text?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMaxOrderByAggregateInput = {
    key?: SortOrder
    text?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMinOrderByAggregateInput = {
    key?: SortOrder
    text?: SortOrder
    updatedAt?: SortOrder
  }

  export type VersionNullableRelationFilter = {
    is?: VersionWhereInput | null
    isNot?: VersionWhereInput | null
  }

  export type BuildNullableRelationFilter = {
    is?: BuildWhereInput | null
    isNot?: BuildWhereInput | null
  }

  export type DownloadLogCountOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    versionId?: SortOrder
    buildId?: SortOrder
    ip?: SortOrder
    ua?: SortOrder
    referer?: SortOrder
    createdAt?: SortOrder
  }

  export type DownloadLogMaxOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    versionId?: SortOrder
    buildId?: SortOrder
    ip?: SortOrder
    ua?: SortOrder
    referer?: SortOrder
    createdAt?: SortOrder
  }

  export type DownloadLogMinOrderByAggregateInput = {
    id?: SortOrder
    softwareId?: SortOrder
    versionId?: SortOrder
    buildId?: SortOrder
    ip?: SortOrder
    ua?: SortOrder
    referer?: SortOrder
    createdAt?: SortOrder
  }

  export type DownloadCounterCountOrderByAggregateInput = {
    softwareId?: SortOrder
    total?: SortOrder
    updatedAt?: SortOrder
  }

  export type DownloadCounterAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type DownloadCounterMaxOrderByAggregateInput = {
    softwareId?: SortOrder
    total?: SortOrder
    updatedAt?: SortOrder
  }

  export type DownloadCounterMinOrderByAggregateInput = {
    softwareId?: SortOrder
    total?: SortOrder
    updatedAt?: SortOrder
  }

  export type DownloadCounterSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type DownloadCounter30dCountOrderByAggregateInput = {
    softwareId?: SortOrder
    total30d?: SortOrder
    computedAt?: SortOrder
  }

  export type DownloadCounter30dAvgOrderByAggregateInput = {
    total30d?: SortOrder
  }

  export type DownloadCounter30dMaxOrderByAggregateInput = {
    softwareId?: SortOrder
    total30d?: SortOrder
    computedAt?: SortOrder
  }

  export type DownloadCounter30dMinOrderByAggregateInput = {
    softwareId?: SortOrder
    total30d?: SortOrder
    computedAt?: SortOrder
  }

  export type DownloadCounter30dSumOrderByAggregateInput = {
    total30d?: SortOrder
  }

  export type CategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    connect?: CategoryWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SoftwareCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SoftwareCategoryCreateWithoutCategoryInput, SoftwareCategoryUncheckedCreateWithoutCategoryInput> | SoftwareCategoryCreateWithoutCategoryInput[] | SoftwareCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SoftwareCategoryCreateOrConnectWithoutCategoryInput | SoftwareCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: SoftwareCategoryCreateManyCategoryInputEnvelope
    connect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SoftwareCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SoftwareCategoryCreateWithoutCategoryInput, SoftwareCategoryUncheckedCreateWithoutCategoryInput> | SoftwareCategoryCreateWithoutCategoryInput[] | SoftwareCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SoftwareCategoryCreateOrConnectWithoutCategoryInput | SoftwareCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: SoftwareCategoryCreateManyCategoryInputEnvelope
    connect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutChildrenInput
    upsert?: CategoryUpsertWithoutChildrenInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutChildrenInput, CategoryUpdateWithoutChildrenInput>, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SoftwareCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SoftwareCategoryCreateWithoutCategoryInput, SoftwareCategoryUncheckedCreateWithoutCategoryInput> | SoftwareCategoryCreateWithoutCategoryInput[] | SoftwareCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SoftwareCategoryCreateOrConnectWithoutCategoryInput | SoftwareCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: SoftwareCategoryUpsertWithWhereUniqueWithoutCategoryInput | SoftwareCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SoftwareCategoryCreateManyCategoryInputEnvelope
    set?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    disconnect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    delete?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    connect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    update?: SoftwareCategoryUpdateWithWhereUniqueWithoutCategoryInput | SoftwareCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SoftwareCategoryUpdateManyWithWhereWithoutCategoryInput | SoftwareCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SoftwareCategoryScalarWhereInput | SoftwareCategoryScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput> | CategoryCreateWithoutParentInput[] | CategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParentInput | CategoryCreateOrConnectWithoutParentInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParentInput | CategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CategoryCreateManyParentInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParentInput | CategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParentInput | CategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SoftwareCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SoftwareCategoryCreateWithoutCategoryInput, SoftwareCategoryUncheckedCreateWithoutCategoryInput> | SoftwareCategoryCreateWithoutCategoryInput[] | SoftwareCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SoftwareCategoryCreateOrConnectWithoutCategoryInput | SoftwareCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: SoftwareCategoryUpsertWithWhereUniqueWithoutCategoryInput | SoftwareCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SoftwareCategoryCreateManyCategoryInputEnvelope
    set?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    disconnect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    delete?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    connect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    update?: SoftwareCategoryUpdateWithWhereUniqueWithoutCategoryInput | SoftwareCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SoftwareCategoryUpdateManyWithWhereWithoutCategoryInput | SoftwareCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SoftwareCategoryScalarWhereInput | SoftwareCategoryScalarWhereInput[]
  }

  export type SoftwareCreateNestedManyWithoutTagsInput = {
    create?: XOR<SoftwareCreateWithoutTagsInput, SoftwareUncheckedCreateWithoutTagsInput> | SoftwareCreateWithoutTagsInput[] | SoftwareUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutTagsInput | SoftwareCreateOrConnectWithoutTagsInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
  }

  export type SoftwareUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<SoftwareCreateWithoutTagsInput, SoftwareUncheckedCreateWithoutTagsInput> | SoftwareCreateWithoutTagsInput[] | SoftwareUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutTagsInput | SoftwareCreateOrConnectWithoutTagsInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
  }

  export type SoftwareUpdateManyWithoutTagsNestedInput = {
    create?: XOR<SoftwareCreateWithoutTagsInput, SoftwareUncheckedCreateWithoutTagsInput> | SoftwareCreateWithoutTagsInput[] | SoftwareUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutTagsInput | SoftwareCreateOrConnectWithoutTagsInput[]
    upsert?: SoftwareUpsertWithWhereUniqueWithoutTagsInput | SoftwareUpsertWithWhereUniqueWithoutTagsInput[]
    set?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    disconnect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    delete?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    update?: SoftwareUpdateWithWhereUniqueWithoutTagsInput | SoftwareUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: SoftwareUpdateManyWithWhereWithoutTagsInput | SoftwareUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
  }

  export type SoftwareUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<SoftwareCreateWithoutTagsInput, SoftwareUncheckedCreateWithoutTagsInput> | SoftwareCreateWithoutTagsInput[] | SoftwareUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutTagsInput | SoftwareCreateOrConnectWithoutTagsInput[]
    upsert?: SoftwareUpsertWithWhereUniqueWithoutTagsInput | SoftwareUpsertWithWhereUniqueWithoutTagsInput[]
    set?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    disconnect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    delete?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    update?: SoftwareUpdateWithWhereUniqueWithoutTagsInput | SoftwareUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: SoftwareUpdateManyWithWhereWithoutTagsInput | SoftwareUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
  }

  export type SoftwareCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<SoftwareCreateWithoutCategoriesInput, SoftwareUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutCategoriesInput
    connect?: SoftwareWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutSoftwareInput = {
    create?: XOR<CategoryCreateWithoutSoftwareInput, CategoryUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSoftwareInput
    connect?: CategoryWhereUniqueInput
  }

  export type SoftwareUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<SoftwareCreateWithoutCategoriesInput, SoftwareUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutCategoriesInput
    upsert?: SoftwareUpsertWithoutCategoriesInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutCategoriesInput, SoftwareUpdateWithoutCategoriesInput>, SoftwareUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutSoftwareNestedInput = {
    create?: XOR<CategoryCreateWithoutSoftwareInput, CategoryUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutSoftwareInput
    upsert?: CategoryUpsertWithoutSoftwareInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutSoftwareInput, CategoryUpdateWithoutSoftwareInput>, CategoryUncheckedUpdateWithoutSoftwareInput>
  }

  export type SoftwareCreateNestedManyWithoutVendorInput = {
    create?: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput> | SoftwareCreateWithoutVendorInput[] | SoftwareUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutVendorInput | SoftwareCreateOrConnectWithoutVendorInput[]
    createMany?: SoftwareCreateManyVendorInputEnvelope
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
  }

  export type SoftwareUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput> | SoftwareCreateWithoutVendorInput[] | SoftwareUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutVendorInput | SoftwareCreateOrConnectWithoutVendorInput[]
    createMany?: SoftwareCreateManyVendorInputEnvelope
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
  }

  export type SoftwareUpdateManyWithoutVendorNestedInput = {
    create?: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput> | SoftwareCreateWithoutVendorInput[] | SoftwareUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutVendorInput | SoftwareCreateOrConnectWithoutVendorInput[]
    upsert?: SoftwareUpsertWithWhereUniqueWithoutVendorInput | SoftwareUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: SoftwareCreateManyVendorInputEnvelope
    set?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    disconnect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    delete?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    update?: SoftwareUpdateWithWhereUniqueWithoutVendorInput | SoftwareUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: SoftwareUpdateManyWithWhereWithoutVendorInput | SoftwareUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
  }

  export type SoftwareUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput> | SoftwareCreateWithoutVendorInput[] | SoftwareUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SoftwareCreateOrConnectWithoutVendorInput | SoftwareCreateOrConnectWithoutVendorInput[]
    upsert?: SoftwareUpsertWithWhereUniqueWithoutVendorInput | SoftwareUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: SoftwareCreateManyVendorInputEnvelope
    set?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    disconnect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    delete?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    connect?: SoftwareWhereUniqueInput | SoftwareWhereUniqueInput[]
    update?: SoftwareUpdateWithWhereUniqueWithoutVendorInput | SoftwareUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: SoftwareUpdateManyWithWhereWithoutVendorInput | SoftwareUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
  }

  export type VendorCreateNestedOneWithoutSoftwaresInput = {
    create?: XOR<VendorCreateWithoutSoftwaresInput, VendorUncheckedCreateWithoutSoftwaresInput>
    connectOrCreate?: VendorCreateOrConnectWithoutSoftwaresInput
    connect?: VendorWhereUniqueInput
  }

  export type SoftwareCategoryCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<SoftwareCategoryCreateWithoutSoftwareInput, SoftwareCategoryUncheckedCreateWithoutSoftwareInput> | SoftwareCategoryCreateWithoutSoftwareInput[] | SoftwareCategoryUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareCategoryCreateOrConnectWithoutSoftwareInput | SoftwareCategoryCreateOrConnectWithoutSoftwareInput[]
    createMany?: SoftwareCategoryCreateManySoftwareInputEnvelope
    connect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
  }

  export type VersionCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<VersionCreateWithoutSoftwareInput, VersionUncheckedCreateWithoutSoftwareInput> | VersionCreateWithoutSoftwareInput[] | VersionUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutSoftwareInput | VersionCreateOrConnectWithoutSoftwareInput[]
    createMany?: VersionCreateManySoftwareInputEnvelope
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
  }

  export type SoftwareMediaCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<SoftwareMediaCreateWithoutSoftwareInput, SoftwareMediaUncheckedCreateWithoutSoftwareInput> | SoftwareMediaCreateWithoutSoftwareInput[] | SoftwareMediaUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareMediaCreateOrConnectWithoutSoftwareInput | SoftwareMediaCreateOrConnectWithoutSoftwareInput[]
    createMany?: SoftwareMediaCreateManySoftwareInputEnvelope
    connect?: SoftwareMediaWhereUniqueInput | SoftwareMediaWhereUniqueInput[]
  }

  export type FAQCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<FAQCreateWithoutSoftwareInput, FAQUncheckedCreateWithoutSoftwareInput> | FAQCreateWithoutSoftwareInput[] | FAQUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: FAQCreateOrConnectWithoutSoftwareInput | FAQCreateOrConnectWithoutSoftwareInput[]
    createMany?: FAQCreateManySoftwareInputEnvelope
    connect?: FAQWhereUniqueInput | FAQWhereUniqueInput[]
  }

  export type SystemRequirementCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<SystemRequirementCreateWithoutSoftwareInput, SystemRequirementUncheckedCreateWithoutSoftwareInput> | SystemRequirementCreateWithoutSoftwareInput[] | SystemRequirementUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SystemRequirementCreateOrConnectWithoutSoftwareInput | SystemRequirementCreateOrConnectWithoutSoftwareInput[]
    createMany?: SystemRequirementCreateManySoftwareInputEnvelope
    connect?: SystemRequirementWhereUniqueInput | SystemRequirementWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<CommentCreateWithoutSoftwareInput, CommentUncheckedCreateWithoutSoftwareInput> | CommentCreateWithoutSoftwareInput[] | CommentUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutSoftwareInput | CommentCreateOrConnectWithoutSoftwareInput[]
    createMany?: CommentCreateManySoftwareInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type TagCreateNestedManyWithoutSoftwaresInput = {
    create?: XOR<TagCreateWithoutSoftwaresInput, TagUncheckedCreateWithoutSoftwaresInput> | TagCreateWithoutSoftwaresInput[] | TagUncheckedCreateWithoutSoftwaresInput[]
    connectOrCreate?: TagCreateOrConnectWithoutSoftwaresInput | TagCreateOrConnectWithoutSoftwaresInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<ReviewCreateWithoutSoftwareInput, ReviewUncheckedCreateWithoutSoftwareInput> | ReviewCreateWithoutSoftwareInput[] | ReviewUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSoftwareInput | ReviewCreateOrConnectWithoutSoftwareInput[]
    createMany?: ReviewCreateManySoftwareInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type DownloadLogCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<DownloadLogCreateWithoutSoftwareInput, DownloadLogUncheckedCreateWithoutSoftwareInput> | DownloadLogCreateWithoutSoftwareInput[] | DownloadLogUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutSoftwareInput | DownloadLogCreateOrConnectWithoutSoftwareInput[]
    createMany?: DownloadLogCreateManySoftwareInputEnvelope
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
  }

  export type DownloadCounterCreateNestedOneWithoutSoftwareInput = {
    create?: XOR<DownloadCounterCreateWithoutSoftwareInput, DownloadCounterUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: DownloadCounterCreateOrConnectWithoutSoftwareInput
    connect?: DownloadCounterWhereUniqueInput
  }

  export type DownloadCounter30dCreateNestedOneWithoutSoftwareInput = {
    create?: XOR<DownloadCounter30dCreateWithoutSoftwareInput, DownloadCounter30dUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: DownloadCounter30dCreateOrConnectWithoutSoftwareInput
    connect?: DownloadCounter30dWhereUniqueInput
  }

  export type SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<SoftwareCategoryCreateWithoutSoftwareInput, SoftwareCategoryUncheckedCreateWithoutSoftwareInput> | SoftwareCategoryCreateWithoutSoftwareInput[] | SoftwareCategoryUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareCategoryCreateOrConnectWithoutSoftwareInput | SoftwareCategoryCreateOrConnectWithoutSoftwareInput[]
    createMany?: SoftwareCategoryCreateManySoftwareInputEnvelope
    connect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
  }

  export type VersionUncheckedCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<VersionCreateWithoutSoftwareInput, VersionUncheckedCreateWithoutSoftwareInput> | VersionCreateWithoutSoftwareInput[] | VersionUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutSoftwareInput | VersionCreateOrConnectWithoutSoftwareInput[]
    createMany?: VersionCreateManySoftwareInputEnvelope
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
  }

  export type SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<SoftwareMediaCreateWithoutSoftwareInput, SoftwareMediaUncheckedCreateWithoutSoftwareInput> | SoftwareMediaCreateWithoutSoftwareInput[] | SoftwareMediaUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareMediaCreateOrConnectWithoutSoftwareInput | SoftwareMediaCreateOrConnectWithoutSoftwareInput[]
    createMany?: SoftwareMediaCreateManySoftwareInputEnvelope
    connect?: SoftwareMediaWhereUniqueInput | SoftwareMediaWhereUniqueInput[]
  }

  export type FAQUncheckedCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<FAQCreateWithoutSoftwareInput, FAQUncheckedCreateWithoutSoftwareInput> | FAQCreateWithoutSoftwareInput[] | FAQUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: FAQCreateOrConnectWithoutSoftwareInput | FAQCreateOrConnectWithoutSoftwareInput[]
    createMany?: FAQCreateManySoftwareInputEnvelope
    connect?: FAQWhereUniqueInput | FAQWhereUniqueInput[]
  }

  export type SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<SystemRequirementCreateWithoutSoftwareInput, SystemRequirementUncheckedCreateWithoutSoftwareInput> | SystemRequirementCreateWithoutSoftwareInput[] | SystemRequirementUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SystemRequirementCreateOrConnectWithoutSoftwareInput | SystemRequirementCreateOrConnectWithoutSoftwareInput[]
    createMany?: SystemRequirementCreateManySoftwareInputEnvelope
    connect?: SystemRequirementWhereUniqueInput | SystemRequirementWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<CommentCreateWithoutSoftwareInput, CommentUncheckedCreateWithoutSoftwareInput> | CommentCreateWithoutSoftwareInput[] | CommentUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutSoftwareInput | CommentCreateOrConnectWithoutSoftwareInput[]
    createMany?: CommentCreateManySoftwareInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutSoftwaresInput = {
    create?: XOR<TagCreateWithoutSoftwaresInput, TagUncheckedCreateWithoutSoftwaresInput> | TagCreateWithoutSoftwaresInput[] | TagUncheckedCreateWithoutSoftwaresInput[]
    connectOrCreate?: TagCreateOrConnectWithoutSoftwaresInput | TagCreateOrConnectWithoutSoftwaresInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<ReviewCreateWithoutSoftwareInput, ReviewUncheckedCreateWithoutSoftwareInput> | ReviewCreateWithoutSoftwareInput[] | ReviewUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSoftwareInput | ReviewCreateOrConnectWithoutSoftwareInput[]
    createMany?: ReviewCreateManySoftwareInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput = {
    create?: XOR<DownloadLogCreateWithoutSoftwareInput, DownloadLogUncheckedCreateWithoutSoftwareInput> | DownloadLogCreateWithoutSoftwareInput[] | DownloadLogUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutSoftwareInput | DownloadLogCreateOrConnectWithoutSoftwareInput[]
    createMany?: DownloadLogCreateManySoftwareInputEnvelope
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
  }

  export type DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput = {
    create?: XOR<DownloadCounterCreateWithoutSoftwareInput, DownloadCounterUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: DownloadCounterCreateOrConnectWithoutSoftwareInput
    connect?: DownloadCounterWhereUniqueInput
  }

  export type DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput = {
    create?: XOR<DownloadCounter30dCreateWithoutSoftwareInput, DownloadCounter30dUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: DownloadCounter30dCreateOrConnectWithoutSoftwareInput
    connect?: DownloadCounter30dWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type VendorUpdateOneWithoutSoftwaresNestedInput = {
    create?: XOR<VendorCreateWithoutSoftwaresInput, VendorUncheckedCreateWithoutSoftwaresInput>
    connectOrCreate?: VendorCreateOrConnectWithoutSoftwaresInput
    upsert?: VendorUpsertWithoutSoftwaresInput
    disconnect?: VendorWhereInput | boolean
    delete?: VendorWhereInput | boolean
    connect?: VendorWhereUniqueInput
    update?: XOR<XOR<VendorUpdateToOneWithWhereWithoutSoftwaresInput, VendorUpdateWithoutSoftwaresInput>, VendorUncheckedUpdateWithoutSoftwaresInput>
  }

  export type SoftwareCategoryUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<SoftwareCategoryCreateWithoutSoftwareInput, SoftwareCategoryUncheckedCreateWithoutSoftwareInput> | SoftwareCategoryCreateWithoutSoftwareInput[] | SoftwareCategoryUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareCategoryCreateOrConnectWithoutSoftwareInput | SoftwareCategoryCreateOrConnectWithoutSoftwareInput[]
    upsert?: SoftwareCategoryUpsertWithWhereUniqueWithoutSoftwareInput | SoftwareCategoryUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: SoftwareCategoryCreateManySoftwareInputEnvelope
    set?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    disconnect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    delete?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    connect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    update?: SoftwareCategoryUpdateWithWhereUniqueWithoutSoftwareInput | SoftwareCategoryUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: SoftwareCategoryUpdateManyWithWhereWithoutSoftwareInput | SoftwareCategoryUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: SoftwareCategoryScalarWhereInput | SoftwareCategoryScalarWhereInput[]
  }

  export type VersionUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<VersionCreateWithoutSoftwareInput, VersionUncheckedCreateWithoutSoftwareInput> | VersionCreateWithoutSoftwareInput[] | VersionUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutSoftwareInput | VersionCreateOrConnectWithoutSoftwareInput[]
    upsert?: VersionUpsertWithWhereUniqueWithoutSoftwareInput | VersionUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: VersionCreateManySoftwareInputEnvelope
    set?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    disconnect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    delete?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    update?: VersionUpdateWithWhereUniqueWithoutSoftwareInput | VersionUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: VersionUpdateManyWithWhereWithoutSoftwareInput | VersionUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: VersionScalarWhereInput | VersionScalarWhereInput[]
  }

  export type SoftwareMediaUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<SoftwareMediaCreateWithoutSoftwareInput, SoftwareMediaUncheckedCreateWithoutSoftwareInput> | SoftwareMediaCreateWithoutSoftwareInput[] | SoftwareMediaUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareMediaCreateOrConnectWithoutSoftwareInput | SoftwareMediaCreateOrConnectWithoutSoftwareInput[]
    upsert?: SoftwareMediaUpsertWithWhereUniqueWithoutSoftwareInput | SoftwareMediaUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: SoftwareMediaCreateManySoftwareInputEnvelope
    set?: SoftwareMediaWhereUniqueInput | SoftwareMediaWhereUniqueInput[]
    disconnect?: SoftwareMediaWhereUniqueInput | SoftwareMediaWhereUniqueInput[]
    delete?: SoftwareMediaWhereUniqueInput | SoftwareMediaWhereUniqueInput[]
    connect?: SoftwareMediaWhereUniqueInput | SoftwareMediaWhereUniqueInput[]
    update?: SoftwareMediaUpdateWithWhereUniqueWithoutSoftwareInput | SoftwareMediaUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: SoftwareMediaUpdateManyWithWhereWithoutSoftwareInput | SoftwareMediaUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: SoftwareMediaScalarWhereInput | SoftwareMediaScalarWhereInput[]
  }

  export type FAQUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<FAQCreateWithoutSoftwareInput, FAQUncheckedCreateWithoutSoftwareInput> | FAQCreateWithoutSoftwareInput[] | FAQUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: FAQCreateOrConnectWithoutSoftwareInput | FAQCreateOrConnectWithoutSoftwareInput[]
    upsert?: FAQUpsertWithWhereUniqueWithoutSoftwareInput | FAQUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: FAQCreateManySoftwareInputEnvelope
    set?: FAQWhereUniqueInput | FAQWhereUniqueInput[]
    disconnect?: FAQWhereUniqueInput | FAQWhereUniqueInput[]
    delete?: FAQWhereUniqueInput | FAQWhereUniqueInput[]
    connect?: FAQWhereUniqueInput | FAQWhereUniqueInput[]
    update?: FAQUpdateWithWhereUniqueWithoutSoftwareInput | FAQUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: FAQUpdateManyWithWhereWithoutSoftwareInput | FAQUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: FAQScalarWhereInput | FAQScalarWhereInput[]
  }

  export type SystemRequirementUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<SystemRequirementCreateWithoutSoftwareInput, SystemRequirementUncheckedCreateWithoutSoftwareInput> | SystemRequirementCreateWithoutSoftwareInput[] | SystemRequirementUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SystemRequirementCreateOrConnectWithoutSoftwareInput | SystemRequirementCreateOrConnectWithoutSoftwareInput[]
    upsert?: SystemRequirementUpsertWithWhereUniqueWithoutSoftwareInput | SystemRequirementUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: SystemRequirementCreateManySoftwareInputEnvelope
    set?: SystemRequirementWhereUniqueInput | SystemRequirementWhereUniqueInput[]
    disconnect?: SystemRequirementWhereUniqueInput | SystemRequirementWhereUniqueInput[]
    delete?: SystemRequirementWhereUniqueInput | SystemRequirementWhereUniqueInput[]
    connect?: SystemRequirementWhereUniqueInput | SystemRequirementWhereUniqueInput[]
    update?: SystemRequirementUpdateWithWhereUniqueWithoutSoftwareInput | SystemRequirementUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: SystemRequirementUpdateManyWithWhereWithoutSoftwareInput | SystemRequirementUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: SystemRequirementScalarWhereInput | SystemRequirementScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<CommentCreateWithoutSoftwareInput, CommentUncheckedCreateWithoutSoftwareInput> | CommentCreateWithoutSoftwareInput[] | CommentUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutSoftwareInput | CommentCreateOrConnectWithoutSoftwareInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutSoftwareInput | CommentUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: CommentCreateManySoftwareInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutSoftwareInput | CommentUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutSoftwareInput | CommentUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TagUpdateManyWithoutSoftwaresNestedInput = {
    create?: XOR<TagCreateWithoutSoftwaresInput, TagUncheckedCreateWithoutSoftwaresInput> | TagCreateWithoutSoftwaresInput[] | TagUncheckedCreateWithoutSoftwaresInput[]
    connectOrCreate?: TagCreateOrConnectWithoutSoftwaresInput | TagCreateOrConnectWithoutSoftwaresInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutSoftwaresInput | TagUpsertWithWhereUniqueWithoutSoftwaresInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutSoftwaresInput | TagUpdateWithWhereUniqueWithoutSoftwaresInput[]
    updateMany?: TagUpdateManyWithWhereWithoutSoftwaresInput | TagUpdateManyWithWhereWithoutSoftwaresInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<ReviewCreateWithoutSoftwareInput, ReviewUncheckedCreateWithoutSoftwareInput> | ReviewCreateWithoutSoftwareInput[] | ReviewUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSoftwareInput | ReviewCreateOrConnectWithoutSoftwareInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutSoftwareInput | ReviewUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: ReviewCreateManySoftwareInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutSoftwareInput | ReviewUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutSoftwareInput | ReviewUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type DownloadLogUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<DownloadLogCreateWithoutSoftwareInput, DownloadLogUncheckedCreateWithoutSoftwareInput> | DownloadLogCreateWithoutSoftwareInput[] | DownloadLogUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutSoftwareInput | DownloadLogCreateOrConnectWithoutSoftwareInput[]
    upsert?: DownloadLogUpsertWithWhereUniqueWithoutSoftwareInput | DownloadLogUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: DownloadLogCreateManySoftwareInputEnvelope
    set?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    disconnect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    delete?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    update?: DownloadLogUpdateWithWhereUniqueWithoutSoftwareInput | DownloadLogUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: DownloadLogUpdateManyWithWhereWithoutSoftwareInput | DownloadLogUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: DownloadLogScalarWhereInput | DownloadLogScalarWhereInput[]
  }

  export type DownloadCounterUpdateOneWithoutSoftwareNestedInput = {
    create?: XOR<DownloadCounterCreateWithoutSoftwareInput, DownloadCounterUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: DownloadCounterCreateOrConnectWithoutSoftwareInput
    upsert?: DownloadCounterUpsertWithoutSoftwareInput
    disconnect?: DownloadCounterWhereInput | boolean
    delete?: DownloadCounterWhereInput | boolean
    connect?: DownloadCounterWhereUniqueInput
    update?: XOR<XOR<DownloadCounterUpdateToOneWithWhereWithoutSoftwareInput, DownloadCounterUpdateWithoutSoftwareInput>, DownloadCounterUncheckedUpdateWithoutSoftwareInput>
  }

  export type DownloadCounter30dUpdateOneWithoutSoftwareNestedInput = {
    create?: XOR<DownloadCounter30dCreateWithoutSoftwareInput, DownloadCounter30dUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: DownloadCounter30dCreateOrConnectWithoutSoftwareInput
    upsert?: DownloadCounter30dUpsertWithoutSoftwareInput
    disconnect?: DownloadCounter30dWhereInput | boolean
    delete?: DownloadCounter30dWhereInput | boolean
    connect?: DownloadCounter30dWhereUniqueInput
    update?: XOR<XOR<DownloadCounter30dUpdateToOneWithWhereWithoutSoftwareInput, DownloadCounter30dUpdateWithoutSoftwareInput>, DownloadCounter30dUncheckedUpdateWithoutSoftwareInput>
  }

  export type SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<SoftwareCategoryCreateWithoutSoftwareInput, SoftwareCategoryUncheckedCreateWithoutSoftwareInput> | SoftwareCategoryCreateWithoutSoftwareInput[] | SoftwareCategoryUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareCategoryCreateOrConnectWithoutSoftwareInput | SoftwareCategoryCreateOrConnectWithoutSoftwareInput[]
    upsert?: SoftwareCategoryUpsertWithWhereUniqueWithoutSoftwareInput | SoftwareCategoryUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: SoftwareCategoryCreateManySoftwareInputEnvelope
    set?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    disconnect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    delete?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    connect?: SoftwareCategoryWhereUniqueInput | SoftwareCategoryWhereUniqueInput[]
    update?: SoftwareCategoryUpdateWithWhereUniqueWithoutSoftwareInput | SoftwareCategoryUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: SoftwareCategoryUpdateManyWithWhereWithoutSoftwareInput | SoftwareCategoryUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: SoftwareCategoryScalarWhereInput | SoftwareCategoryScalarWhereInput[]
  }

  export type VersionUncheckedUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<VersionCreateWithoutSoftwareInput, VersionUncheckedCreateWithoutSoftwareInput> | VersionCreateWithoutSoftwareInput[] | VersionUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: VersionCreateOrConnectWithoutSoftwareInput | VersionCreateOrConnectWithoutSoftwareInput[]
    upsert?: VersionUpsertWithWhereUniqueWithoutSoftwareInput | VersionUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: VersionCreateManySoftwareInputEnvelope
    set?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    disconnect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    delete?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    connect?: VersionWhereUniqueInput | VersionWhereUniqueInput[]
    update?: VersionUpdateWithWhereUniqueWithoutSoftwareInput | VersionUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: VersionUpdateManyWithWhereWithoutSoftwareInput | VersionUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: VersionScalarWhereInput | VersionScalarWhereInput[]
  }

  export type SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<SoftwareMediaCreateWithoutSoftwareInput, SoftwareMediaUncheckedCreateWithoutSoftwareInput> | SoftwareMediaCreateWithoutSoftwareInput[] | SoftwareMediaUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SoftwareMediaCreateOrConnectWithoutSoftwareInput | SoftwareMediaCreateOrConnectWithoutSoftwareInput[]
    upsert?: SoftwareMediaUpsertWithWhereUniqueWithoutSoftwareInput | SoftwareMediaUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: SoftwareMediaCreateManySoftwareInputEnvelope
    set?: SoftwareMediaWhereUniqueInput | SoftwareMediaWhereUniqueInput[]
    disconnect?: SoftwareMediaWhereUniqueInput | SoftwareMediaWhereUniqueInput[]
    delete?: SoftwareMediaWhereUniqueInput | SoftwareMediaWhereUniqueInput[]
    connect?: SoftwareMediaWhereUniqueInput | SoftwareMediaWhereUniqueInput[]
    update?: SoftwareMediaUpdateWithWhereUniqueWithoutSoftwareInput | SoftwareMediaUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: SoftwareMediaUpdateManyWithWhereWithoutSoftwareInput | SoftwareMediaUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: SoftwareMediaScalarWhereInput | SoftwareMediaScalarWhereInput[]
  }

  export type FAQUncheckedUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<FAQCreateWithoutSoftwareInput, FAQUncheckedCreateWithoutSoftwareInput> | FAQCreateWithoutSoftwareInput[] | FAQUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: FAQCreateOrConnectWithoutSoftwareInput | FAQCreateOrConnectWithoutSoftwareInput[]
    upsert?: FAQUpsertWithWhereUniqueWithoutSoftwareInput | FAQUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: FAQCreateManySoftwareInputEnvelope
    set?: FAQWhereUniqueInput | FAQWhereUniqueInput[]
    disconnect?: FAQWhereUniqueInput | FAQWhereUniqueInput[]
    delete?: FAQWhereUniqueInput | FAQWhereUniqueInput[]
    connect?: FAQWhereUniqueInput | FAQWhereUniqueInput[]
    update?: FAQUpdateWithWhereUniqueWithoutSoftwareInput | FAQUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: FAQUpdateManyWithWhereWithoutSoftwareInput | FAQUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: FAQScalarWhereInput | FAQScalarWhereInput[]
  }

  export type SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<SystemRequirementCreateWithoutSoftwareInput, SystemRequirementUncheckedCreateWithoutSoftwareInput> | SystemRequirementCreateWithoutSoftwareInput[] | SystemRequirementUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: SystemRequirementCreateOrConnectWithoutSoftwareInput | SystemRequirementCreateOrConnectWithoutSoftwareInput[]
    upsert?: SystemRequirementUpsertWithWhereUniqueWithoutSoftwareInput | SystemRequirementUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: SystemRequirementCreateManySoftwareInputEnvelope
    set?: SystemRequirementWhereUniqueInput | SystemRequirementWhereUniqueInput[]
    disconnect?: SystemRequirementWhereUniqueInput | SystemRequirementWhereUniqueInput[]
    delete?: SystemRequirementWhereUniqueInput | SystemRequirementWhereUniqueInput[]
    connect?: SystemRequirementWhereUniqueInput | SystemRequirementWhereUniqueInput[]
    update?: SystemRequirementUpdateWithWhereUniqueWithoutSoftwareInput | SystemRequirementUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: SystemRequirementUpdateManyWithWhereWithoutSoftwareInput | SystemRequirementUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: SystemRequirementScalarWhereInput | SystemRequirementScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<CommentCreateWithoutSoftwareInput, CommentUncheckedCreateWithoutSoftwareInput> | CommentCreateWithoutSoftwareInput[] | CommentUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutSoftwareInput | CommentCreateOrConnectWithoutSoftwareInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutSoftwareInput | CommentUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: CommentCreateManySoftwareInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutSoftwareInput | CommentUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutSoftwareInput | CommentUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutSoftwaresNestedInput = {
    create?: XOR<TagCreateWithoutSoftwaresInput, TagUncheckedCreateWithoutSoftwaresInput> | TagCreateWithoutSoftwaresInput[] | TagUncheckedCreateWithoutSoftwaresInput[]
    connectOrCreate?: TagCreateOrConnectWithoutSoftwaresInput | TagCreateOrConnectWithoutSoftwaresInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutSoftwaresInput | TagUpsertWithWhereUniqueWithoutSoftwaresInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutSoftwaresInput | TagUpdateWithWhereUniqueWithoutSoftwaresInput[]
    updateMany?: TagUpdateManyWithWhereWithoutSoftwaresInput | TagUpdateManyWithWhereWithoutSoftwaresInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<ReviewCreateWithoutSoftwareInput, ReviewUncheckedCreateWithoutSoftwareInput> | ReviewCreateWithoutSoftwareInput[] | ReviewUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutSoftwareInput | ReviewCreateOrConnectWithoutSoftwareInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutSoftwareInput | ReviewUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: ReviewCreateManySoftwareInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutSoftwareInput | ReviewUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutSoftwareInput | ReviewUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput = {
    create?: XOR<DownloadLogCreateWithoutSoftwareInput, DownloadLogUncheckedCreateWithoutSoftwareInput> | DownloadLogCreateWithoutSoftwareInput[] | DownloadLogUncheckedCreateWithoutSoftwareInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutSoftwareInput | DownloadLogCreateOrConnectWithoutSoftwareInput[]
    upsert?: DownloadLogUpsertWithWhereUniqueWithoutSoftwareInput | DownloadLogUpsertWithWhereUniqueWithoutSoftwareInput[]
    createMany?: DownloadLogCreateManySoftwareInputEnvelope
    set?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    disconnect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    delete?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    update?: DownloadLogUpdateWithWhereUniqueWithoutSoftwareInput | DownloadLogUpdateWithWhereUniqueWithoutSoftwareInput[]
    updateMany?: DownloadLogUpdateManyWithWhereWithoutSoftwareInput | DownloadLogUpdateManyWithWhereWithoutSoftwareInput[]
    deleteMany?: DownloadLogScalarWhereInput | DownloadLogScalarWhereInput[]
  }

  export type DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput = {
    create?: XOR<DownloadCounterCreateWithoutSoftwareInput, DownloadCounterUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: DownloadCounterCreateOrConnectWithoutSoftwareInput
    upsert?: DownloadCounterUpsertWithoutSoftwareInput
    disconnect?: DownloadCounterWhereInput | boolean
    delete?: DownloadCounterWhereInput | boolean
    connect?: DownloadCounterWhereUniqueInput
    update?: XOR<XOR<DownloadCounterUpdateToOneWithWhereWithoutSoftwareInput, DownloadCounterUpdateWithoutSoftwareInput>, DownloadCounterUncheckedUpdateWithoutSoftwareInput>
  }

  export type DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput = {
    create?: XOR<DownloadCounter30dCreateWithoutSoftwareInput, DownloadCounter30dUncheckedCreateWithoutSoftwareInput>
    connectOrCreate?: DownloadCounter30dCreateOrConnectWithoutSoftwareInput
    upsert?: DownloadCounter30dUpsertWithoutSoftwareInput
    disconnect?: DownloadCounter30dWhereInput | boolean
    delete?: DownloadCounter30dWhereInput | boolean
    connect?: DownloadCounter30dWhereUniqueInput
    update?: XOR<XOR<DownloadCounter30dUpdateToOneWithWhereWithoutSoftwareInput, DownloadCounter30dUpdateWithoutSoftwareInput>, DownloadCounter30dUncheckedUpdateWithoutSoftwareInput>
  }

  export type SoftwareCreateNestedOneWithoutVersionsInput = {
    create?: XOR<SoftwareCreateWithoutVersionsInput, SoftwareUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutVersionsInput
    connect?: SoftwareWhereUniqueInput
  }

  export type BuildCreateNestedManyWithoutVersionInput = {
    create?: XOR<BuildCreateWithoutVersionInput, BuildUncheckedCreateWithoutVersionInput> | BuildCreateWithoutVersionInput[] | BuildUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: BuildCreateOrConnectWithoutVersionInput | BuildCreateOrConnectWithoutVersionInput[]
    createMany?: BuildCreateManyVersionInputEnvelope
    connect?: BuildWhereUniqueInput | BuildWhereUniqueInput[]
  }

  export type DownloadLogCreateNestedManyWithoutVersionInput = {
    create?: XOR<DownloadLogCreateWithoutVersionInput, DownloadLogUncheckedCreateWithoutVersionInput> | DownloadLogCreateWithoutVersionInput[] | DownloadLogUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutVersionInput | DownloadLogCreateOrConnectWithoutVersionInput[]
    createMany?: DownloadLogCreateManyVersionInputEnvelope
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
  }

  export type BuildUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<BuildCreateWithoutVersionInput, BuildUncheckedCreateWithoutVersionInput> | BuildCreateWithoutVersionInput[] | BuildUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: BuildCreateOrConnectWithoutVersionInput | BuildCreateOrConnectWithoutVersionInput[]
    createMany?: BuildCreateManyVersionInputEnvelope
    connect?: BuildWhereUniqueInput | BuildWhereUniqueInput[]
  }

  export type DownloadLogUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<DownloadLogCreateWithoutVersionInput, DownloadLogUncheckedCreateWithoutVersionInput> | DownloadLogCreateWithoutVersionInput[] | DownloadLogUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutVersionInput | DownloadLogCreateOrConnectWithoutVersionInput[]
    createMany?: DownloadLogCreateManyVersionInputEnvelope
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
  }

  export type SoftwareUpdateOneRequiredWithoutVersionsNestedInput = {
    create?: XOR<SoftwareCreateWithoutVersionsInput, SoftwareUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutVersionsInput
    upsert?: SoftwareUpsertWithoutVersionsInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutVersionsInput, SoftwareUpdateWithoutVersionsInput>, SoftwareUncheckedUpdateWithoutVersionsInput>
  }

  export type BuildUpdateManyWithoutVersionNestedInput = {
    create?: XOR<BuildCreateWithoutVersionInput, BuildUncheckedCreateWithoutVersionInput> | BuildCreateWithoutVersionInput[] | BuildUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: BuildCreateOrConnectWithoutVersionInput | BuildCreateOrConnectWithoutVersionInput[]
    upsert?: BuildUpsertWithWhereUniqueWithoutVersionInput | BuildUpsertWithWhereUniqueWithoutVersionInput[]
    createMany?: BuildCreateManyVersionInputEnvelope
    set?: BuildWhereUniqueInput | BuildWhereUniqueInput[]
    disconnect?: BuildWhereUniqueInput | BuildWhereUniqueInput[]
    delete?: BuildWhereUniqueInput | BuildWhereUniqueInput[]
    connect?: BuildWhereUniqueInput | BuildWhereUniqueInput[]
    update?: BuildUpdateWithWhereUniqueWithoutVersionInput | BuildUpdateWithWhereUniqueWithoutVersionInput[]
    updateMany?: BuildUpdateManyWithWhereWithoutVersionInput | BuildUpdateManyWithWhereWithoutVersionInput[]
    deleteMany?: BuildScalarWhereInput | BuildScalarWhereInput[]
  }

  export type DownloadLogUpdateManyWithoutVersionNestedInput = {
    create?: XOR<DownloadLogCreateWithoutVersionInput, DownloadLogUncheckedCreateWithoutVersionInput> | DownloadLogCreateWithoutVersionInput[] | DownloadLogUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutVersionInput | DownloadLogCreateOrConnectWithoutVersionInput[]
    upsert?: DownloadLogUpsertWithWhereUniqueWithoutVersionInput | DownloadLogUpsertWithWhereUniqueWithoutVersionInput[]
    createMany?: DownloadLogCreateManyVersionInputEnvelope
    set?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    disconnect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    delete?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    update?: DownloadLogUpdateWithWhereUniqueWithoutVersionInput | DownloadLogUpdateWithWhereUniqueWithoutVersionInput[]
    updateMany?: DownloadLogUpdateManyWithWhereWithoutVersionInput | DownloadLogUpdateManyWithWhereWithoutVersionInput[]
    deleteMany?: DownloadLogScalarWhereInput | DownloadLogScalarWhereInput[]
  }

  export type BuildUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<BuildCreateWithoutVersionInput, BuildUncheckedCreateWithoutVersionInput> | BuildCreateWithoutVersionInput[] | BuildUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: BuildCreateOrConnectWithoutVersionInput | BuildCreateOrConnectWithoutVersionInput[]
    upsert?: BuildUpsertWithWhereUniqueWithoutVersionInput | BuildUpsertWithWhereUniqueWithoutVersionInput[]
    createMany?: BuildCreateManyVersionInputEnvelope
    set?: BuildWhereUniqueInput | BuildWhereUniqueInput[]
    disconnect?: BuildWhereUniqueInput | BuildWhereUniqueInput[]
    delete?: BuildWhereUniqueInput | BuildWhereUniqueInput[]
    connect?: BuildWhereUniqueInput | BuildWhereUniqueInput[]
    update?: BuildUpdateWithWhereUniqueWithoutVersionInput | BuildUpdateWithWhereUniqueWithoutVersionInput[]
    updateMany?: BuildUpdateManyWithWhereWithoutVersionInput | BuildUpdateManyWithWhereWithoutVersionInput[]
    deleteMany?: BuildScalarWhereInput | BuildScalarWhereInput[]
  }

  export type DownloadLogUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<DownloadLogCreateWithoutVersionInput, DownloadLogUncheckedCreateWithoutVersionInput> | DownloadLogCreateWithoutVersionInput[] | DownloadLogUncheckedCreateWithoutVersionInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutVersionInput | DownloadLogCreateOrConnectWithoutVersionInput[]
    upsert?: DownloadLogUpsertWithWhereUniqueWithoutVersionInput | DownloadLogUpsertWithWhereUniqueWithoutVersionInput[]
    createMany?: DownloadLogCreateManyVersionInputEnvelope
    set?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    disconnect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    delete?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    update?: DownloadLogUpdateWithWhereUniqueWithoutVersionInput | DownloadLogUpdateWithWhereUniqueWithoutVersionInput[]
    updateMany?: DownloadLogUpdateManyWithWhereWithoutVersionInput | DownloadLogUpdateManyWithWhereWithoutVersionInput[]
    deleteMany?: DownloadLogScalarWhereInput | DownloadLogScalarWhereInput[]
  }

  export type VersionCreateNestedOneWithoutBuildsInput = {
    create?: XOR<VersionCreateWithoutBuildsInput, VersionUncheckedCreateWithoutBuildsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutBuildsInput
    connect?: VersionWhereUniqueInput
  }

  export type MirrorCreateNestedManyWithoutBuildInput = {
    create?: XOR<MirrorCreateWithoutBuildInput, MirrorUncheckedCreateWithoutBuildInput> | MirrorCreateWithoutBuildInput[] | MirrorUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: MirrorCreateOrConnectWithoutBuildInput | MirrorCreateOrConnectWithoutBuildInput[]
    createMany?: MirrorCreateManyBuildInputEnvelope
    connect?: MirrorWhereUniqueInput | MirrorWhereUniqueInput[]
  }

  export type DownloadLogCreateNestedManyWithoutBuildInput = {
    create?: XOR<DownloadLogCreateWithoutBuildInput, DownloadLogUncheckedCreateWithoutBuildInput> | DownloadLogCreateWithoutBuildInput[] | DownloadLogUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutBuildInput | DownloadLogCreateOrConnectWithoutBuildInput[]
    createMany?: DownloadLogCreateManyBuildInputEnvelope
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
  }

  export type MirrorUncheckedCreateNestedManyWithoutBuildInput = {
    create?: XOR<MirrorCreateWithoutBuildInput, MirrorUncheckedCreateWithoutBuildInput> | MirrorCreateWithoutBuildInput[] | MirrorUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: MirrorCreateOrConnectWithoutBuildInput | MirrorCreateOrConnectWithoutBuildInput[]
    createMany?: MirrorCreateManyBuildInputEnvelope
    connect?: MirrorWhereUniqueInput | MirrorWhereUniqueInput[]
  }

  export type DownloadLogUncheckedCreateNestedManyWithoutBuildInput = {
    create?: XOR<DownloadLogCreateWithoutBuildInput, DownloadLogUncheckedCreateWithoutBuildInput> | DownloadLogCreateWithoutBuildInput[] | DownloadLogUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutBuildInput | DownloadLogCreateOrConnectWithoutBuildInput[]
    createMany?: DownloadLogCreateManyBuildInputEnvelope
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
  }

  export type NullableEnumBuildTypeFieldUpdateOperationsInput = {
    set?: $Enums.BuildType | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VersionUpdateOneRequiredWithoutBuildsNestedInput = {
    create?: XOR<VersionCreateWithoutBuildsInput, VersionUncheckedCreateWithoutBuildsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutBuildsInput
    upsert?: VersionUpsertWithoutBuildsInput
    connect?: VersionWhereUniqueInput
    update?: XOR<XOR<VersionUpdateToOneWithWhereWithoutBuildsInput, VersionUpdateWithoutBuildsInput>, VersionUncheckedUpdateWithoutBuildsInput>
  }

  export type MirrorUpdateManyWithoutBuildNestedInput = {
    create?: XOR<MirrorCreateWithoutBuildInput, MirrorUncheckedCreateWithoutBuildInput> | MirrorCreateWithoutBuildInput[] | MirrorUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: MirrorCreateOrConnectWithoutBuildInput | MirrorCreateOrConnectWithoutBuildInput[]
    upsert?: MirrorUpsertWithWhereUniqueWithoutBuildInput | MirrorUpsertWithWhereUniqueWithoutBuildInput[]
    createMany?: MirrorCreateManyBuildInputEnvelope
    set?: MirrorWhereUniqueInput | MirrorWhereUniqueInput[]
    disconnect?: MirrorWhereUniqueInput | MirrorWhereUniqueInput[]
    delete?: MirrorWhereUniqueInput | MirrorWhereUniqueInput[]
    connect?: MirrorWhereUniqueInput | MirrorWhereUniqueInput[]
    update?: MirrorUpdateWithWhereUniqueWithoutBuildInput | MirrorUpdateWithWhereUniqueWithoutBuildInput[]
    updateMany?: MirrorUpdateManyWithWhereWithoutBuildInput | MirrorUpdateManyWithWhereWithoutBuildInput[]
    deleteMany?: MirrorScalarWhereInput | MirrorScalarWhereInput[]
  }

  export type DownloadLogUpdateManyWithoutBuildNestedInput = {
    create?: XOR<DownloadLogCreateWithoutBuildInput, DownloadLogUncheckedCreateWithoutBuildInput> | DownloadLogCreateWithoutBuildInput[] | DownloadLogUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutBuildInput | DownloadLogCreateOrConnectWithoutBuildInput[]
    upsert?: DownloadLogUpsertWithWhereUniqueWithoutBuildInput | DownloadLogUpsertWithWhereUniqueWithoutBuildInput[]
    createMany?: DownloadLogCreateManyBuildInputEnvelope
    set?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    disconnect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    delete?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    update?: DownloadLogUpdateWithWhereUniqueWithoutBuildInput | DownloadLogUpdateWithWhereUniqueWithoutBuildInput[]
    updateMany?: DownloadLogUpdateManyWithWhereWithoutBuildInput | DownloadLogUpdateManyWithWhereWithoutBuildInput[]
    deleteMany?: DownloadLogScalarWhereInput | DownloadLogScalarWhereInput[]
  }

  export type MirrorUncheckedUpdateManyWithoutBuildNestedInput = {
    create?: XOR<MirrorCreateWithoutBuildInput, MirrorUncheckedCreateWithoutBuildInput> | MirrorCreateWithoutBuildInput[] | MirrorUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: MirrorCreateOrConnectWithoutBuildInput | MirrorCreateOrConnectWithoutBuildInput[]
    upsert?: MirrorUpsertWithWhereUniqueWithoutBuildInput | MirrorUpsertWithWhereUniqueWithoutBuildInput[]
    createMany?: MirrorCreateManyBuildInputEnvelope
    set?: MirrorWhereUniqueInput | MirrorWhereUniqueInput[]
    disconnect?: MirrorWhereUniqueInput | MirrorWhereUniqueInput[]
    delete?: MirrorWhereUniqueInput | MirrorWhereUniqueInput[]
    connect?: MirrorWhereUniqueInput | MirrorWhereUniqueInput[]
    update?: MirrorUpdateWithWhereUniqueWithoutBuildInput | MirrorUpdateWithWhereUniqueWithoutBuildInput[]
    updateMany?: MirrorUpdateManyWithWhereWithoutBuildInput | MirrorUpdateManyWithWhereWithoutBuildInput[]
    deleteMany?: MirrorScalarWhereInput | MirrorScalarWhereInput[]
  }

  export type DownloadLogUncheckedUpdateManyWithoutBuildNestedInput = {
    create?: XOR<DownloadLogCreateWithoutBuildInput, DownloadLogUncheckedCreateWithoutBuildInput> | DownloadLogCreateWithoutBuildInput[] | DownloadLogUncheckedCreateWithoutBuildInput[]
    connectOrCreate?: DownloadLogCreateOrConnectWithoutBuildInput | DownloadLogCreateOrConnectWithoutBuildInput[]
    upsert?: DownloadLogUpsertWithWhereUniqueWithoutBuildInput | DownloadLogUpsertWithWhereUniqueWithoutBuildInput[]
    createMany?: DownloadLogCreateManyBuildInputEnvelope
    set?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    disconnect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    delete?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    connect?: DownloadLogWhereUniqueInput | DownloadLogWhereUniqueInput[]
    update?: DownloadLogUpdateWithWhereUniqueWithoutBuildInput | DownloadLogUpdateWithWhereUniqueWithoutBuildInput[]
    updateMany?: DownloadLogUpdateManyWithWhereWithoutBuildInput | DownloadLogUpdateManyWithWhereWithoutBuildInput[]
    deleteMany?: DownloadLogScalarWhereInput | DownloadLogScalarWhereInput[]
  }

  export type BuildCreateNestedOneWithoutMirrorsInput = {
    create?: XOR<BuildCreateWithoutMirrorsInput, BuildUncheckedCreateWithoutMirrorsInput>
    connectOrCreate?: BuildCreateOrConnectWithoutMirrorsInput
    connect?: BuildWhereUniqueInput
  }

  export type BuildUpdateOneRequiredWithoutMirrorsNestedInput = {
    create?: XOR<BuildCreateWithoutMirrorsInput, BuildUncheckedCreateWithoutMirrorsInput>
    connectOrCreate?: BuildCreateOrConnectWithoutMirrorsInput
    upsert?: BuildUpsertWithoutMirrorsInput
    connect?: BuildWhereUniqueInput
    update?: XOR<XOR<BuildUpdateToOneWithWhereWithoutMirrorsInput, BuildUpdateWithoutMirrorsInput>, BuildUncheckedUpdateWithoutMirrorsInput>
  }

  export type SoftwareCreateNestedOneWithoutMediaInput = {
    create?: XOR<SoftwareCreateWithoutMediaInput, SoftwareUncheckedCreateWithoutMediaInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutMediaInput
    connect?: SoftwareWhereUniqueInput
  }

  export type EnumMediaTypeFieldUpdateOperationsInput = {
    set?: $Enums.MediaType
  }

  export type SoftwareUpdateOneRequiredWithoutMediaNestedInput = {
    create?: XOR<SoftwareCreateWithoutMediaInput, SoftwareUncheckedCreateWithoutMediaInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutMediaInput
    upsert?: SoftwareUpsertWithoutMediaInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutMediaInput, SoftwareUpdateWithoutMediaInput>, SoftwareUncheckedUpdateWithoutMediaInput>
  }

  export type SoftwareCreateNestedOneWithoutCommentsInput = {
    create?: XOR<SoftwareCreateWithoutCommentsInput, SoftwareUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutCommentsInput
    connect?: SoftwareWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCommentStatusFieldUpdateOperationsInput = {
    set?: $Enums.CommentStatus
  }

  export type SoftwareUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<SoftwareCreateWithoutCommentsInput, SoftwareUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutCommentsInput
    upsert?: SoftwareUpsertWithoutCommentsInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutCommentsInput, SoftwareUpdateWithoutCommentsInput>, SoftwareUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type SoftwareCreateNestedOneWithoutReviewsInput = {
    create?: XOR<SoftwareCreateWithoutReviewsInput, SoftwareUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutReviewsInput
    connect?: SoftwareWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type SoftwareUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<SoftwareCreateWithoutReviewsInput, SoftwareUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutReviewsInput
    upsert?: SoftwareUpsertWithoutReviewsInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutReviewsInput, SoftwareUpdateWithoutReviewsInput>, SoftwareUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type SoftwareCreateNestedOneWithoutRequirementsInput = {
    create?: XOR<SoftwareCreateWithoutRequirementsInput, SoftwareUncheckedCreateWithoutRequirementsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutRequirementsInput
    connect?: SoftwareWhereUniqueInput
  }

  export type SoftwareUpdateOneRequiredWithoutRequirementsNestedInput = {
    create?: XOR<SoftwareCreateWithoutRequirementsInput, SoftwareUncheckedCreateWithoutRequirementsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutRequirementsInput
    upsert?: SoftwareUpsertWithoutRequirementsInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutRequirementsInput, SoftwareUpdateWithoutRequirementsInput>, SoftwareUncheckedUpdateWithoutRequirementsInput>
  }

  export type SoftwareCreateNestedOneWithoutFaqsInput = {
    create?: XOR<SoftwareCreateWithoutFaqsInput, SoftwareUncheckedCreateWithoutFaqsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutFaqsInput
    connect?: SoftwareWhereUniqueInput
  }

  export type SoftwareUpdateOneRequiredWithoutFaqsNestedInput = {
    create?: XOR<SoftwareCreateWithoutFaqsInput, SoftwareUncheckedCreateWithoutFaqsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutFaqsInput
    upsert?: SoftwareUpsertWithoutFaqsInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutFaqsInput, SoftwareUpdateWithoutFaqsInput>, SoftwareUncheckedUpdateWithoutFaqsInput>
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type EnumPageStatusFieldUpdateOperationsInput = {
    set?: $Enums.PageStatus
  }

  export type SoftwareCreateNestedOneWithoutLogsInput = {
    create?: XOR<SoftwareCreateWithoutLogsInput, SoftwareUncheckedCreateWithoutLogsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutLogsInput
    connect?: SoftwareWhereUniqueInput
  }

  export type VersionCreateNestedOneWithoutLogsInput = {
    create?: XOR<VersionCreateWithoutLogsInput, VersionUncheckedCreateWithoutLogsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutLogsInput
    connect?: VersionWhereUniqueInput
  }

  export type BuildCreateNestedOneWithoutLogsInput = {
    create?: XOR<BuildCreateWithoutLogsInput, BuildUncheckedCreateWithoutLogsInput>
    connectOrCreate?: BuildCreateOrConnectWithoutLogsInput
    connect?: BuildWhereUniqueInput
  }

  export type SoftwareUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<SoftwareCreateWithoutLogsInput, SoftwareUncheckedCreateWithoutLogsInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutLogsInput
    upsert?: SoftwareUpsertWithoutLogsInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutLogsInput, SoftwareUpdateWithoutLogsInput>, SoftwareUncheckedUpdateWithoutLogsInput>
  }

  export type VersionUpdateOneWithoutLogsNestedInput = {
    create?: XOR<VersionCreateWithoutLogsInput, VersionUncheckedCreateWithoutLogsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutLogsInput
    upsert?: VersionUpsertWithoutLogsInput
    disconnect?: VersionWhereInput | boolean
    delete?: VersionWhereInput | boolean
    connect?: VersionWhereUniqueInput
    update?: XOR<XOR<VersionUpdateToOneWithWhereWithoutLogsInput, VersionUpdateWithoutLogsInput>, VersionUncheckedUpdateWithoutLogsInput>
  }

  export type BuildUpdateOneWithoutLogsNestedInput = {
    create?: XOR<BuildCreateWithoutLogsInput, BuildUncheckedCreateWithoutLogsInput>
    connectOrCreate?: BuildCreateOrConnectWithoutLogsInput
    upsert?: BuildUpsertWithoutLogsInput
    disconnect?: BuildWhereInput | boolean
    delete?: BuildWhereInput | boolean
    connect?: BuildWhereUniqueInput
    update?: XOR<XOR<BuildUpdateToOneWithWhereWithoutLogsInput, BuildUpdateWithoutLogsInput>, BuildUncheckedUpdateWithoutLogsInput>
  }

  export type SoftwareCreateNestedOneWithoutCounterInput = {
    create?: XOR<SoftwareCreateWithoutCounterInput, SoftwareUncheckedCreateWithoutCounterInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutCounterInput
    connect?: SoftwareWhereUniqueInput
  }

  export type SoftwareUpdateOneRequiredWithoutCounterNestedInput = {
    create?: XOR<SoftwareCreateWithoutCounterInput, SoftwareUncheckedCreateWithoutCounterInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutCounterInput
    upsert?: SoftwareUpsertWithoutCounterInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutCounterInput, SoftwareUpdateWithoutCounterInput>, SoftwareUncheckedUpdateWithoutCounterInput>
  }

  export type SoftwareCreateNestedOneWithoutCounter30dInput = {
    create?: XOR<SoftwareCreateWithoutCounter30dInput, SoftwareUncheckedCreateWithoutCounter30dInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutCounter30dInput
    connect?: SoftwareWhereUniqueInput
  }

  export type SoftwareUpdateOneRequiredWithoutCounter30dNestedInput = {
    create?: XOR<SoftwareCreateWithoutCounter30dInput, SoftwareUncheckedCreateWithoutCounter30dInput>
    connectOrCreate?: SoftwareCreateOrConnectWithoutCounter30dInput
    upsert?: SoftwareUpsertWithoutCounter30dInput
    connect?: SoftwareWhereUniqueInput
    update?: XOR<XOR<SoftwareUpdateToOneWithWhereWithoutCounter30dInput, SoftwareUpdateWithoutCounter30dInput>, SoftwareUncheckedUpdateWithoutCounter30dInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumBuildTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BuildType | EnumBuildTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BuildType[] | null
    notIn?: $Enums.BuildType[] | null
    not?: NestedEnumBuildTypeNullableFilter<$PrismaModel> | $Enums.BuildType | null
  }

  export type NestedEnumBuildTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BuildType | EnumBuildTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BuildType[] | null
    notIn?: $Enums.BuildType[] | null
    not?: NestedEnumBuildTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BuildType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBuildTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBuildTypeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumMediaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[]
    notIn?: $Enums.MediaType[]
    not?: NestedEnumMediaTypeFilter<$PrismaModel> | $Enums.MediaType
  }

  export type NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MediaType | EnumMediaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MediaType[]
    notIn?: $Enums.MediaType[]
    not?: NestedEnumMediaTypeWithAggregatesFilter<$PrismaModel> | $Enums.MediaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMediaTypeFilter<$PrismaModel>
    _max?: NestedEnumMediaTypeFilter<$PrismaModel>
  }

  export type NestedEnumCommentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentStatus | EnumCommentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CommentStatus[]
    notIn?: $Enums.CommentStatus[]
    not?: NestedEnumCommentStatusFilter<$PrismaModel> | $Enums.CommentStatus
  }

  export type NestedEnumCommentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentStatus | EnumCommentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CommentStatus[]
    notIn?: $Enums.CommentStatus[]
    not?: NestedEnumCommentStatusWithAggregatesFilter<$PrismaModel> | $Enums.CommentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommentStatusFilter<$PrismaModel>
    _max?: NestedEnumCommentStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumPageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PageStatus | EnumPageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PageStatus[]
    notIn?: $Enums.PageStatus[]
    not?: NestedEnumPageStatusFilter<$PrismaModel> | $Enums.PageStatus
  }

  export type NestedEnumPageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PageStatus | EnumPageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PageStatus[]
    notIn?: $Enums.PageStatus[]
    not?: NestedEnumPageStatusWithAggregatesFilter<$PrismaModel> | $Enums.PageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPageStatusFilter<$PrismaModel>
    _max?: NestedEnumPageStatusFilter<$PrismaModel>
  }

  export type CategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    software?: SoftwareCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    slug: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    software?: SoftwareCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutChildrenInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
  }

  export type CategoryCreateWithoutParentInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryCreateNestedManyWithoutParentInput
    software?: SoftwareCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
    software?: SoftwareCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutParentInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryCreateManyParentInputEnvelope = {
    data: CategoryCreateManyParentInput | CategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type SoftwareCategoryCreateWithoutCategoryInput = {
    software: SoftwareCreateNestedOneWithoutCategoriesInput
  }

  export type SoftwareCategoryUncheckedCreateWithoutCategoryInput = {
    softwareId: string
  }

  export type SoftwareCategoryCreateOrConnectWithoutCategoryInput = {
    where: SoftwareCategoryWhereUniqueInput
    create: XOR<SoftwareCategoryCreateWithoutCategoryInput, SoftwareCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type SoftwareCategoryCreateManyCategoryInputEnvelope = {
    data: SoftwareCategoryCreateManyCategoryInput | SoftwareCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutChildrenInput = {
    update: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<CategoryCreateWithoutChildrenInput, CategoryUncheckedCreateWithoutChildrenInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutChildrenInput, CategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type CategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    software?: SoftwareCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
    create: XOR<CategoryCreateWithoutParentInput, CategoryUncheckedCreateWithoutParentInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParentInput, CategoryUncheckedUpdateWithoutParentInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParentInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
  }

  export type SoftwareCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: SoftwareCategoryWhereUniqueInput
    update: XOR<SoftwareCategoryUpdateWithoutCategoryInput, SoftwareCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<SoftwareCategoryCreateWithoutCategoryInput, SoftwareCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type SoftwareCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: SoftwareCategoryWhereUniqueInput
    data: XOR<SoftwareCategoryUpdateWithoutCategoryInput, SoftwareCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type SoftwareCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: SoftwareCategoryScalarWhereInput
    data: XOR<SoftwareCategoryUpdateManyMutationInput, SoftwareCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type SoftwareCategoryScalarWhereInput = {
    AND?: SoftwareCategoryScalarWhereInput | SoftwareCategoryScalarWhereInput[]
    OR?: SoftwareCategoryScalarWhereInput[]
    NOT?: SoftwareCategoryScalarWhereInput | SoftwareCategoryScalarWhereInput[]
    softwareId?: StringFilter<"SoftwareCategory"> | string
    categoryId?: StringFilter<"SoftwareCategory"> | string
  }

  export type SoftwareCreateWithoutTagsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutTagsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutTagsInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutTagsInput, SoftwareUncheckedCreateWithoutTagsInput>
  }

  export type SoftwareUpsertWithWhereUniqueWithoutTagsInput = {
    where: SoftwareWhereUniqueInput
    update: XOR<SoftwareUpdateWithoutTagsInput, SoftwareUncheckedUpdateWithoutTagsInput>
    create: XOR<SoftwareCreateWithoutTagsInput, SoftwareUncheckedCreateWithoutTagsInput>
  }

  export type SoftwareUpdateWithWhereUniqueWithoutTagsInput = {
    where: SoftwareWhereUniqueInput
    data: XOR<SoftwareUpdateWithoutTagsInput, SoftwareUncheckedUpdateWithoutTagsInput>
  }

  export type SoftwareUpdateManyWithWhereWithoutTagsInput = {
    where: SoftwareScalarWhereInput
    data: XOR<SoftwareUpdateManyMutationInput, SoftwareUncheckedUpdateManyWithoutTagsInput>
  }

  export type SoftwareScalarWhereInput = {
    AND?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
    OR?: SoftwareScalarWhereInput[]
    NOT?: SoftwareScalarWhereInput | SoftwareScalarWhereInput[]
    id?: StringFilter<"Software"> | string
    slug?: StringFilter<"Software"> | string
    name?: StringFilter<"Software"> | string
    license?: StringNullableFilter<"Software"> | string | null
    homepage?: StringNullableFilter<"Software"> | string | null
    shortDesc?: StringNullableFilter<"Software"> | string | null
    longDesc?: StringNullableFilter<"Software"> | string | null
    os?: JsonNullableFilter<"Software">
    iconUrl?: StringNullableFilter<"Software"> | string | null
    heroUrl?: StringNullableFilter<"Software"> | string | null
    ratingsAvg?: FloatFilter<"Software"> | number
    ratingsCount?: IntFilter<"Software"> | number
    isLatest?: BoolFilter<"Software"> | boolean
    isUpdated?: BoolFilter<"Software"> | boolean
    isRecommended?: BoolFilter<"Software"> | boolean
    isNew?: BoolFilter<"Software"> | boolean
    lastUpdatedAt?: DateTimeFilter<"Software"> | Date | string
    publishedAt?: DateTimeNullableFilter<"Software"> | Date | string | null
    status?: StringFilter<"Software"> | string
    createdAt?: DateTimeFilter<"Software"> | Date | string
    updatedAt?: DateTimeFilter<"Software"> | Date | string
    vendorId?: StringNullableFilter<"Software"> | string | null
  }

  export type SoftwareCreateWithoutCategoriesInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutCategoriesInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutCategoriesInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutCategoriesInput, SoftwareUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutSoftwareInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: CategoryCreateNestedOneWithoutChildrenInput
    children?: CategoryCreateNestedManyWithoutParentInput
  }

  export type CategoryUncheckedCreateWithoutSoftwareInput = {
    id?: string
    name: string
    slug: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: CategoryUncheckedCreateNestedManyWithoutParentInput
  }

  export type CategoryCreateOrConnectWithoutSoftwareInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutSoftwareInput, CategoryUncheckedCreateWithoutSoftwareInput>
  }

  export type SoftwareUpsertWithoutCategoriesInput = {
    update: XOR<SoftwareUpdateWithoutCategoriesInput, SoftwareUncheckedUpdateWithoutCategoriesInput>
    create: XOR<SoftwareCreateWithoutCategoriesInput, SoftwareUncheckedCreateWithoutCategoriesInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutCategoriesInput, SoftwareUncheckedUpdateWithoutCategoriesInput>
  }

  export type SoftwareUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type CategoryUpsertWithoutSoftwareInput = {
    update: XOR<CategoryUpdateWithoutSoftwareInput, CategoryUncheckedUpdateWithoutSoftwareInput>
    create: XOR<CategoryCreateWithoutSoftwareInput, CategoryUncheckedCreateWithoutSoftwareInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutSoftwareInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutSoftwareInput, CategoryUncheckedUpdateWithoutSoftwareInput>
  }

  export type CategoryUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: CategoryUpdateOneWithoutChildrenNestedInput
    children?: CategoryUpdateManyWithoutParentNestedInput
  }

  export type CategoryUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
  }

  export type SoftwareCreateWithoutVendorInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutVendorInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutVendorInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput>
  }

  export type SoftwareCreateManyVendorInputEnvelope = {
    data: SoftwareCreateManyVendorInput | SoftwareCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type SoftwareUpsertWithWhereUniqueWithoutVendorInput = {
    where: SoftwareWhereUniqueInput
    update: XOR<SoftwareUpdateWithoutVendorInput, SoftwareUncheckedUpdateWithoutVendorInput>
    create: XOR<SoftwareCreateWithoutVendorInput, SoftwareUncheckedCreateWithoutVendorInput>
  }

  export type SoftwareUpdateWithWhereUniqueWithoutVendorInput = {
    where: SoftwareWhereUniqueInput
    data: XOR<SoftwareUpdateWithoutVendorInput, SoftwareUncheckedUpdateWithoutVendorInput>
  }

  export type SoftwareUpdateManyWithWhereWithoutVendorInput = {
    where: SoftwareScalarWhereInput
    data: XOR<SoftwareUpdateManyMutationInput, SoftwareUncheckedUpdateManyWithoutVendorInput>
  }

  export type VendorCreateWithoutSoftwaresInput = {
    id?: string
    name: string
    slug: string
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorUncheckedCreateWithoutSoftwaresInput = {
    id?: string
    name: string
    slug: string
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorCreateOrConnectWithoutSoftwaresInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutSoftwaresInput, VendorUncheckedCreateWithoutSoftwaresInput>
  }

  export type SoftwareCategoryCreateWithoutSoftwareInput = {
    category: CategoryCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCategoryUncheckedCreateWithoutSoftwareInput = {
    categoryId: string
  }

  export type SoftwareCategoryCreateOrConnectWithoutSoftwareInput = {
    where: SoftwareCategoryWhereUniqueInput
    create: XOR<SoftwareCategoryCreateWithoutSoftwareInput, SoftwareCategoryUncheckedCreateWithoutSoftwareInput>
  }

  export type SoftwareCategoryCreateManySoftwareInputEnvelope = {
    data: SoftwareCategoryCreateManySoftwareInput | SoftwareCategoryCreateManySoftwareInput[]
    skipDuplicates?: boolean
  }

  export type VersionCreateWithoutSoftwareInput = {
    id?: string
    version: string
    osLabel?: string | null
    license?: string | null
    changelog?: string | null
    releasedAt?: Date | string | null
    createdAt?: Date | string
    builds?: BuildCreateNestedManyWithoutVersionInput
    logs?: DownloadLogCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutSoftwareInput = {
    id?: string
    version: string
    osLabel?: string | null
    license?: string | null
    changelog?: string | null
    releasedAt?: Date | string | null
    createdAt?: Date | string
    builds?: BuildUncheckedCreateNestedManyWithoutVersionInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutSoftwareInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutSoftwareInput, VersionUncheckedCreateWithoutSoftwareInput>
  }

  export type VersionCreateManySoftwareInputEnvelope = {
    data: VersionCreateManySoftwareInput | VersionCreateManySoftwareInput[]
    skipDuplicates?: boolean
  }

  export type SoftwareMediaCreateWithoutSoftwareInput = {
    id?: string
    type: $Enums.MediaType
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type SoftwareMediaUncheckedCreateWithoutSoftwareInput = {
    id?: string
    type: $Enums.MediaType
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type SoftwareMediaCreateOrConnectWithoutSoftwareInput = {
    where: SoftwareMediaWhereUniqueInput
    create: XOR<SoftwareMediaCreateWithoutSoftwareInput, SoftwareMediaUncheckedCreateWithoutSoftwareInput>
  }

  export type SoftwareMediaCreateManySoftwareInputEnvelope = {
    data: SoftwareMediaCreateManySoftwareInput | SoftwareMediaCreateManySoftwareInput[]
    skipDuplicates?: boolean
  }

  export type FAQCreateWithoutSoftwareInput = {
    id?: string
    question: string
    answer: string
    order?: number
  }

  export type FAQUncheckedCreateWithoutSoftwareInput = {
    id?: string
    question: string
    answer: string
    order?: number
  }

  export type FAQCreateOrConnectWithoutSoftwareInput = {
    where: FAQWhereUniqueInput
    create: XOR<FAQCreateWithoutSoftwareInput, FAQUncheckedCreateWithoutSoftwareInput>
  }

  export type FAQCreateManySoftwareInputEnvelope = {
    data: FAQCreateManySoftwareInput | FAQCreateManySoftwareInput[]
    skipDuplicates?: boolean
  }

  export type SystemRequirementCreateWithoutSoftwareInput = {
    id?: string
    os: string
    minimum: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SystemRequirementUncheckedCreateWithoutSoftwareInput = {
    id?: string
    os: string
    minimum: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SystemRequirementCreateOrConnectWithoutSoftwareInput = {
    where: SystemRequirementWhereUniqueInput
    create: XOR<SystemRequirementCreateWithoutSoftwareInput, SystemRequirementUncheckedCreateWithoutSoftwareInput>
  }

  export type SystemRequirementCreateManySoftwareInputEnvelope = {
    data: SystemRequirementCreateManySoftwareInput | SystemRequirementCreateManySoftwareInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutSoftwareInput = {
    id?: string
    name?: string | null
    email?: string | null
    content: string
    status?: $Enums.CommentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutSoftwareInput = {
    id?: string
    userId?: string | null
    name?: string | null
    email?: string | null
    content: string
    status?: $Enums.CommentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutSoftwareInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutSoftwareInput, CommentUncheckedCreateWithoutSoftwareInput>
  }

  export type CommentCreateManySoftwareInputEnvelope = {
    data: CommentCreateManySoftwareInput | CommentCreateManySoftwareInput[]
    skipDuplicates?: boolean
  }

  export type TagCreateWithoutSoftwaresInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
  }

  export type TagUncheckedCreateWithoutSoftwaresInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
  }

  export type TagCreateOrConnectWithoutSoftwaresInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutSoftwaresInput, TagUncheckedCreateWithoutSoftwaresInput>
  }

  export type ReviewCreateWithoutSoftwareInput = {
    id?: string
    rating: number
    title?: string | null
    body?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutSoftwareInput = {
    id?: string
    userId: string
    rating: number
    title?: string | null
    body?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutSoftwareInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutSoftwareInput, ReviewUncheckedCreateWithoutSoftwareInput>
  }

  export type ReviewCreateManySoftwareInputEnvelope = {
    data: ReviewCreateManySoftwareInput | ReviewCreateManySoftwareInput[]
    skipDuplicates?: boolean
  }

  export type DownloadLogCreateWithoutSoftwareInput = {
    id?: string
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
    version?: VersionCreateNestedOneWithoutLogsInput
    build?: BuildCreateNestedOneWithoutLogsInput
  }

  export type DownloadLogUncheckedCreateWithoutSoftwareInput = {
    id?: string
    versionId?: string | null
    buildId?: string | null
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
  }

  export type DownloadLogCreateOrConnectWithoutSoftwareInput = {
    where: DownloadLogWhereUniqueInput
    create: XOR<DownloadLogCreateWithoutSoftwareInput, DownloadLogUncheckedCreateWithoutSoftwareInput>
  }

  export type DownloadLogCreateManySoftwareInputEnvelope = {
    data: DownloadLogCreateManySoftwareInput | DownloadLogCreateManySoftwareInput[]
    skipDuplicates?: boolean
  }

  export type DownloadCounterCreateWithoutSoftwareInput = {
    total?: number
    updatedAt?: Date | string
  }

  export type DownloadCounterUncheckedCreateWithoutSoftwareInput = {
    total?: number
    updatedAt?: Date | string
  }

  export type DownloadCounterCreateOrConnectWithoutSoftwareInput = {
    where: DownloadCounterWhereUniqueInput
    create: XOR<DownloadCounterCreateWithoutSoftwareInput, DownloadCounterUncheckedCreateWithoutSoftwareInput>
  }

  export type DownloadCounter30dCreateWithoutSoftwareInput = {
    total30d?: number
    computedAt?: Date | string
  }

  export type DownloadCounter30dUncheckedCreateWithoutSoftwareInput = {
    total30d?: number
    computedAt?: Date | string
  }

  export type DownloadCounter30dCreateOrConnectWithoutSoftwareInput = {
    where: DownloadCounter30dWhereUniqueInput
    create: XOR<DownloadCounter30dCreateWithoutSoftwareInput, DownloadCounter30dUncheckedCreateWithoutSoftwareInput>
  }

  export type VendorUpsertWithoutSoftwaresInput = {
    update: XOR<VendorUpdateWithoutSoftwaresInput, VendorUncheckedUpdateWithoutSoftwaresInput>
    create: XOR<VendorCreateWithoutSoftwaresInput, VendorUncheckedCreateWithoutSoftwaresInput>
    where?: VendorWhereInput
  }

  export type VendorUpdateToOneWithWhereWithoutSoftwaresInput = {
    where?: VendorWhereInput
    data: XOR<VendorUpdateWithoutSoftwaresInput, VendorUncheckedUpdateWithoutSoftwaresInput>
  }

  export type VendorUpdateWithoutSoftwaresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateWithoutSoftwaresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareCategoryUpsertWithWhereUniqueWithoutSoftwareInput = {
    where: SoftwareCategoryWhereUniqueInput
    update: XOR<SoftwareCategoryUpdateWithoutSoftwareInput, SoftwareCategoryUncheckedUpdateWithoutSoftwareInput>
    create: XOR<SoftwareCategoryCreateWithoutSoftwareInput, SoftwareCategoryUncheckedCreateWithoutSoftwareInput>
  }

  export type SoftwareCategoryUpdateWithWhereUniqueWithoutSoftwareInput = {
    where: SoftwareCategoryWhereUniqueInput
    data: XOR<SoftwareCategoryUpdateWithoutSoftwareInput, SoftwareCategoryUncheckedUpdateWithoutSoftwareInput>
  }

  export type SoftwareCategoryUpdateManyWithWhereWithoutSoftwareInput = {
    where: SoftwareCategoryScalarWhereInput
    data: XOR<SoftwareCategoryUpdateManyMutationInput, SoftwareCategoryUncheckedUpdateManyWithoutSoftwareInput>
  }

  export type VersionUpsertWithWhereUniqueWithoutSoftwareInput = {
    where: VersionWhereUniqueInput
    update: XOR<VersionUpdateWithoutSoftwareInput, VersionUncheckedUpdateWithoutSoftwareInput>
    create: XOR<VersionCreateWithoutSoftwareInput, VersionUncheckedCreateWithoutSoftwareInput>
  }

  export type VersionUpdateWithWhereUniqueWithoutSoftwareInput = {
    where: VersionWhereUniqueInput
    data: XOR<VersionUpdateWithoutSoftwareInput, VersionUncheckedUpdateWithoutSoftwareInput>
  }

  export type VersionUpdateManyWithWhereWithoutSoftwareInput = {
    where: VersionScalarWhereInput
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyWithoutSoftwareInput>
  }

  export type VersionScalarWhereInput = {
    AND?: VersionScalarWhereInput | VersionScalarWhereInput[]
    OR?: VersionScalarWhereInput[]
    NOT?: VersionScalarWhereInput | VersionScalarWhereInput[]
    id?: StringFilter<"Version"> | string
    softwareId?: StringFilter<"Version"> | string
    version?: StringFilter<"Version"> | string
    osLabel?: StringNullableFilter<"Version"> | string | null
    license?: StringNullableFilter<"Version"> | string | null
    changelog?: StringNullableFilter<"Version"> | string | null
    releasedAt?: DateTimeNullableFilter<"Version"> | Date | string | null
    createdAt?: DateTimeFilter<"Version"> | Date | string
  }

  export type SoftwareMediaUpsertWithWhereUniqueWithoutSoftwareInput = {
    where: SoftwareMediaWhereUniqueInput
    update: XOR<SoftwareMediaUpdateWithoutSoftwareInput, SoftwareMediaUncheckedUpdateWithoutSoftwareInput>
    create: XOR<SoftwareMediaCreateWithoutSoftwareInput, SoftwareMediaUncheckedCreateWithoutSoftwareInput>
  }

  export type SoftwareMediaUpdateWithWhereUniqueWithoutSoftwareInput = {
    where: SoftwareMediaWhereUniqueInput
    data: XOR<SoftwareMediaUpdateWithoutSoftwareInput, SoftwareMediaUncheckedUpdateWithoutSoftwareInput>
  }

  export type SoftwareMediaUpdateManyWithWhereWithoutSoftwareInput = {
    where: SoftwareMediaScalarWhereInput
    data: XOR<SoftwareMediaUpdateManyMutationInput, SoftwareMediaUncheckedUpdateManyWithoutSoftwareInput>
  }

  export type SoftwareMediaScalarWhereInput = {
    AND?: SoftwareMediaScalarWhereInput | SoftwareMediaScalarWhereInput[]
    OR?: SoftwareMediaScalarWhereInput[]
    NOT?: SoftwareMediaScalarWhereInput | SoftwareMediaScalarWhereInput[]
    id?: StringFilter<"SoftwareMedia"> | string
    softwareId?: StringFilter<"SoftwareMedia"> | string
    type?: EnumMediaTypeFilter<"SoftwareMedia"> | $Enums.MediaType
    url?: StringFilter<"SoftwareMedia"> | string
    alt?: StringNullableFilter<"SoftwareMedia"> | string | null
    order?: IntFilter<"SoftwareMedia"> | number
    createdAt?: DateTimeFilter<"SoftwareMedia"> | Date | string
  }

  export type FAQUpsertWithWhereUniqueWithoutSoftwareInput = {
    where: FAQWhereUniqueInput
    update: XOR<FAQUpdateWithoutSoftwareInput, FAQUncheckedUpdateWithoutSoftwareInput>
    create: XOR<FAQCreateWithoutSoftwareInput, FAQUncheckedCreateWithoutSoftwareInput>
  }

  export type FAQUpdateWithWhereUniqueWithoutSoftwareInput = {
    where: FAQWhereUniqueInput
    data: XOR<FAQUpdateWithoutSoftwareInput, FAQUncheckedUpdateWithoutSoftwareInput>
  }

  export type FAQUpdateManyWithWhereWithoutSoftwareInput = {
    where: FAQScalarWhereInput
    data: XOR<FAQUpdateManyMutationInput, FAQUncheckedUpdateManyWithoutSoftwareInput>
  }

  export type FAQScalarWhereInput = {
    AND?: FAQScalarWhereInput | FAQScalarWhereInput[]
    OR?: FAQScalarWhereInput[]
    NOT?: FAQScalarWhereInput | FAQScalarWhereInput[]
    id?: StringFilter<"FAQ"> | string
    softwareId?: StringFilter<"FAQ"> | string
    question?: StringFilter<"FAQ"> | string
    answer?: StringFilter<"FAQ"> | string
    order?: IntFilter<"FAQ"> | number
  }

  export type SystemRequirementUpsertWithWhereUniqueWithoutSoftwareInput = {
    where: SystemRequirementWhereUniqueInput
    update: XOR<SystemRequirementUpdateWithoutSoftwareInput, SystemRequirementUncheckedUpdateWithoutSoftwareInput>
    create: XOR<SystemRequirementCreateWithoutSoftwareInput, SystemRequirementUncheckedCreateWithoutSoftwareInput>
  }

  export type SystemRequirementUpdateWithWhereUniqueWithoutSoftwareInput = {
    where: SystemRequirementWhereUniqueInput
    data: XOR<SystemRequirementUpdateWithoutSoftwareInput, SystemRequirementUncheckedUpdateWithoutSoftwareInput>
  }

  export type SystemRequirementUpdateManyWithWhereWithoutSoftwareInput = {
    where: SystemRequirementScalarWhereInput
    data: XOR<SystemRequirementUpdateManyMutationInput, SystemRequirementUncheckedUpdateManyWithoutSoftwareInput>
  }

  export type SystemRequirementScalarWhereInput = {
    AND?: SystemRequirementScalarWhereInput | SystemRequirementScalarWhereInput[]
    OR?: SystemRequirementScalarWhereInput[]
    NOT?: SystemRequirementScalarWhereInput | SystemRequirementScalarWhereInput[]
    id?: StringFilter<"SystemRequirement"> | string
    softwareId?: StringFilter<"SystemRequirement"> | string
    os?: StringFilter<"SystemRequirement"> | string
    minimum?: JsonFilter<"SystemRequirement">
    recommended?: JsonNullableFilter<"SystemRequirement">
  }

  export type CommentUpsertWithWhereUniqueWithoutSoftwareInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutSoftwareInput, CommentUncheckedUpdateWithoutSoftwareInput>
    create: XOR<CommentCreateWithoutSoftwareInput, CommentUncheckedCreateWithoutSoftwareInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutSoftwareInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutSoftwareInput, CommentUncheckedUpdateWithoutSoftwareInput>
  }

  export type CommentUpdateManyWithWhereWithoutSoftwareInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutSoftwareInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    softwareId?: StringFilter<"Comment"> | string
    userId?: StringNullableFilter<"Comment"> | string | null
    name?: StringNullableFilter<"Comment"> | string | null
    email?: StringNullableFilter<"Comment"> | string | null
    content?: StringFilter<"Comment"> | string
    status?: EnumCommentStatusFilter<"Comment"> | $Enums.CommentStatus
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type TagUpsertWithWhereUniqueWithoutSoftwaresInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutSoftwaresInput, TagUncheckedUpdateWithoutSoftwaresInput>
    create: XOR<TagCreateWithoutSoftwaresInput, TagUncheckedCreateWithoutSoftwaresInput>
  }

  export type TagUpdateWithWhereUniqueWithoutSoftwaresInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutSoftwaresInput, TagUncheckedUpdateWithoutSoftwaresInput>
  }

  export type TagUpdateManyWithWhereWithoutSoftwaresInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutSoftwaresInput>
  }

  export type TagScalarWhereInput = {
    AND?: TagScalarWhereInput | TagScalarWhereInput[]
    OR?: TagScalarWhereInput[]
    NOT?: TagScalarWhereInput | TagScalarWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    slug?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutSoftwareInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutSoftwareInput, ReviewUncheckedUpdateWithoutSoftwareInput>
    create: XOR<ReviewCreateWithoutSoftwareInput, ReviewUncheckedCreateWithoutSoftwareInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutSoftwareInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutSoftwareInput, ReviewUncheckedUpdateWithoutSoftwareInput>
  }

  export type ReviewUpdateManyWithWhereWithoutSoftwareInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutSoftwareInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: StringFilter<"Review"> | string
    softwareId?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    title?: StringNullableFilter<"Review"> | string | null
    body?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type DownloadLogUpsertWithWhereUniqueWithoutSoftwareInput = {
    where: DownloadLogWhereUniqueInput
    update: XOR<DownloadLogUpdateWithoutSoftwareInput, DownloadLogUncheckedUpdateWithoutSoftwareInput>
    create: XOR<DownloadLogCreateWithoutSoftwareInput, DownloadLogUncheckedCreateWithoutSoftwareInput>
  }

  export type DownloadLogUpdateWithWhereUniqueWithoutSoftwareInput = {
    where: DownloadLogWhereUniqueInput
    data: XOR<DownloadLogUpdateWithoutSoftwareInput, DownloadLogUncheckedUpdateWithoutSoftwareInput>
  }

  export type DownloadLogUpdateManyWithWhereWithoutSoftwareInput = {
    where: DownloadLogScalarWhereInput
    data: XOR<DownloadLogUpdateManyMutationInput, DownloadLogUncheckedUpdateManyWithoutSoftwareInput>
  }

  export type DownloadLogScalarWhereInput = {
    AND?: DownloadLogScalarWhereInput | DownloadLogScalarWhereInput[]
    OR?: DownloadLogScalarWhereInput[]
    NOT?: DownloadLogScalarWhereInput | DownloadLogScalarWhereInput[]
    id?: StringFilter<"DownloadLog"> | string
    softwareId?: StringFilter<"DownloadLog"> | string
    versionId?: StringNullableFilter<"DownloadLog"> | string | null
    buildId?: StringNullableFilter<"DownloadLog"> | string | null
    ip?: StringNullableFilter<"DownloadLog"> | string | null
    ua?: StringNullableFilter<"DownloadLog"> | string | null
    referer?: StringNullableFilter<"DownloadLog"> | string | null
    createdAt?: DateTimeFilter<"DownloadLog"> | Date | string
  }

  export type DownloadCounterUpsertWithoutSoftwareInput = {
    update: XOR<DownloadCounterUpdateWithoutSoftwareInput, DownloadCounterUncheckedUpdateWithoutSoftwareInput>
    create: XOR<DownloadCounterCreateWithoutSoftwareInput, DownloadCounterUncheckedCreateWithoutSoftwareInput>
    where?: DownloadCounterWhereInput
  }

  export type DownloadCounterUpdateToOneWithWhereWithoutSoftwareInput = {
    where?: DownloadCounterWhereInput
    data: XOR<DownloadCounterUpdateWithoutSoftwareInput, DownloadCounterUncheckedUpdateWithoutSoftwareInput>
  }

  export type DownloadCounterUpdateWithoutSoftwareInput = {
    total?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadCounterUncheckedUpdateWithoutSoftwareInput = {
    total?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadCounter30dUpsertWithoutSoftwareInput = {
    update: XOR<DownloadCounter30dUpdateWithoutSoftwareInput, DownloadCounter30dUncheckedUpdateWithoutSoftwareInput>
    create: XOR<DownloadCounter30dCreateWithoutSoftwareInput, DownloadCounter30dUncheckedCreateWithoutSoftwareInput>
    where?: DownloadCounter30dWhereInput
  }

  export type DownloadCounter30dUpdateToOneWithWhereWithoutSoftwareInput = {
    where?: DownloadCounter30dWhereInput
    data: XOR<DownloadCounter30dUpdateWithoutSoftwareInput, DownloadCounter30dUncheckedUpdateWithoutSoftwareInput>
  }

  export type DownloadCounter30dUpdateWithoutSoftwareInput = {
    total30d?: IntFieldUpdateOperationsInput | number
    computedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadCounter30dUncheckedUpdateWithoutSoftwareInput = {
    total30d?: IntFieldUpdateOperationsInput | number
    computedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareCreateWithoutVersionsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutVersionsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutVersionsInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutVersionsInput, SoftwareUncheckedCreateWithoutVersionsInput>
  }

  export type BuildCreateWithoutVersionInput = {
    id?: string
    os?: string | null
    arch?: string | null
    buildType?: $Enums.BuildType | null
    sizeMB?: number | null
    fileSize?: string | null
    sha256?: string | null
    downloadUrl?: string | null
    createdAt?: Date | string
    mirrors?: MirrorCreateNestedManyWithoutBuildInput
    logs?: DownloadLogCreateNestedManyWithoutBuildInput
  }

  export type BuildUncheckedCreateWithoutVersionInput = {
    id?: string
    os?: string | null
    arch?: string | null
    buildType?: $Enums.BuildType | null
    sizeMB?: number | null
    fileSize?: string | null
    sha256?: string | null
    downloadUrl?: string | null
    createdAt?: Date | string
    mirrors?: MirrorUncheckedCreateNestedManyWithoutBuildInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutBuildInput
  }

  export type BuildCreateOrConnectWithoutVersionInput = {
    where: BuildWhereUniqueInput
    create: XOR<BuildCreateWithoutVersionInput, BuildUncheckedCreateWithoutVersionInput>
  }

  export type BuildCreateManyVersionInputEnvelope = {
    data: BuildCreateManyVersionInput | BuildCreateManyVersionInput[]
    skipDuplicates?: boolean
  }

  export type DownloadLogCreateWithoutVersionInput = {
    id?: string
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
    software: SoftwareCreateNestedOneWithoutLogsInput
    build?: BuildCreateNestedOneWithoutLogsInput
  }

  export type DownloadLogUncheckedCreateWithoutVersionInput = {
    id?: string
    softwareId: string
    buildId?: string | null
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
  }

  export type DownloadLogCreateOrConnectWithoutVersionInput = {
    where: DownloadLogWhereUniqueInput
    create: XOR<DownloadLogCreateWithoutVersionInput, DownloadLogUncheckedCreateWithoutVersionInput>
  }

  export type DownloadLogCreateManyVersionInputEnvelope = {
    data: DownloadLogCreateManyVersionInput | DownloadLogCreateManyVersionInput[]
    skipDuplicates?: boolean
  }

  export type SoftwareUpsertWithoutVersionsInput = {
    update: XOR<SoftwareUpdateWithoutVersionsInput, SoftwareUncheckedUpdateWithoutVersionsInput>
    create: XOR<SoftwareCreateWithoutVersionsInput, SoftwareUncheckedCreateWithoutVersionsInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutVersionsInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutVersionsInput, SoftwareUncheckedUpdateWithoutVersionsInput>
  }

  export type SoftwareUpdateWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type BuildUpsertWithWhereUniqueWithoutVersionInput = {
    where: BuildWhereUniqueInput
    update: XOR<BuildUpdateWithoutVersionInput, BuildUncheckedUpdateWithoutVersionInput>
    create: XOR<BuildCreateWithoutVersionInput, BuildUncheckedCreateWithoutVersionInput>
  }

  export type BuildUpdateWithWhereUniqueWithoutVersionInput = {
    where: BuildWhereUniqueInput
    data: XOR<BuildUpdateWithoutVersionInput, BuildUncheckedUpdateWithoutVersionInput>
  }

  export type BuildUpdateManyWithWhereWithoutVersionInput = {
    where: BuildScalarWhereInput
    data: XOR<BuildUpdateManyMutationInput, BuildUncheckedUpdateManyWithoutVersionInput>
  }

  export type BuildScalarWhereInput = {
    AND?: BuildScalarWhereInput | BuildScalarWhereInput[]
    OR?: BuildScalarWhereInput[]
    NOT?: BuildScalarWhereInput | BuildScalarWhereInput[]
    id?: StringFilter<"Build"> | string
    versionId?: StringFilter<"Build"> | string
    os?: StringNullableFilter<"Build"> | string | null
    arch?: StringNullableFilter<"Build"> | string | null
    buildType?: EnumBuildTypeNullableFilter<"Build"> | $Enums.BuildType | null
    sizeMB?: IntNullableFilter<"Build"> | number | null
    fileSize?: StringNullableFilter<"Build"> | string | null
    sha256?: StringNullableFilter<"Build"> | string | null
    downloadUrl?: StringNullableFilter<"Build"> | string | null
    createdAt?: DateTimeFilter<"Build"> | Date | string
  }

  export type DownloadLogUpsertWithWhereUniqueWithoutVersionInput = {
    where: DownloadLogWhereUniqueInput
    update: XOR<DownloadLogUpdateWithoutVersionInput, DownloadLogUncheckedUpdateWithoutVersionInput>
    create: XOR<DownloadLogCreateWithoutVersionInput, DownloadLogUncheckedCreateWithoutVersionInput>
  }

  export type DownloadLogUpdateWithWhereUniqueWithoutVersionInput = {
    where: DownloadLogWhereUniqueInput
    data: XOR<DownloadLogUpdateWithoutVersionInput, DownloadLogUncheckedUpdateWithoutVersionInput>
  }

  export type DownloadLogUpdateManyWithWhereWithoutVersionInput = {
    where: DownloadLogScalarWhereInput
    data: XOR<DownloadLogUpdateManyMutationInput, DownloadLogUncheckedUpdateManyWithoutVersionInput>
  }

  export type VersionCreateWithoutBuildsInput = {
    id?: string
    version: string
    osLabel?: string | null
    license?: string | null
    changelog?: string | null
    releasedAt?: Date | string | null
    createdAt?: Date | string
    software: SoftwareCreateNestedOneWithoutVersionsInput
    logs?: DownloadLogCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutBuildsInput = {
    id?: string
    softwareId: string
    version: string
    osLabel?: string | null
    license?: string | null
    changelog?: string | null
    releasedAt?: Date | string | null
    createdAt?: Date | string
    logs?: DownloadLogUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutBuildsInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutBuildsInput, VersionUncheckedCreateWithoutBuildsInput>
  }

  export type MirrorCreateWithoutBuildInput = {
    id?: string
    title: string
    url: string
    priority?: number
  }

  export type MirrorUncheckedCreateWithoutBuildInput = {
    id?: string
    title: string
    url: string
    priority?: number
  }

  export type MirrorCreateOrConnectWithoutBuildInput = {
    where: MirrorWhereUniqueInput
    create: XOR<MirrorCreateWithoutBuildInput, MirrorUncheckedCreateWithoutBuildInput>
  }

  export type MirrorCreateManyBuildInputEnvelope = {
    data: MirrorCreateManyBuildInput | MirrorCreateManyBuildInput[]
    skipDuplicates?: boolean
  }

  export type DownloadLogCreateWithoutBuildInput = {
    id?: string
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
    software: SoftwareCreateNestedOneWithoutLogsInput
    version?: VersionCreateNestedOneWithoutLogsInput
  }

  export type DownloadLogUncheckedCreateWithoutBuildInput = {
    id?: string
    softwareId: string
    versionId?: string | null
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
  }

  export type DownloadLogCreateOrConnectWithoutBuildInput = {
    where: DownloadLogWhereUniqueInput
    create: XOR<DownloadLogCreateWithoutBuildInput, DownloadLogUncheckedCreateWithoutBuildInput>
  }

  export type DownloadLogCreateManyBuildInputEnvelope = {
    data: DownloadLogCreateManyBuildInput | DownloadLogCreateManyBuildInput[]
    skipDuplicates?: boolean
  }

  export type VersionUpsertWithoutBuildsInput = {
    update: XOR<VersionUpdateWithoutBuildsInput, VersionUncheckedUpdateWithoutBuildsInput>
    create: XOR<VersionCreateWithoutBuildsInput, VersionUncheckedCreateWithoutBuildsInput>
    where?: VersionWhereInput
  }

  export type VersionUpdateToOneWithWhereWithoutBuildsInput = {
    where?: VersionWhereInput
    data: XOR<VersionUpdateWithoutBuildsInput, VersionUncheckedUpdateWithoutBuildsInput>
  }

  export type VersionUpdateWithoutBuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutVersionsNestedInput
    logs?: DownloadLogUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutBuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: DownloadLogUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type MirrorUpsertWithWhereUniqueWithoutBuildInput = {
    where: MirrorWhereUniqueInput
    update: XOR<MirrorUpdateWithoutBuildInput, MirrorUncheckedUpdateWithoutBuildInput>
    create: XOR<MirrorCreateWithoutBuildInput, MirrorUncheckedCreateWithoutBuildInput>
  }

  export type MirrorUpdateWithWhereUniqueWithoutBuildInput = {
    where: MirrorWhereUniqueInput
    data: XOR<MirrorUpdateWithoutBuildInput, MirrorUncheckedUpdateWithoutBuildInput>
  }

  export type MirrorUpdateManyWithWhereWithoutBuildInput = {
    where: MirrorScalarWhereInput
    data: XOR<MirrorUpdateManyMutationInput, MirrorUncheckedUpdateManyWithoutBuildInput>
  }

  export type MirrorScalarWhereInput = {
    AND?: MirrorScalarWhereInput | MirrorScalarWhereInput[]
    OR?: MirrorScalarWhereInput[]
    NOT?: MirrorScalarWhereInput | MirrorScalarWhereInput[]
    id?: StringFilter<"Mirror"> | string
    buildId?: StringFilter<"Mirror"> | string
    title?: StringFilter<"Mirror"> | string
    url?: StringFilter<"Mirror"> | string
    priority?: IntFilter<"Mirror"> | number
  }

  export type DownloadLogUpsertWithWhereUniqueWithoutBuildInput = {
    where: DownloadLogWhereUniqueInput
    update: XOR<DownloadLogUpdateWithoutBuildInput, DownloadLogUncheckedUpdateWithoutBuildInput>
    create: XOR<DownloadLogCreateWithoutBuildInput, DownloadLogUncheckedCreateWithoutBuildInput>
  }

  export type DownloadLogUpdateWithWhereUniqueWithoutBuildInput = {
    where: DownloadLogWhereUniqueInput
    data: XOR<DownloadLogUpdateWithoutBuildInput, DownloadLogUncheckedUpdateWithoutBuildInput>
  }

  export type DownloadLogUpdateManyWithWhereWithoutBuildInput = {
    where: DownloadLogScalarWhereInput
    data: XOR<DownloadLogUpdateManyMutationInput, DownloadLogUncheckedUpdateManyWithoutBuildInput>
  }

  export type BuildCreateWithoutMirrorsInput = {
    id?: string
    os?: string | null
    arch?: string | null
    buildType?: $Enums.BuildType | null
    sizeMB?: number | null
    fileSize?: string | null
    sha256?: string | null
    downloadUrl?: string | null
    createdAt?: Date | string
    version: VersionCreateNestedOneWithoutBuildsInput
    logs?: DownloadLogCreateNestedManyWithoutBuildInput
  }

  export type BuildUncheckedCreateWithoutMirrorsInput = {
    id?: string
    versionId: string
    os?: string | null
    arch?: string | null
    buildType?: $Enums.BuildType | null
    sizeMB?: number | null
    fileSize?: string | null
    sha256?: string | null
    downloadUrl?: string | null
    createdAt?: Date | string
    logs?: DownloadLogUncheckedCreateNestedManyWithoutBuildInput
  }

  export type BuildCreateOrConnectWithoutMirrorsInput = {
    where: BuildWhereUniqueInput
    create: XOR<BuildCreateWithoutMirrorsInput, BuildUncheckedCreateWithoutMirrorsInput>
  }

  export type BuildUpsertWithoutMirrorsInput = {
    update: XOR<BuildUpdateWithoutMirrorsInput, BuildUncheckedUpdateWithoutMirrorsInput>
    create: XOR<BuildCreateWithoutMirrorsInput, BuildUncheckedCreateWithoutMirrorsInput>
    where?: BuildWhereInput
  }

  export type BuildUpdateToOneWithWhereWithoutMirrorsInput = {
    where?: BuildWhereInput
    data: XOR<BuildUpdateWithoutMirrorsInput, BuildUncheckedUpdateWithoutMirrorsInput>
  }

  export type BuildUpdateWithoutMirrorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: VersionUpdateOneRequiredWithoutBuildsNestedInput
    logs?: DownloadLogUpdateManyWithoutBuildNestedInput
  }

  export type BuildUncheckedUpdateWithoutMirrorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionId?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: DownloadLogUncheckedUpdateManyWithoutBuildNestedInput
  }

  export type SoftwareCreateWithoutMediaInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutMediaInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutMediaInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutMediaInput, SoftwareUncheckedCreateWithoutMediaInput>
  }

  export type SoftwareUpsertWithoutMediaInput = {
    update: XOR<SoftwareUpdateWithoutMediaInput, SoftwareUncheckedUpdateWithoutMediaInput>
    create: XOR<SoftwareCreateWithoutMediaInput, SoftwareUncheckedCreateWithoutMediaInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutMediaInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutMediaInput, SoftwareUncheckedUpdateWithoutMediaInput>
  }

  export type SoftwareUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareCreateWithoutCommentsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutCommentsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutCommentsInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutCommentsInput, SoftwareUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    passwordHash: string
    name?: string | null
    role?: $Enums.Role
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    passwordHash: string
    name?: string | null
    role?: $Enums.Role
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type SoftwareUpsertWithoutCommentsInput = {
    update: XOR<SoftwareUpdateWithoutCommentsInput, SoftwareUncheckedUpdateWithoutCommentsInput>
    create: XOR<SoftwareCreateWithoutCommentsInput, SoftwareUncheckedCreateWithoutCommentsInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutCommentsInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutCommentsInput, SoftwareUncheckedUpdateWithoutCommentsInput>
  }

  export type SoftwareUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SoftwareCreateWithoutReviewsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutReviewsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutReviewsInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutReviewsInput, SoftwareUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutReviewsInput = {
    id?: string
    email: string
    passwordHash: string
    name?: string | null
    role?: $Enums.Role
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: string
    email: string
    passwordHash: string
    name?: string | null
    role?: $Enums.Role
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type SoftwareUpsertWithoutReviewsInput = {
    update: XOR<SoftwareUpdateWithoutReviewsInput, SoftwareUncheckedUpdateWithoutReviewsInput>
    create: XOR<SoftwareCreateWithoutReviewsInput, SoftwareUncheckedCreateWithoutReviewsInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutReviewsInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutReviewsInput, SoftwareUncheckedUpdateWithoutReviewsInput>
  }

  export type SoftwareUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SoftwareCreateWithoutRequirementsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutRequirementsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutRequirementsInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutRequirementsInput, SoftwareUncheckedCreateWithoutRequirementsInput>
  }

  export type SoftwareUpsertWithoutRequirementsInput = {
    update: XOR<SoftwareUpdateWithoutRequirementsInput, SoftwareUncheckedUpdateWithoutRequirementsInput>
    create: XOR<SoftwareCreateWithoutRequirementsInput, SoftwareUncheckedCreateWithoutRequirementsInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutRequirementsInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutRequirementsInput, SoftwareUncheckedUpdateWithoutRequirementsInput>
  }

  export type SoftwareUpdateWithoutRequirementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutRequirementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareCreateWithoutFaqsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutFaqsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutFaqsInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutFaqsInput, SoftwareUncheckedCreateWithoutFaqsInput>
  }

  export type SoftwareUpsertWithoutFaqsInput = {
    update: XOR<SoftwareUpdateWithoutFaqsInput, SoftwareUncheckedUpdateWithoutFaqsInput>
    create: XOR<SoftwareCreateWithoutFaqsInput, SoftwareUncheckedCreateWithoutFaqsInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutFaqsInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutFaqsInput, SoftwareUncheckedUpdateWithoutFaqsInput>
  }

  export type SoftwareUpdateWithoutFaqsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutFaqsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    name?: string | null
    email?: string | null
    content: string
    status?: $Enums.CommentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    software: SoftwareCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    softwareId: string
    name?: string | null
    email?: string | null
    content: string
    status?: $Enums.CommentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    id?: string
    rating: number
    title?: string | null
    body?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    software: SoftwareCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: string
    softwareId: string
    rating: number
    title?: string | null
    body?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type SoftwareCreateWithoutLogsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutLogsInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutLogsInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutLogsInput, SoftwareUncheckedCreateWithoutLogsInput>
  }

  export type VersionCreateWithoutLogsInput = {
    id?: string
    version: string
    osLabel?: string | null
    license?: string | null
    changelog?: string | null
    releasedAt?: Date | string | null
    createdAt?: Date | string
    software: SoftwareCreateNestedOneWithoutVersionsInput
    builds?: BuildCreateNestedManyWithoutVersionInput
  }

  export type VersionUncheckedCreateWithoutLogsInput = {
    id?: string
    softwareId: string
    version: string
    osLabel?: string | null
    license?: string | null
    changelog?: string | null
    releasedAt?: Date | string | null
    createdAt?: Date | string
    builds?: BuildUncheckedCreateNestedManyWithoutVersionInput
  }

  export type VersionCreateOrConnectWithoutLogsInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutLogsInput, VersionUncheckedCreateWithoutLogsInput>
  }

  export type BuildCreateWithoutLogsInput = {
    id?: string
    os?: string | null
    arch?: string | null
    buildType?: $Enums.BuildType | null
    sizeMB?: number | null
    fileSize?: string | null
    sha256?: string | null
    downloadUrl?: string | null
    createdAt?: Date | string
    version: VersionCreateNestedOneWithoutBuildsInput
    mirrors?: MirrorCreateNestedManyWithoutBuildInput
  }

  export type BuildUncheckedCreateWithoutLogsInput = {
    id?: string
    versionId: string
    os?: string | null
    arch?: string | null
    buildType?: $Enums.BuildType | null
    sizeMB?: number | null
    fileSize?: string | null
    sha256?: string | null
    downloadUrl?: string | null
    createdAt?: Date | string
    mirrors?: MirrorUncheckedCreateNestedManyWithoutBuildInput
  }

  export type BuildCreateOrConnectWithoutLogsInput = {
    where: BuildWhereUniqueInput
    create: XOR<BuildCreateWithoutLogsInput, BuildUncheckedCreateWithoutLogsInput>
  }

  export type SoftwareUpsertWithoutLogsInput = {
    update: XOR<SoftwareUpdateWithoutLogsInput, SoftwareUncheckedUpdateWithoutLogsInput>
    create: XOR<SoftwareCreateWithoutLogsInput, SoftwareUncheckedCreateWithoutLogsInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutLogsInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutLogsInput, SoftwareUncheckedUpdateWithoutLogsInput>
  }

  export type SoftwareUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type VersionUpsertWithoutLogsInput = {
    update: XOR<VersionUpdateWithoutLogsInput, VersionUncheckedUpdateWithoutLogsInput>
    create: XOR<VersionCreateWithoutLogsInput, VersionUncheckedCreateWithoutLogsInput>
    where?: VersionWhereInput
  }

  export type VersionUpdateToOneWithWhereWithoutLogsInput = {
    where?: VersionWhereInput
    data: XOR<VersionUpdateWithoutLogsInput, VersionUncheckedUpdateWithoutLogsInput>
  }

  export type VersionUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutVersionsNestedInput
    builds?: BuildUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    builds?: BuildUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type BuildUpsertWithoutLogsInput = {
    update: XOR<BuildUpdateWithoutLogsInput, BuildUncheckedUpdateWithoutLogsInput>
    create: XOR<BuildCreateWithoutLogsInput, BuildUncheckedCreateWithoutLogsInput>
    where?: BuildWhereInput
  }

  export type BuildUpdateToOneWithWhereWithoutLogsInput = {
    where?: BuildWhereInput
    data: XOR<BuildUpdateWithoutLogsInput, BuildUncheckedUpdateWithoutLogsInput>
  }

  export type BuildUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: VersionUpdateOneRequiredWithoutBuildsNestedInput
    mirrors?: MirrorUpdateManyWithoutBuildNestedInput
  }

  export type BuildUncheckedUpdateWithoutLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionId?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mirrors?: MirrorUncheckedUpdateManyWithoutBuildNestedInput
  }

  export type SoftwareCreateWithoutCounterInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter30d?: DownloadCounter30dCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutCounterInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter30d?: DownloadCounter30dUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutCounterInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutCounterInput, SoftwareUncheckedCreateWithoutCounterInput>
  }

  export type SoftwareUpsertWithoutCounterInput = {
    update: XOR<SoftwareUpdateWithoutCounterInput, SoftwareUncheckedUpdateWithoutCounterInput>
    create: XOR<SoftwareCreateWithoutCounterInput, SoftwareUncheckedCreateWithoutCounterInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutCounterInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutCounterInput, SoftwareUncheckedUpdateWithoutCounterInput>
  }

  export type SoftwareUpdateWithoutCounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutCounterInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareCreateWithoutCounter30dInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor?: VendorCreateNestedOneWithoutSoftwaresInput
    categories?: SoftwareCategoryCreateNestedManyWithoutSoftwareInput
    versions?: VersionCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaCreateNestedManyWithoutSoftwareInput
    faqs?: FAQCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementCreateNestedManyWithoutSoftwareInput
    comments?: CommentCreateNestedManyWithoutSoftwareInput
    tags?: TagCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareUncheckedCreateWithoutCounter30dInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorId?: string | null
    categories?: SoftwareCategoryUncheckedCreateNestedManyWithoutSoftwareInput
    versions?: VersionUncheckedCreateNestedManyWithoutSoftwareInput
    media?: SoftwareMediaUncheckedCreateNestedManyWithoutSoftwareInput
    faqs?: FAQUncheckedCreateNestedManyWithoutSoftwareInput
    requirements?: SystemRequirementUncheckedCreateNestedManyWithoutSoftwareInput
    comments?: CommentUncheckedCreateNestedManyWithoutSoftwareInput
    tags?: TagUncheckedCreateNestedManyWithoutSoftwaresInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutSoftwareInput
    logs?: DownloadLogUncheckedCreateNestedManyWithoutSoftwareInput
    counter?: DownloadCounterUncheckedCreateNestedOneWithoutSoftwareInput
  }

  export type SoftwareCreateOrConnectWithoutCounter30dInput = {
    where: SoftwareWhereUniqueInput
    create: XOR<SoftwareCreateWithoutCounter30dInput, SoftwareUncheckedCreateWithoutCounter30dInput>
  }

  export type SoftwareUpsertWithoutCounter30dInput = {
    update: XOR<SoftwareUpdateWithoutCounter30dInput, SoftwareUncheckedUpdateWithoutCounter30dInput>
    create: XOR<SoftwareCreateWithoutCounter30dInput, SoftwareUncheckedCreateWithoutCounter30dInput>
    where?: SoftwareWhereInput
  }

  export type SoftwareUpdateToOneWithWhereWithoutCounter30dInput = {
    where?: SoftwareWhereInput
    data: XOR<SoftwareUpdateWithoutCounter30dInput, SoftwareUncheckedUpdateWithoutCounter30dInput>
  }

  export type SoftwareUpdateWithoutCounter30dInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutCounter30dInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type CategoryCreateManyParentInput = {
    id?: string
    name: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SoftwareCategoryCreateManyCategoryInput = {
    softwareId: string
  }

  export type CategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUpdateManyWithoutParentNestedInput
    software?: SoftwareCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: CategoryUncheckedUpdateManyWithoutParentNestedInput
    software?: SoftwareCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareCategoryUpdateWithoutCategoryInput = {
    software?: SoftwareUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type SoftwareCategoryUncheckedUpdateWithoutCategoryInput = {
    softwareId?: StringFieldUpdateOperationsInput | string
  }

  export type SoftwareCategoryUncheckedUpdateManyWithoutCategoryInput = {
    softwareId?: StringFieldUpdateOperationsInput | string
  }

  export type SoftwareUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: VendorUpdateOneWithoutSoftwaresNestedInput
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateManyWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SoftwareCreateManyVendorInput = {
    id?: string
    slug: string
    name: string
    license?: string | null
    homepage?: string | null
    shortDesc?: string | null
    longDesc?: string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: string | null
    heroUrl?: string | null
    ratingsAvg?: number
    ratingsCount?: number
    isLatest?: boolean
    isUpdated?: boolean
    isRecommended?: boolean
    isNew?: boolean
    lastUpdatedAt?: Date | string
    publishedAt?: Date | string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SoftwareUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: SoftwareCategoryUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUpdateManyWithoutSoftwareNestedInput
    tags?: TagUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: SoftwareCategoryUncheckedUpdateManyWithoutSoftwareNestedInput
    versions?: VersionUncheckedUpdateManyWithoutSoftwareNestedInput
    media?: SoftwareMediaUncheckedUpdateManyWithoutSoftwareNestedInput
    faqs?: FAQUncheckedUpdateManyWithoutSoftwareNestedInput
    requirements?: SystemRequirementUncheckedUpdateManyWithoutSoftwareNestedInput
    comments?: CommentUncheckedUpdateManyWithoutSoftwareNestedInput
    tags?: TagUncheckedUpdateManyWithoutSoftwaresNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutSoftwareNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutSoftwareNestedInput
    counter?: DownloadCounterUncheckedUpdateOneWithoutSoftwareNestedInput
    counter30d?: DownloadCounter30dUncheckedUpdateOneWithoutSoftwareNestedInput
  }

  export type SoftwareUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    license?: NullableStringFieldUpdateOperationsInput | string | null
    homepage?: NullableStringFieldUpdateOperationsInput | string | null
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableJsonNullValueInput | InputJsonValue
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    heroUrl?: NullableStringFieldUpdateOperationsInput | string | null
    ratingsAvg?: FloatFieldUpdateOperationsInput | number
    ratingsCount?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    isRecommended?: BoolFieldUpdateOperationsInput | boolean
    isNew?: BoolFieldUpdateOperationsInput | boolean
    lastUpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareCategoryCreateManySoftwareInput = {
    categoryId: string
  }

  export type VersionCreateManySoftwareInput = {
    id?: string
    version: string
    osLabel?: string | null
    license?: string | null
    changelog?: string | null
    releasedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SoftwareMediaCreateManySoftwareInput = {
    id?: string
    type: $Enums.MediaType
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type FAQCreateManySoftwareInput = {
    id?: string
    question: string
    answer: string
    order?: number
  }

  export type SystemRequirementCreateManySoftwareInput = {
    id?: string
    os: string
    minimum: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CommentCreateManySoftwareInput = {
    id?: string
    userId?: string | null
    name?: string | null
    email?: string | null
    content: string
    status?: $Enums.CommentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateManySoftwareInput = {
    id?: string
    userId: string
    rating: number
    title?: string | null
    body?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DownloadLogCreateManySoftwareInput = {
    id?: string
    versionId?: string | null
    buildId?: string | null
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
  }

  export type SoftwareCategoryUpdateWithoutSoftwareInput = {
    category?: CategoryUpdateOneRequiredWithoutSoftwareNestedInput
  }

  export type SoftwareCategoryUncheckedUpdateWithoutSoftwareInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type SoftwareCategoryUncheckedUpdateManyWithoutSoftwareInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type VersionUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    builds?: BuildUpdateManyWithoutVersionNestedInput
    logs?: DownloadLogUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    builds?: BuildUncheckedUpdateManyWithoutVersionNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutVersionNestedInput
  }

  export type VersionUncheckedUpdateManyWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: StringFieldUpdateOperationsInput | string
    osLabel?: NullableStringFieldUpdateOperationsInput | string | null
    license?: NullableStringFieldUpdateOperationsInput | string | null
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareMediaUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareMediaUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoftwareMediaUncheckedUpdateManyWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMediaTypeFieldUpdateOperationsInput | $Enums.MediaType
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FAQUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type FAQUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type FAQUncheckedUpdateManyWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
  }

  export type SystemRequirementUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    minimum?: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SystemRequirementUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    minimum?: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SystemRequirementUncheckedUpdateManyWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: StringFieldUpdateOperationsInput | string
    minimum?: JsonNullValueInput | InputJsonValue
    recommended?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CommentUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumCommentStatusFieldUpdateOperationsInput | $Enums.CommentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumCommentStatusFieldUpdateOperationsInput | $Enums.CommentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumCommentStatusFieldUpdateOperationsInput | $Enums.CommentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUpdateWithoutSoftwaresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateWithoutSoftwaresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyWithoutSoftwaresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadLogUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: VersionUpdateOneWithoutLogsNestedInput
    build?: BuildUpdateOneWithoutLogsNestedInput
  }

  export type DownloadLogUncheckedUpdateWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
    buildId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadLogUncheckedUpdateManyWithoutSoftwareInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
    buildId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuildCreateManyVersionInput = {
    id?: string
    os?: string | null
    arch?: string | null
    buildType?: $Enums.BuildType | null
    sizeMB?: number | null
    fileSize?: string | null
    sha256?: string | null
    downloadUrl?: string | null
    createdAt?: Date | string
  }

  export type DownloadLogCreateManyVersionInput = {
    id?: string
    softwareId: string
    buildId?: string | null
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
  }

  export type BuildUpdateWithoutVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mirrors?: MirrorUpdateManyWithoutBuildNestedInput
    logs?: DownloadLogUpdateManyWithoutBuildNestedInput
  }

  export type BuildUncheckedUpdateWithoutVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mirrors?: MirrorUncheckedUpdateManyWithoutBuildNestedInput
    logs?: DownloadLogUncheckedUpdateManyWithoutBuildNestedInput
  }

  export type BuildUncheckedUpdateManyWithoutVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    os?: NullableStringFieldUpdateOperationsInput | string | null
    arch?: NullableStringFieldUpdateOperationsInput | string | null
    buildType?: NullableEnumBuildTypeFieldUpdateOperationsInput | $Enums.BuildType | null
    sizeMB?: NullableIntFieldUpdateOperationsInput | number | null
    fileSize?: NullableStringFieldUpdateOperationsInput | string | null
    sha256?: NullableStringFieldUpdateOperationsInput | string | null
    downloadUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadLogUpdateWithoutVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutLogsNestedInput
    build?: BuildUpdateOneWithoutLogsNestedInput
  }

  export type DownloadLogUncheckedUpdateWithoutVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    buildId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadLogUncheckedUpdateManyWithoutVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    buildId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MirrorCreateManyBuildInput = {
    id?: string
    title: string
    url: string
    priority?: number
  }

  export type DownloadLogCreateManyBuildInput = {
    id?: string
    softwareId: string
    versionId?: string | null
    ip?: string | null
    ua?: string | null
    referer?: string | null
    createdAt?: Date | string
  }

  export type MirrorUpdateWithoutBuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type MirrorUncheckedUpdateWithoutBuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type MirrorUncheckedUpdateManyWithoutBuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    priority?: IntFieldUpdateOperationsInput | number
  }

  export type DownloadLogUpdateWithoutBuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutLogsNestedInput
    version?: VersionUpdateOneWithoutLogsNestedInput
  }

  export type DownloadLogUncheckedUpdateWithoutBuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DownloadLogUncheckedUpdateManyWithoutBuildInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    versionId?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    ua?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyUserInput = {
    id?: string
    softwareId: string
    name?: string | null
    email?: string | null
    content: string
    status?: $Enums.CommentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateManyUserInput = {
    id?: string
    softwareId: string
    rating: number
    title?: string | null
    body?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumCommentStatusFieldUpdateOperationsInput | $Enums.CommentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumCommentStatusFieldUpdateOperationsInput | $Enums.CommentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumCommentStatusFieldUpdateOperationsInput | $Enums.CommentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    software?: SoftwareUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    softwareId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VendorCountOutputTypeDefaultArgs instead
     */
    export type VendorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VendorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SoftwareCountOutputTypeDefaultArgs instead
     */
    export type SoftwareCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SoftwareCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VersionCountOutputTypeDefaultArgs instead
     */
    export type VersionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VersionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BuildCountOutputTypeDefaultArgs instead
     */
    export type BuildCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuildCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SoftwareCategoryDefaultArgs instead
     */
    export type SoftwareCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SoftwareCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VendorDefaultArgs instead
     */
    export type VendorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VendorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SoftwareDefaultArgs instead
     */
    export type SoftwareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SoftwareDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VersionDefaultArgs instead
     */
    export type VersionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VersionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BuildDefaultArgs instead
     */
    export type BuildArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuildDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MirrorDefaultArgs instead
     */
    export type MirrorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MirrorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SoftwareMediaDefaultArgs instead
     */
    export type SoftwareMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SoftwareMediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewDefaultArgs instead
     */
    export type ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemRequirementDefaultArgs instead
     */
    export type SystemRequirementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SystemRequirementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FAQDefaultArgs instead
     */
    export type FAQArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FAQDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PageDefaultArgs instead
     */
    export type PageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SettingDefaultArgs instead
     */
    export type SettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DownloadLogDefaultArgs instead
     */
    export type DownloadLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DownloadLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DownloadCounterDefaultArgs instead
     */
    export type DownloadCounterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DownloadCounterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DownloadCounter30dDefaultArgs instead
     */
    export type DownloadCounter30dArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DownloadCounter30dDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}