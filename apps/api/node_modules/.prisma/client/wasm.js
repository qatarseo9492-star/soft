
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  website: 'website',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SoftwareScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  name: 'name',
  isFree: 'isFree',
  shortDesc: 'shortDesc',
  longDesc: 'longDesc',
  categoryId: 'categoryId',
  vendorId: 'vendorId',
  iconUrl: 'iconUrl',
  heroUrl: 'heroUrl',
  websiteUrl: 'websiteUrl',
  ratingsAvg: 'ratingsAvg',
  ratingsCount: 'ratingsCount',
  isLatest: 'isLatest',
  isUpdated: 'isUpdated',
  isRecommended: 'isRecommended',
  isNew: 'isNew',
  lastUpdatedAt: 'lastUpdatedAt',
  publishedAt: 'publishedAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SoftwareVersionScalarFieldEnum = {
  id: 'id',
  softwareId: 'softwareId',
  version: 'version',
  os: 'os',
  license: 'license',
  changelog: 'changelog',
  releasedAt: 'releasedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SoftwareBuildScalarFieldEnum = {
  id: 'id',
  versionId: 'versionId',
  buildType: 'buildType',
  fileSize: 'fileSize',
  checksum: 'checksum',
  downloadUrl: 'downloadUrl',
  mirrorUrl1: 'mirrorUrl1',
  mirrorUrl2: 'mirrorUrl2',
  createdAt: 'createdAt'
};

exports.Prisma.SoftwareMediaScalarFieldEnum = {
  id: 'id',
  softwareId: 'softwareId',
  type: 'type',
  url: 'url',
  alt: 'alt',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  softwareId: 'softwareId',
  userId: 'userId',
  name: 'name',
  email: 'email',
  content: 'content',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  softwareId: 'softwareId',
  userId: 'userId',
  rating: 'rating',
  title: 'title',
  body: 'body',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemRequirementScalarFieldEnum = {
  id: 'id',
  softwareId: 'softwareId',
  os: 'os',
  minimum: 'minimum',
  recommended: 'recommended'
};

exports.Prisma.FAQScalarFieldEnum = {
  id: 'id',
  softwareId: 'softwareId',
  question: 'question',
  answer: 'answer',
  order: 'order'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  role: 'role',
  avatarUrl: 'avatarUrl',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PageScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  title: 'title',
  content: 'content',
  status: 'status',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SettingScalarFieldEnum = {
  key: 'key',
  value: 'value',
  json: 'json',
  updatedAt: 'updatedAt'
};

exports.Prisma.DownloadEventScalarFieldEnum = {
  id: 'id',
  softwareId: 'softwareId',
  versionId: 'versionId',
  buildId: 'buildId',
  ip: 'ip',
  userAgent: 'userAgent',
  referer: 'referer',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.BuildType = exports.$Enums.BuildType = {
  X86: 'X86',
  X64: 'X64',
  ARM64: 'ARM64',
  Installer: 'Installer',
  Portable: 'Portable',
  Other: 'Other'
};

exports.MediaType = exports.$Enums.MediaType = {
  ICON: 'ICON',
  HERO: 'HERO',
  GALLERY: 'GALLERY',
  SCREENSHOT: 'SCREENSHOT',
  VIDEO: 'VIDEO'
};

exports.CommentStatus = exports.$Enums.CommentStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  SPAM: 'SPAM',
  DELETED: 'DELETED'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  UPLOADER: 'UPLOADER',
  USER: 'USER'
};

exports.PageStatus = exports.$Enums.PageStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.Prisma.ModelName = {
  Category: 'Category',
  Tag: 'Tag',
  Vendor: 'Vendor',
  Software: 'Software',
  SoftwareVersion: 'SoftwareVersion',
  SoftwareBuild: 'SoftwareBuild',
  SoftwareMedia: 'SoftwareMedia',
  Comment: 'Comment',
  Review: 'Review',
  SystemRequirement: 'SystemRequirement',
  FAQ: 'FAQ',
  User: 'User',
  Page: 'Page',
  Setting: 'Setting',
  DownloadEvent: 'DownloadEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
