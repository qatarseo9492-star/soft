// =====================================
// Prisma setup (WEB)
// =====================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("WEB_DATABASE_URL") // web-only DSN
}

// =====================================
// Enums
// =====================================
enum Role {
  ADMIN
  MODERATOR
  UPLOADER
  USER
}

enum BuildType {
  X86
  X64
  ARM64
  Installer
  Portable
  Other
}

enum MediaType {
  ICON
  HERO
  GALLERY
  SCREENSHOT
  VIDEO
}

enum CommentStatus {
  PENDING
  APPROVED
  SPAM
  DELETED
}

enum PageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// =====================================
// Taxonomy
// =====================================
model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  parentId  String?
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Explicit M2M via pivot
  software SoftwareCategory[]

  @@index([slug])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())

  softwares Software[] @relation("SoftwareTags")
}

// Explicit pivot for categories
model SoftwareCategory {
  softwareId String
  categoryId String
  software   Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([softwareId, categoryId])
  @@index([categoryId])
}

// =====================================
// Core content
// =====================================
model Vendor {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  website   String?  @db.VarChar(191)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  softwares Software[]

  @@index([slug])
}

model Software {
  id   String @id @default(cuid())
  slug String @unique
  name String

  // Licensing & meta
  license  String? @db.VarChar(64)
  homepage String? @db.VarChar(191)

  // Descriptions
  shortDesc String? @db.VarChar(191)
  longDesc  String? @db.Text

  // Platforms & tags
  os Json? // ["Windows","macOS","Linux","Android","iOS"]

  // Media
  iconUrl String? @db.VarChar(191)
  heroUrl String? @db.VarChar(191)

  // Aggregates
  ratingsAvg   Float @default(0)
  ratingsCount Int   @default(0)

  // UI badges
  isLatest      Boolean @default(false)
  isUpdated     Boolean @default(false)
  isRecommended Boolean @default(false)
  isNew         Boolean @default(false)

  // Timestamps & status
  lastUpdatedAt DateTime  @default(now())
  publishedAt   DateTime?
  status        String    @default("published")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  vendorId     String?
  vendor       Vendor?             @relation(fields: [vendorId], references: [id])
  categories   SoftwareCategory[]
  versions     Version[]
  media        SoftwareMedia[]
  faqs         FAQ[]
  requirements SystemRequirement[]
  comments     Comment[]
  tags         Tag[]               @relation("SoftwareTags")
  reviews      Review[]

  // Logging & counters
  logs       DownloadLog[]
  counter    DownloadCounter?
  counter30d DownloadCounter30d?
  daily      DownloadCounterDaily[]
  weekly     DownloadCounterWeekly[]

  @@index([lastUpdatedAt])
  @@index([isLatest, isUpdated, isRecommended, isNew])
  @@index([status, publishedAt])
}

model Version {
  id         String    @id @default(cuid())
  softwareId String
  software   Software  @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  version    String
  osLabel    String?   @db.VarChar(64)
  license    String?   @db.VarChar(64)
  changelog  String?   @db.MediumText
  releasedAt DateTime?
  createdAt  DateTime  @default(now())

  builds Build[]

  // ðŸ”§ back-relation to DownloadLog.version (fixes your error)
  logs DownloadLog[] @relation("VersionToDownloadLog")

  @@unique([softwareId, version])
  @@index([softwareId, createdAt])
  @@index([releasedAt])
}

model Build {
  id        String  @id @default(cuid())
  versionId String
  version   Version @relation(fields: [versionId], references: [id], onDelete: Cascade)

  // Platform specifics
  os        String?    @db.VarChar(32) // "Windows","macOS","Linux","Android","iOS"
  arch      String?    @db.VarChar(16) // "x64","arm64"
  buildType BuildType?

  // Size & integrity
  sizeMB   Int?
  fileSize String? @db.VarChar(32)
  sha256   String? @db.Char(64)

  // Primary URL (mirrors are separate)
  downloadUrl String?  @db.VarChar(191)
  createdAt   DateTime @default(now())

  mirrors Mirror[]

  // Back-relation to DownloadLog.build
  logs DownloadLog[] @relation("BuildToDownloadLog")

  @@index([versionId])
  @@index([os, arch])
  @@index([buildType])
}

model Mirror {
  id       String @id @default(cuid())
  buildId  String
  build    Build  @relation(fields: [buildId], references: [id], onDelete: Cascade)
  title    String @db.VarChar(64) // e.g., "Primary", "GDrive", "Mega"
  url      String @db.VarChar(191)
  priority Int    @default(100) // lower number = preferred

  @@index([buildId, priority])
}

// Media gallery
model SoftwareMedia {
  id         String    @id @default(cuid())
  softwareId String
  software   Software  @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  type       MediaType
  url        String
  alt        String?
  order      Int       @default(0)
  createdAt  DateTime  @default(now())

  @@index([softwareId, type, order])
}

// =====================================
// Engagement & content
// =====================================
model Comment {
  id         String        @id @default(cuid())
  softwareId String
  software   Software      @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  userId     String?
  user       User?         @relation(fields: [userId], references: [id])
  name       String?
  email      String?
  content    String        @db.Text
  status     CommentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([softwareId, status, createdAt])
}

model Review {
  id         String   @id @default(cuid())
  softwareId String
  software   Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  rating     Int
  title      String?
  body       String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([softwareId, userId])
  @@index([softwareId, rating])
}

// =====================================
// System requirements & FAQs
// =====================================
model SystemRequirement {
  id          String   @id @default(cuid())
  softwareId  String
  software    Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  os          String
  minimum     Json
  recommended Json?
}

model FAQ {
  id         String   @id @default(cuid())
  softwareId String
  software   Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  question   String
  answer     String   @db.Text
  order      Int      @default(0)

  @@index([softwareId, order])
}

// =====================================
// Users & roles
// =====================================
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  name         String?
  role         Role      @default(USER)
  avatarUrl    String?
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  comments Comment[]
  reviews  Review[]
}

// =====================================
// Pages & settings
// =====================================
model Page {
  id              String     @id @default(cuid())
  slug            String     @unique
  title           String
  content         String     @db.Text
  status          PageStatus @default(DRAFT)
  metaTitle       String?
  metaDescription String?
  publishedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([status, publishedAt])
}

model Setting {
  key       String   @id
  json      Json?
  text      String?  @db.Text
  updatedAt DateTime @updatedAt
}

// =====================================
// Analytics & materialized counters
// =====================================
model DownloadLog {
  id String @id @default(cuid())

  softwareId String
  software   Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)

  versionId String?
  version   Version? @relation("VersionToDownloadLog", fields: [versionId], references: [id])

  buildId String?
  build   Build?  @relation("BuildToDownloadLog", fields: [buildId], references: [id])

  ip        String?  @db.VarChar(45)
  ua        String?  @db.VarChar(191)
  referer   String?  @db.VarChar(191)
  createdAt DateTime @default(now())

  @@index([softwareId, createdAt])
  @@index([versionId])
  @@index([buildId])
}

model DownloadCounter {
  softwareId String   @id
  software   Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  total      Int      @default(0)
  updatedAt  DateTime @updatedAt

  @@index([total(sort: Desc)])
}

model DownloadCounter30d {
  softwareId String   @id
  software   Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  total30d   Int      @default(0)
  computedAt DateTime @default(now())

  @@index([total30d(sort: Desc)])
}

// materialized snapshots
model DownloadCounterDaily {
  softwareId String
  day        DateTime
  total      Int      @default(0)

  software Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)

  @@id([softwareId, day])
  @@index([day, total(sort: Desc)])
}

model DownloadCounterWeekly {
  softwareId String
  weekStart  DateTime
  total      Int      @default(0)

  software Software @relation(fields: [softwareId], references: [id], onDelete: Cascade)

  @@id([softwareId, weekStart])
  @@index([weekStart, total(sort: Desc)])
}
